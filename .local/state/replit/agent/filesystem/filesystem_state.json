{"file_contents":{"PERFORMANCE_OPTIMIZATIONS.md":{"content":"# Performance Optimizations for Government System\n\nThis document summarizes the optimizations implemented to address the `[Violation] 'setTimeout' handler took Xms` warnings in the government system.\n\n## Issues Identified\n\n1. **Heavy Data Processing**: Multiple `useQuery` hooks fetching data simultaneously in the Letters component\n2. **Document Preview Performance**: PDF previews using iframes can be resource-intensive\n3. **Authentication Context Operations**: Complex timeout logic with event listeners in AuthContext\n4. **Database Queries**: Potentially unoptimized queries for large datasets\n5. **Lack of Caching**: Missing cache headers for API responses\n\n## Optimizations Implemented\n\n### 1. AuthContext.tsx\n- Added debouncing to the activity timer function to prevent excessive calls\n- Used passive event listeners for better performance\n- Improved timeout cleanup to prevent memory leaks\n\n### 2. Letters.tsx\n- Added `useMemo` hooks to memoize expensive calculations\n- Optimized query settings with appropriate `staleTime` and `gcTime` values\n- Implemented filtered letters memoization to prevent unnecessary re-renders\n- Added performance optimizations to API request handling\n\n### 3. DocumentPreview.tsx\n- Memoized file extension calculation, file icon, file type, and file size formatting\n- Memoized preview content to prevent unnecessary re-renders\n- Added lazy loading for iframes\n- Optimized component rendering with useMemo\n\n### 4. queryClient.ts\n- Added performance optimizations to API requests with keepalive option\n- Improved query configuration with optimized refetch settings\n- Added network mode optimizations for mutations\n\n### 5. server/routes.ts\n- Added cache headers for API responses to reduce server load\n- Implemented performance headers middleware\n- Added caching strategies for folders and letters endpoints\n\n### 6. server/storage.ts\n- Added limit to getAllLetters query to prevent performance issues with large datasets\n- Maintained existing optimizations while ensuring data integrity\n\n## Expected Improvements\n\nThese optimizations should address the setTimeout violation warnings by:\n\n1. **Reducing Main Thread Blocking**: Memoization and debouncing reduce the amount of work done on the main thread\n2. **Improving Cache Efficiency**: Proper cache headers reduce redundant API calls\n3. **Optimizing Event Handling**: Passive event listeners and debounced handlers reduce overhead\n4. **Preventing Memory Leaks**: Proper cleanup of timeouts and event listeners\n5. **Enhancing Data Loading**: Optimized query settings reduce unnecessary refetching\n\n## Monitoring\n\nAfter implementing these changes, monitor the console for:\n- Reduction or elimination of `[Violation] 'setTimeout' handler took Xms` warnings\n- Improved rendering performance in the Letters table\n- Faster authentication context initialization\n- Better document preview loading times\n\n## Additional Recommendations\n\n1. Consider implementing pagination for large datasets\n2. Add virtualization for long lists/tables\n3. Implement code splitting for better initial load times\n4. Use React Profiler to identify additional performance bottlenecks\n5. Consider implementing Suspense for better loading states","size_bytes":3197},"TODO_MANUAL_REFACTOR.md":{"content":"You must now refactor the following files to remove all Firebase and Supabase logic:\n\n- client/src/lib/auth.ts: Remove all firebase imports and logic. Replace with Aiven-based or custom auth.\n- client/src/pages/Login.tsx: Remove all firebaseUser references and logic.\n- server/routes.ts: Remove all firebase user creation and claims logic.\n- server/storage.ts: Remove FirebaseStorage class and related logic.\n\nDelete these files:\n- client/src/lib/firebase.ts\n- server/firebase-admin.ts\n- server/supabase.ts\n\nAfter these changes, test your app thoroughly to ensure only Aiven is used for authentication and storage.\n","size_bytes":615},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# RMU Government System\n\n## Overview\nA comprehensive Records Management Unit (RMU) system for Kenyan government state department of industry. Features Firebase authentication, strict role-based access control, government hierarchy enforcement, document management with Supabase cloud storage, and automated workflow routing.\n\n## Architecture\n- **Frontend**: React with TypeScript, Wouter routing, TanStack Query\n- **Backend**: Express.js with JWT authentication\n- **Database**: Aiven PostgreSQL with Drizzle ORM\n- **Authentication**: JWT-based with bcryptjs password hashing\n- **Storage**: File system with secure token-based access\n- **UI**: Tailwind CSS with shadcn/ui components\n\n## Government Hierarchy\n- **Secretary** (Industrialization) → **Principal Secretary** → **Department Heads** → **Officers**\n- **Departments**: Admin, Finance, Accounts, ICT, Communications, HRM, Legal, Internal Audit, Procurement, Planning\n- **Position Levels**: Secretary, PS, AD, DFS, CHEM_MIN, MIP, ENG, KIN\n\n## Key Features\n- Role-based access control (only ICT admin and Registry head can add users)\n- Single-role constraints (only one PS, one Secretary, etc.)\n- Document workflow: Registry → PS → Department Officers\n- Letter status tracking with color codes (gray→blue→yellow→green)\n- PS action buttons: TNA, File Away, Post Response, FYI\n- Document archiving when users complete work\n- Chatbot assistant (MIRA) with draggable interface\n- Light/dark theme support\n\n## Recent Changes\n- **2025-01-30**: Enhanced UI with beautiful design, improved logo styling, and mobile-responsive hamburger menu\n- **2025-01-30**: Added welcome landing page with professional government interface and system overview\n- **2025-01-30**: Implemented glass morphism effects, improved color schemes, and smooth animations\n- **2025-01-30**: Enhanced sidebar with role-based badges, better navigation, and mobile responsiveness\n- **2025-01-30**: Updated header with modern search functionality, notifications, and user dropdown menu\n- **2025-01-30**: Implemented universal login page with JWT authentication\n- **2025-01-30**: Connected to Aiven PostgreSQL database with existing user data\n- **2025-01-30**: Added role-based dashboard routing for government hierarchy\n- **2025-01-30**: Configured bcrypt password authentication with existing users\n- **2025-01-30**: Migrated from Firebase to JWT-based authentication system\n\n## User Preferences\n- Government-appropriate professional interface\n- Secure document handling with cloud storage\n- Role-specific functionality visibility\n- Color-coded status tracking for easy workflow management","size_bytes":2619},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"test-db.js":{"content":"import { Pool } from 'pg';\nimport fs from 'fs';\n\nconst ca = fs.readFileSync('./ca.pem', 'utf-8');\n\nconst pool = new Pool({\n  host: 'public-goverment-project-goverment-website.j.aivencloud.com', // Use DNS name for SSL\n  port: 13270,\n  user: 'avnadmin',\n  password: 'AVNS_nQOiWAOU_lP9__dBVYf',\n  database: 'defaultdb',\n  ssl: {\n    ca,\n    rejectUnauthorized: true,\n  }\n  // family: 4, // Leave out for troubleshooting\n});\n\npool.query('SELECT NOW()', (err, res) => {\n  if (err) {\n    console.error('Connection error:', err);\n  } else {\n    console.log('Success:', res.rows);\n  }\n  pool.end();\n});\n\nconst { db } = require('./server/db');\nconst { letters } = require('./shared/schema');\n\nasync function testLettersTable() {\n  try {\n    // Try to query the letters table structure\n    const result = await db.select().from(letters).limit(1);\n    console.log('Letters table structure:', result);\n  } catch (error) {\n    console.error('Error querying letters table:', error.message);\n  }\n}\n\ntestLettersTable();\n","size_bytes":1005},"test_api.js":{"content":"// Simple script to test the API endpoints\nconst fetch = require('node-fetch');\n\n// Test script to check user management API\nasync function testUserAPI() {\n  try {\n    console.log('Testing /api/users endpoint...');\n    \n    // First get a token by logging in\n    const loginResponse = await fetch('http://localhost:5000/api/auth/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        email: 'admin@rmu.gov.ke', // Using the admin user\n        password: 'Admin123!'\n      })\n    });\n    \n    if (!loginResponse.ok) {\n      console.log('Login failed:', await loginResponse.text());\n      return;\n    }\n    \n    const loginData = await loginResponse.json();\n    console.log('Login successful');\n    \n    // Test the users endpoint\n    const usersResponse = await fetch('http://localhost:5000/api/users', {\n      headers: {\n        'Authorization': `Bearer ${loginData.token}`\n      }\n    });\n    \n    if (!usersResponse.ok) {\n      console.log('Users API failed:', await usersResponse.text());\n      return;\n    }\n    \n    const users = await usersResponse.json();\n    console.log('Users API response:');\n    console.log(JSON.stringify(users, null, 2));\n    \n    // Test user stats endpoint\n    const statsResponse = await fetch('http://localhost:5000/api/users/stats', {\n      headers: {\n        'Authorization': `Bearer ${loginData.token}`\n      }\n    });\n    \n    if (statsResponse.ok) {\n      const stats = await statsResponse.json();\n      console.log('User stats API response:');\n      console.log(JSON.stringify(stats, null, 2));\n    } else {\n      console.log('User stats API failed:', await statsResponse.text());\n    }\n    \n  } catch (error) {\n    console.error('Test failed:', error);\n  }\n}\n\ntestUserAPI();","size_bytes":1798},"test_folders.js":{"content":"// Use dynamic import for fetch in ES modules\nasync function testDeleteFolder() {\n  try {\n    // Dynamically import node-fetch\n    const { default: fetch } = await import('node-fetch');\n\n    // First, let's try to login to get an auth token\n    console.log('Logging in...');\n    const loginResponse = await fetch('http://localhost:5000/api/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        email: 'admin@gov.rm',\n        password: 'Admin123!',\n      }),\n    });\n\n    console.log(`Login response status: ${loginResponse.status}`);\n    \n    if (loginResponse.status !== 200) {\n      console.log('Login failed. Trying with default admin credentials...');\n      // Try with default admin credentials\n      const loginResult = await loginResponse.json();\n      console.log('Login result:', loginResult);\n      return;\n    }\n\n    const loginResult = await loginResponse.json();\n    const token = loginResult.token;\n    console.log('Login successful. Token received.');\n\n    // Now, let's get all folders using the token\n    console.log('Getting all folders...');\n    const foldersResponse = await fetch('http://localhost:5000/api/folders', {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n      },\n    });\n    \n    console.log(`Folders response status: ${foldersResponse.status}`);\n    const folders = await foldersResponse.json();\n    console.log('Existing folders:', folders);\n\n    if (Array.isArray(folders) && folders.length > 0) {\n      const folderId = folders[0].id;\n      console.log(`Attempting to delete folder with ID: ${folderId}`);\n      \n      // Try to delete the first folder\n      const deleteResponse = await fetch(`http://localhost:5000/api/folders/${folderId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n      \n      console.log(`Delete response status: ${deleteResponse.status}`);\n      const deleteResult = await deleteResponse.json();\n      console.log('Delete result:', deleteResult);\n    } else {\n      console.log('No folders to delete');\n    }\n  } catch (error) {\n    console.error('Test error:', error);\n  }\n}\n\ntestDeleteFolder();","size_bytes":2227},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":894},"server/auth-routes-simple.ts":{"content":"import { Express } from 'express';\nimport { z } from 'zod';\nimport { pool, db } from './db';\nimport { comparePassword, generateToken, AuthenticatedRequest, authenticateToken } from './auth';\nimport { users, folders, letters, auditLogs } from '../shared/schema';\nimport { eq, count, desc } from 'drizzle-orm';\n\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1),\n});\n\nexport function registerAuthRoutes(app: Express) {\n  // Login endpoint\n  app.post('/api/login', async (req, res) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n\n      // Find user by email using raw query\n      const userResult = await pool.query(\n        'SELECT * FROM users WHERE email = $1 AND is_active = true',\n        [email]\n      );\n\n      if (userResult.rows.length === 0) {\n        return res.status(401).json({ message: 'Invalid email or password' });\n      }\n\n      const user = userResult.rows[0];\n\n      // Verify password\n      const isValidPassword = await comparePassword(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: 'Invalid email or password' });\n      }\n\n      // Update last login\n      await pool.query(\n        'UPDATE users SET last_login_at = CURRENT_TIMESTAMP WHERE id = $1',\n        [user.id]\n      );\n\n      // Get user roles from user_roles table and roles table\n      const rolesResult = await pool.query(`\n        SELECT r.name \n        FROM roles r\n        INNER JOIN user_roles ur ON r.id = ur.role_id\n        WHERE ur.user_id = $1\n      `, [user.id]);\n\n      let userRoleNames = rolesResult.rows.map(row => row.name);\n      \n      // If no roles found in user_roles table, check if user has a direct role field\n      if (userRoleNames.length === 0 && user.role) {\n        userRoleNames = [user.role];\n      }\n\n      // Generate JWT token\n      const token = generateToken({ \n        userId: user.id, \n        email: user.email,\n        roles: userRoleNames\n      });\n\n      // Return user data with token\n      res.json({\n        success: true,\n        token,\n        user: {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n          roles: userRoleNames,\n          department: user.department,\n          position: user.position,\n        }\n      });\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(400).json({ message: 'Login failed' });\n    }\n  });\n\n  // Get current user endpoint\n  app.get('/api/me', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: 'Not authenticated' });\n      }\n\n      res.json({\n        success: true,\n        user: req.user\n      });\n    } catch (error) {\n      console.error('Get user error:', error);\n      res.status(500).json({ message: 'Failed to get user data' });\n    }\n  });\n\n  // Logout endpoint\n  app.post('/api/logout', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      // JWT tokens are stateless, so we just return success\n      // In production, you might want to maintain a blacklist\n      res.json({ success: true, message: 'Logged out successfully' });\n    } catch (error) {\n      console.error('Logout error:', error);\n      res.status(500).json({ message: 'Logout failed' });\n    }\n  });\n\n  // Stats endpoint - simplified version\n  app.get('/api/stats', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      // Use a simple query approach\n      const totalFoldersResult = await db.execute('SELECT COUNT(*) as count FROM folders WHERE is_active = true');\n      const totalLettersResult = await db.execute('SELECT COUNT(*) as count FROM letters');\n      const pendingLettersResult = await db.execute(\"SELECT COUNT(*) as count FROM letters WHERE status = 'pending'\");\n      const activeUsersResult = await db.execute('SELECT COUNT(*) as count FROM users WHERE is_active = true');\n\n      res.json({\n        totalFolders: parseInt(totalFoldersResult.rows[0].count) || 0,\n        activeLetters: parseInt(totalLettersResult.rows[0].count) || 0,\n        pendingVerification: parseInt(pendingLettersResult.rows[0].count) || 0,\n        activeUsers: parseInt(activeUsersResult.rows[0].count) || 0\n      });\n    } catch (error) {\n      console.error('Stats error:', error);\n      res.status(500).json({ message: 'Failed to fetch stats' });\n    }\n  });\n\n  // Recent letters endpoint - simplified version\n  app.get('/api/letters/recent', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const recentLetters = await db.select().from(letters)\n        .orderBy(desc(letters.uploadedAt))\n        .limit(10);\n      \n      res.json(recentLetters);\n    } catch (error) {\n      console.error('Recent letters error:', error);\n      res.status(500).json({ message: 'Failed to fetch recent letters' });\n    }\n  });\n\n  // Audit logs endpoint\n  app.get('/api/audit-logs/recent', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const recentLogs = await db.select().from(auditLogs)\n        .orderBy(desc(auditLogs.timestamp))\n        .limit(10);\n      \n      res.json(recentLogs);\n    } catch (error) {\n      console.error('Audit logs error:', error);\n      res.status(500).json({ message: 'Failed to fetch audit logs' });\n    }\n  });\n\n  // Folders endpoint\n  app.get('/api/folders', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userFolders = await db.select().from(folders)\n        .where(eq(folders.isActive, true))\n        .orderBy(desc(folders.createdAt));\n      \n      // Add letter count for each folder\n      const foldersWithCounts = await Promise.all(\n        userFolders.map(async (folder) => {\n          try {\n            const lettersResult = await db.select().from(letters)\n              .where(eq(letters.folderId, folder.id));\n            const letterCount = Array.isArray(lettersResult) ? lettersResult.length : 0;\n            return { ...folder, letterCount };\n          } catch (letterError) {\n            console.warn(`Error getting letters for folder ${folder.id}:`, letterError);\n            return { ...folder, letterCount: 0 };\n          }\n        })\n      );\n      \n      res.json(foldersWithCounts);\n    } catch (error) {\n      console.error('Folders error:', error);\n      res.status(500).json({ message: 'Failed to fetch folders' });\n    }\n  });\n}","size_bytes":6433},"server/auth-routes.ts":{"content":"import { Express } from 'express';\nimport { z } from 'zod';\nimport { db } from './db';\nimport { users, userRoles, roles } from '@shared/schema';\nimport { eq, and } from 'drizzle-orm';\nimport { hashPassword, comparePassword, generateToken, authenticateToken, AuthenticatedRequest } from './auth';\n\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\nconst registerSchema = z.object({\n  email: z.string().email(),\n  name: z.string().min(2),\n  password: z.string().min(6),\n  department: z.string().optional(),\n  position: z.string().optional(),\n  roles: z.array(z.string()).default(['letter_recipient']),\n});\n\nexport function registerAuthRoutes(app: Express) {\n  // Login endpoint\n  app.post('/api/login', async (req, res) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n\n      // Find user by email with basic query\n      const [user] = await db.select().from(users).where(eq(users.email, email)).limit(1);\n\n      if (!user) {\n        return res.status(401).json({ message: 'Invalid email or password' });\n      }\n\n      if (!user.isActive) {\n        return res.status(401).json({ message: 'Account is disabled' });\n      }\n\n      // Check password\n      const isValidPassword = await comparePassword(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: 'Invalid email or password' });\n      }\n\n      // Update last login\n      await db.update(users)\n        .set({ lastLoginAt: new Date() })\n        .where(eq(users.id, user.id));\n\n      // Get user roles with separate query\n      const userRoleData = await db.select({\n        roleName: roles.name\n      })\n      .from(userRoles)\n      .innerJoin(roles, eq(userRoles.roleId, roles.id))\n      .where(eq(userRoles.userId, user.id));\n\n      const userRoleNames = userRoleData.map(ur => ur.roleName);\n\n      // Generate JWT token\n      const token = generateToken({ \n        userId: user.id, \n        email: user.email,\n        roles: userRoleNames \n      });\n\n      const userData = {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        department: user.department,\n        position: user.position,\n        roles: userRoleNames,\n        canAssignLetters: user.canAssignLetters,\n      };\n\n      res.json({\n        token,\n        user: userData,\n        message: 'Login successful'\n      });\n\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? 'Invalid input data' : 'Login failed' \n      });\n    }\n  });\n\n  // Get current user endpoint\n  app.get('/api/me', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: 'User not authenticated' });\n      }\n\n      // Get full user data with roles\n      const user = await db.query.users.findFirst({\n        where: eq(users.id, req.user.id),\n        with: {\n          userRoles: {\n            with: {\n              role: true\n            }\n          }\n        }\n      });\n\n      if (!user) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n\n      const userData = {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        department: user.department,\n        position: user.position,\n        roles: Array.isArray(user.userRoles)\n          ? user.userRoles.map(ur => ur.role && typeof ur.role === 'object' && 'name' in ur.role ? ur.role.name : undefined).filter(Boolean)\n          : [],\n        canAssignLetters: user.canAssignLetters,\n        emailVerified: user.emailVerified,\n        lastLoginAt: user.lastLoginAt,\n      };\n\n      res.json(userData);\n\n    } catch (error) {\n      console.error('Get user error:', error);\n      res.status(500).json({ message: 'Failed to get user data' });\n    }\n  });\n\n  // Register new user (admin only)\n  app.post('/api/register', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      // Check if user has admin role\n      if (!req.user?.roles.includes('admin')) {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const userData = registerSchema.parse(req.body);\n\n      // Check if email already exists\n      const existingUser = await db.query.users.findFirst({\n        where: eq(users.email, userData.email)\n      });\n\n      if (existingUser) {\n        return res.status(400).json({ message: 'Email already exists' });\n      }\n\n      // Hash password\n      const hashedPassword = await hashPassword(userData.password);\n\n      // Create user\n      let newUser: any;\n      const result = await db.insert(users).values({\n        email: userData.email,\n        name: userData.name,\n        password: hashedPassword,\n        department: userData.department,\n        position: userData.position,\n        createdBy: req.user.id,\n      }).returning();\n      if (Array.isArray(result)) {\n        newUser = result[0];\n      } else if (result && typeof result === 'object' && 'id' in result) {\n        newUser = result;\n      } else {\n        throw new Error('Failed to create user');\n      }\n\n      // Assign roles\n      for (const roleName of userData.roles) {\n        const role = await db.query.roles.findFirst({\n          where: eq(roles.name, roleName)\n        });\n\n        if (role) {\n          await db.insert(userRoles).values({\n            userId: newUser.id,\n            roleId: role.id,\n          });\n        }\n      }\n\n      res.status(201).json({\n        message: 'User created successfully',\n        user: {\n          id: newUser.id,\n          email: newUser.email,\n          name: newUser.name,\n          department: newUser.department,\n          position: newUser.position,\n        }\n      });\n\n    } catch (error) {\n      console.error('Register error:', error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? 'Invalid input data' : 'Registration failed' \n      });\n    }\n  });\n\n  // Logout endpoint\n  app.post('/api/logout', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    // For JWT, we just need to clear the token on the client side\n    // In a production environment, you might want to maintain a blacklist of tokens\n    res.json({ message: 'Logged out successfully' });\n  });\n\n  // Email verification, forgot password, and reset password endpoints\n\n  // 1. Request email verification (send token)\n  app.post('/api/verify-email', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      if (!req.user) return res.status(401).json({ message: 'Not authenticated' });\n      // Generate a simple token (in production, use a secure random token)\n      const token = generateToken({ userId: req.user.id, type: 'verify-email' });\n      // TODO: Send email with token link (simulate for now)\n      // Save token to user row (or a separate table if you want multiple tokens)\n      await db.update(users).set({ emailVerificationToken: token }).where(eq(users.id, req.user.id));\n      // Simulate email send\n      console.log(`Verification link: https://your-app.com/verify-email?token=${token}`);\n      res.json({ message: 'Verification email sent (simulated)', token });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to send verification email' });\n    }\n  });\n\n  // 2. Verify email with token\n  app.post('/api/verify-email/confirm', async (req, res) => {\n    try {\n      const { token } = req.body;\n      if (!token) return res.status(400).json({ message: 'Token required' });\n      let payload;\n      try {\n        payload = require('./auth').verifyToken(token);\n      } catch {\n        return res.status(400).json({ message: 'Invalid or expired token' });\n      }\n      if (payload.type !== 'verify-email') return res.status(400).json({ message: 'Invalid token type' });\n      // Find user by id and token\n      const [foundUser] = await db.select().from(users).where(and(eq(users.id, payload.userId), eq(users.emailVerificationToken, token)));\n      if (!foundUser) return res.status(400).json({ message: 'Invalid or expired token' });\n      // Mark email as verified\n      await db.update(users).set({ emailVerified: true, emailVerificationToken: null }).where(eq(users.id, foundUser.id));\n      res.json({ message: 'Email verified successfully' });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to verify email' });\n    }\n  });\n\n  // 3. Request password reset (send token)\n  app.post('/api/forgot-password', async (req, res) => {\n    try {\n      const { email } = req.body;\n      if (!email) return res.status(400).json({ message: 'Email required' });\n      const [user] = await db.select().from(users).where(eq(users.email, email));\n      if (!user) return res.status(200).json({ message: 'If the email exists, a reset link has been sent.' });\n      const token = generateToken({ userId: user.id, type: 'reset-password' });\n      await db.update(users).set({ passwordResetToken: token }).where(eq(users.id, user.id));\n      // Simulate email send\n      console.log(`Reset link: https://your-app.com/reset-password?token=${token}`);\n      res.json({ message: 'Password reset email sent (simulated)', token });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to send password reset email' });\n    }\n  });\n\n  // 4. Reset password with token\n  app.post('/api/reset-password', async (req, res) => {\n    try {\n      const { token, password } = req.body;\n      if (!token || !password) return res.status(400).json({ message: 'Token and new password required' });\n      let payload;\n      try {\n        payload = require('./auth').verifyToken(token);\n      } catch {\n        return res.status(400).json({ message: 'Invalid or expired token' });\n      }\n      if (payload.type !== 'reset-password') return res.status(400).json({ message: 'Invalid token type' });\n      // Find user by id and token\n      const [foundUser] = await db.select().from(users).where(and(eq(users.id, payload.userId), eq(users.passwordResetToken, token)));\n      if (!foundUser) return res.status(400).json({ message: 'Invalid or expired token' });\n      // Hash new password\n      const hashedPassword = await hashPassword(password);\n      await db.update(users).set({ password: hashedPassword, passwordResetToken: null }).where(eq(users.id, foundUser.id));\n      res.json({ message: 'Password reset successful' });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to reset password' });\n    }\n  });\n}","size_bytes":10512},"server/auth-temp.ts":{"content":"import { Express } from 'express';\nimport { z } from 'zod';\nimport { comparePassword, generateToken, hashPassword, AuthenticatedRequest, authenticateToken } from './auth';\n\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1),\n});\n\n// Temporary in-memory user storage until database is working\nconst tempUsers = new Map();\n\nasync function initTempUsers() {\n  if (!tempUsers.has('admin@rmu.gov.ke')) {\n    const hashedPassword = await hashPassword('admin123');\n    tempUsers.set('admin@rmu.gov.ke', {\n      id: 1,\n      email: 'admin@rmu.gov.ke',\n      name: 'System Administrator',\n      password: hashedPassword,\n      department: 'ICT',\n      position: 'Administrator',\n      roles: ['admin'],\n      isActive: true\n    });\n    console.log('✅ Temporary admin user created: admin@rmu.gov.ke / admin123');\n  }\n}\n\nexport function registerAuthRoutes(app: Express) {\n  // Initialize temporary users\n  initTempUsers();\n\n  // Login endpoint\n  app.post('/api/login', async (req, res) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n\n      // Find user in temporary storage\n      const user = tempUsers.get(email);\n\n      if (!user || !user.isActive) {\n        return res.status(401).json({ message: 'Invalid email or password' });\n      }\n\n      // Verify password\n      const isValidPassword = await comparePassword(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: 'Invalid email or password' });\n      }\n\n      // Generate JWT token\n      const token = generateToken({ \n        userId: user.id, \n        email: user.email,\n        roles: user.roles\n      });\n\n      // Return user data with token\n      res.json({\n        success: true,\n        token,\n        user: {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n          roles: user.roles,\n          department: user.department,\n          position: user.position,\n        }\n      });\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(400).json({ message: 'Login failed' });\n    }\n  });\n\n  // Get current user endpoint\n  app.get('/api/me', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: 'Not authenticated' });\n      }\n\n      res.json({\n        success: true,\n        user: req.user\n      });\n    } catch (error) {\n      console.error('Get user error:', error);\n      res.status(500).json({ message: 'Failed to get user data' });\n    }\n  });\n\n  // Logout endpoint\n  app.post('/api/logout', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      res.json({ success: true, message: 'Logged out successfully' });\n    } catch (error) {\n      console.error('Logout error:', error);\n      res.status(500).json({ message: 'Logout failed' });\n    }\n  });\n}","size_bytes":2904},"server/auth.ts":{"content":"import bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport { Request, Response, NextFunction } from 'express';\nimport { db } from './db';\nimport { users, userRoles, roles } from '@shared/schema';\nimport { eq, and } from 'drizzle-orm';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-in-production';\nconst JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || '7d';\n\nexport interface AuthenticatedRequest extends Request {\n  user?: {\n    id: number;\n    email: string;\n    name: string;\n    roles: string[];\n    department?: string;\n    position?: string;\n    canAssignLetters?: boolean;\n    level?: number;\n  };\n}\n\n// Hash password\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, 12);\n}\n\n// Compare password\nexport async function comparePassword(password: string, hashedPassword: string): Promise<boolean> {\n  return bcrypt.compare(password, hashedPassword);\n}\n\n// Generate JWT token\nexport function generateToken(payload: any): string {\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\n}\n\n// Verify JWT token\nexport function verifyToken(token: string): any {\n  try {\n    return jwt.verify(token, JWT_SECRET);\n  } catch (error) {\n    return null;\n  }\n}\n\n// Get user with roles using raw SQL\nexport async function getUserWithRoles(userId: number) {\n  try {\n    const { pool } = await import('./db');\n    \n    const userResult = await pool.query(\n      'SELECT * FROM users WHERE id = $1 AND is_active = true',\n      [userId]\n    );\n\n    if (userResult.rows.length === 0) return null;\n\n    const user = userResult.rows[0];\n\n    // Get user roles with better error handling\n    let userRoleNames: string[] = [];\n    \n    try {\n      const rolesResult = await pool.query(`\n        SELECT r.name \n        FROM roles r\n        INNER JOIN user_roles ur ON r.id = ur.role_id\n        WHERE ur.user_id = $1\n      `, [userId]);\n\n      userRoleNames = rolesResult.rows.map(row => row.name);\n    } catch (roleError) {\n      console.warn('Error fetching user roles:', roleError);\n    }\n    \n    // If no roles found in user_roles table, check if user has a direct role field\n    if (userRoleNames.length === 0 && user.role) {\n      userRoleNames = [user.role];\n    }\n    \n    // Default to 'user' role if no roles found\n    if (userRoleNames.length === 0) {\n      userRoleNames = ['user'];\n    }\n\n    return {\n      id: user.id,\n      email: user.email,\n      name: user.name,\n      roles: userRoleNames,\n      department: user.department,\n      position: user.position,\n      isActive: user.is_active,\n      canAssignLetters: user.can_assign_letters || false,\n      level: user.level || 0,\n    };\n  } catch (error) {\n    console.error('Error getting user with roles:', error);\n    return null;\n  }\n}\n\n// Authentication middleware\nexport async function authenticateToken(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  try {\n    console.log('--- AUTH MIDDLEWARE DEBUG ---');\n    console.log('Request method:', req.method);\n    console.log('Request path:', req.path);\n    \n    const authHeader = req.headers.authorization;\n    const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN\n    \n    if (!token) {\n      console.log('No token provided');\n      return res.status(401).json({ \n        message: 'Authentication required', \n        code: 'NO_TOKEN' \n      });\n    }\n\n    const decoded = verifyToken(token);\n    if (!decoded) {\n      console.log('Invalid token');\n      return res.status(401).json({ \n        message: 'Invalid or expired token', \n        code: 'INVALID_TOKEN' \n      });\n    }\n\n    // Validate required fields in token\n    if (!decoded.userId) {\n      console.log('Token missing userId');\n      return res.status(401).json({ \n        message: 'Invalid token format', \n        code: 'MALFORMED_TOKEN' \n      });\n    }\n\n    const user = await getUserWithRoles(decoded.userId);\n    if (!user || !user.isActive) {\n      console.log('User not found or inactive:', decoded.userId);\n      return res.status(401).json({ \n        message: 'User not found or account deactivated', \n        code: 'USER_INACTIVE' \n      });\n    }\n\n    req.user = {\n      id: user.id,\n      email: user.email,\n      name: user.name,\n      roles: user.roles,\n      department: user.department,\n      position: user.position,\n      canAssignLetters: user.canAssignLetters,\n      level: user.level,\n    };\n\n    console.log('Authentication successful for user:', user.email);\n    next();\n  } catch (error) {\n    console.error('Auth middleware error:', error);\n    // Ensure we always return JSON\n    if (!res.headersSent) {\n      return res.status(500).json({ \n        message: 'Authentication service error', \n        code: 'AUTH_SERVICE_ERROR' \n      });\n    }\n  }\n}\n\n// Role-based authorization middleware\nexport function requireRole(allowedRoles: string[]) {\n  return (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({ \n        message: 'Authentication required',\n        code: 'NOT_AUTHENTICATED' \n      });\n    }\n\n    const hasRole = req.user.roles.some(role => allowedRoles.includes(role));\n    if (!hasRole) {\n      console.log(`Access denied for user ${req.user.email}. Required roles: ${allowedRoles.join(', ')}, User roles: ${req.user.roles.join(', ')}`);\n      return res.status(403).json({ \n        message: 'Insufficient permissions',\n        code: 'INSUFFICIENT_PERMISSIONS',\n        requiredRoles: allowedRoles \n      });\n    }\n\n    next();\n  };\n}\n\n// Admin only middleware\nexport function requireAdmin(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  console.log('--- REQUIRE ADMIN DEBUG ---');\n  if (!req.user) {\n    console.log('No req.user found');\n    return res.status(401).json({ \n      message: 'Authentication required',\n      code: 'NOT_AUTHENTICATED' \n    });\n  }\n  \n  console.log('req.user roles:', req.user.roles);\n  if (!req.user.roles.includes('admin')) {\n    console.log('User does not have admin role');\n    return res.status(403).json({ \n      message: 'Administrator access required',\n      code: 'ADMIN_REQUIRED' \n    });\n  }\n  \n  console.log('User is admin, proceeding');\n  next();\n}\n\n// Middleware to check if user can assign letters\nexport function requireAssignmentPermission(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  if (!req.user) {\n    return res.status(401).json({ \n      message: 'Authentication required',\n      code: 'NOT_AUTHENTICATED' \n    });\n  }\n\n  if (!req.user.canAssignLetters && !req.user.roles.includes('admin')) {\n    return res.status(403).json({ \n      message: 'Letter assignment permission required',\n      code: 'ASSIGNMENT_PERMISSION_REQUIRED' \n    });\n  }\n\n  next();\n}","size_bytes":6754},"server/db.ts":{"content":"import fs from 'fs';\nimport { Pool } from 'pg';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from \"@shared/schema\";\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\n// Enhanced database connection configuration with error handling\nconst caCertPath = process.env.DATABASE_CA_CERT || './ca.pem';\nlet sslConfig: any = { rejectUnauthorized: false };\n\ntry {\n  if (fs.existsSync(caCertPath)) {\n    const caCert = fs.readFileSync(caCertPath).toString();\n    sslConfig = {\n      ca: caCert,\n      rejectUnauthorized: true,\n      checkServerIdentity: () => undefined, // Skip hostname verification for cloud databases\n    };\n    console.log('✓ SSL certificate loaded successfully');\n  } else {\n    console.warn('⚠️  CA certificate not found, using permissive SSL config');\n    sslConfig = {\n      rejectUnauthorized: false,\n      checkServerIdentity: () => undefined,\n    };\n  }\n} catch (e) {\n  console.warn('⚠️  Could not load CA cert, using permissive SSL config:', e instanceof Error ? e.message : e);\n  sslConfig = {\n    rejectUnauthorized: false,\n    checkServerIdentity: () => undefined,\n  };\n}\n\nconst connectionConfig = {\n  host: process.env.DATABASE_HOST,\n  port: parseInt(process.env.DATABASE_PORT || '5432', 10),\n  user: process.env.DATABASE_USER,\n  password: process.env.DATABASE_PASSWORD,\n  database: process.env.DATABASE_NAME,\n  ssl: sslConfig,\n  max: 10, // Maximum number of clients in the pool\n  idleTimeoutMillis: 30000, // Close idle clients after 30 seconds\n  connectionTimeoutMillis: 10000, // Increased timeout for cloud database\n  acquireTimeoutMillis: 10000, // Time to wait for a connection from the pool\n  createTimeoutMillis: 10000, // Time to wait for a new connection\n  destroyTimeoutMillis: 5000, // Time to wait for a connection to be destroyed\n  reapIntervalMillis: 1000, // Check for idle connections every second\n  createRetryIntervalMillis: 200, // Retry failed connections every 200ms\n  propagateCreateError: false, // Don't propagate create errors\n};\n\nconsole.log('Database connection config:', {\n  ...connectionConfig,\n  password: connectionConfig.password ? '[REDACTED]' : undefined\n});\n\n// Create connection pool with error handling\nexport const pool = new Pool(connectionConfig);\n\n// Handle pool errors\npool.on('error', (err) => {\n  console.error('Unexpected error on idle client:', err);\n  process.exit(-1);\n});\n\npool.on('connect', () => {\n  console.log('✓ Database connection established');\n});\n\npool.on('remove', () => {\n  console.log('Database connection removed from pool');\n});\n\n// Test the connection with retry logic\nconst testConnection = async () => {\n  const maxRetries = 3;\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      const client = await pool.connect();\n      const result = await client.query('SELECT NOW()');\n      client.release();\n      console.log(`✓ Database connection test successful at: ${result.rows[0].now}`);\n      return;\n    } catch (err) {\n      console.error(`❌ Database connection test failed (attempt ${attempt}/${maxRetries}):`, err instanceof Error ? err.message : err);\n      if (attempt === maxRetries) {\n        console.error('❌ Failed to connect to database after all retry attempts');\n        console.error('Please check your database connection settings and network connectivity');\n      } else {\n        console.log(`Retrying in 2 seconds...`);\n        await new Promise(resolve => setTimeout(resolve, 2000));\n      }\n    }\n  }\n};\n\n// Run connection test\ntestConnection();\n\nexport const db = drizzle(pool, { \n  schema,\n  logger: process.env.NODE_ENV === 'development' ? {\n    logQuery: (query: string, params?: unknown[]) => {\n      console.log('🔍 SQL Query:', query);\n      if (params && params.length > 0) {\n        console.log('📊 Parameters:', params);\n      }\n    }\n  } : false\n});\n\n// Graceful shutdown\nprocess.on('SIGINT', async () => {\n  console.log('Closing database connection pool...');\n  await pool.end();\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', async () => {\n  console.log('Closing database connection pool...');\n  await pool.end();\n  process.exit(0);\n});\n","size_bytes":4127},"server/hash.ts":{"content":"","size_bytes":0},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerAuthRoutes } from \"./auth-routes-simple\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { registerRoutes } from \"./routes\";\nimport { initializeDatabase } from \"./init-database\";\nimport path from \"path\";\nimport { existsSync, mkdirSync } from \"fs\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst app = express();\napp.disable('x-powered-by');\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Security headers\napp.use((req, res, next) => {\n  res.setHeader('X-Content-Type-Options', 'nosniff');\n  res.setHeader('Content-Security-Policy', \"frame-ancestors 'self'\");\n  // Remove deprecated headers if present\n  res.removeHeader?.('X-Frame-Options');\n  res.removeHeader?.('Expires');\n  next();\n});\n\n// Prevent browser caching of login page\napp.use(['/login', '/api/login'], (req, res, next) => {\n  res.set('Cache-Control', 'no-store');\n  next();\n});\n\n// Serve uploaded files statically with proper configuration\n// Ensure uploads directory exists\nconst uploadsDir = path.join(__dirname, 'uploads');\nif (!existsSync(uploadsDir)) {\n  mkdirSync(uploadsDir, { recursive: true });\n}\napp.use('/uploads', express.static(uploadsDir, {\n  // Set cache control headers\n  maxAge: '1h',\n  // Ensure proper handling of files\n  etag: true,\n  lastModified: true\n}));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Initialize database schema and admin user\n  try {\n    await initializeDatabase();\n  } catch (error) {\n    console.error('Failed to initialize database:', error);\n    process.exit(1);\n  }\n\n  // Register authentication routes using Aiven database\n  const { registerAuthRoutes } = await import('./auth-routes-simple');\n  registerAuthRoutes(app);\n\n  // Register main API routes (folders, letters, etc.)\n  await registerRoutes(app);\n\n  const { createServer } = await import('http');\n  const server = createServer(app);\n\n\n  // Improved error handler: do not leak stack traces, always set security headers\n  app.use((err: any, req: Request, res: Response, next: NextFunction) => {\n    // Log error for debugging\n    console.error('Global error handler:', {\n      error: err.message,\n      stack: process.env.NODE_ENV === 'development' ? err.stack : undefined,\n      url: req.url,\n      method: req.method,\n      timestamp: new Date().toISOString()\n    });\n    \n    const status = err.status || err.statusCode || 500;\n    let message = 'Internal Server Error';\n    \n    // Set security headers\n    res.setHeader('X-Content-Type-Options', 'nosniff');\n    res.setHeader('Content-Security-Policy', \"frame-ancestors 'self'\");\n    \n    // Handle different error types\n    if (status < 500 || process.env.NODE_ENV === 'development') {\n      message = err.message || message;\n    }\n    \n    // Handle specific error types\n    if (err.name === 'ValidationError') {\n      return res.status(400).json({ \n        message: 'Validation failed', \n        errors: err.errors \n      });\n    }\n    \n    if (err.code === '23505') { // PostgreSQL unique violation\n      return res.status(409).json({ \n        message: 'Resource already exists' \n      });\n    }\n    \n    res.status(status).json({ \n      message,\n      ...(process.env.NODE_ENV === 'development' && { stack: err.stack })\n    });\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"127.0.0.1\",\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n\n// Add /check-auth endpoint for client-side login guard\napp.get('/check-auth', (req, res) => {\n  try {\n    const authHeader = req.headers['authorization'];\n    if (!authHeader) {\n      return res.json({ authenticated: false, reason: 'No authorization header' });\n    }\n    \n    const token = authHeader.replace('Bearer ', '');\n    if (!token) {\n      return res.json({ authenticated: false, reason: 'No token provided' });\n    }\n    \n    const jwt = require('jsonwebtoken');\n    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key-change-in-production');\n    \n    if (!decoded || !decoded.userId) {\n      return res.json({ authenticated: false, reason: 'Invalid token' });\n    }\n    \n    res.json({ \n      authenticated: true, \n      userId: decoded.userId,\n      email: decoded.email \n    });\n  } catch (error) {\n    console.error('Token verification error:', error);\n    res.json({ \n      authenticated: false, \n      reason: 'Token verification failed' \n    });\n  }\n});","size_bytes":5678},"server/init-database.ts":{"content":"import { pool } from './db';\nimport { hashPassword } from './auth';\n\nexport async function initializeDatabase() {\n  try {\n    console.log('📊 Initializing database with all tables and admin user...');\n\n    // Create users table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS users (\n        id SERIAL PRIMARY KEY,\n        email VARCHAR(255) UNIQUE NOT NULL,\n        name VARCHAR(255) NOT NULL,\n        password VARCHAR(255) NOT NULL,\n        department VARCHAR(100),\n        position VARCHAR(100),\n        level INTEGER DEFAULT 1,\n        can_assign_letters BOOLEAN DEFAULT FALSE,\n        email_verified BOOLEAN DEFAULT FALSE,\n        email_verification_token TEXT,\n        email_verification_expires TIMESTAMP,\n        reset_password_token TEXT,\n        reset_password_expires TIMESTAMP,\n        is_active BOOLEAN DEFAULT TRUE,\n        last_login_at TIMESTAMP,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        created_by INTEGER REFERENCES users(id)\n      );\n    `);\n\n    // Create roles table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS roles (\n        id SERIAL PRIMARY KEY,\n        name VARCHAR(100) UNIQUE NOT NULL,\n        description TEXT,\n        parent_role_id INTEGER REFERENCES roles(id),\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      );\n    `);\n\n    // Create user_roles table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS user_roles (\n        id SERIAL PRIMARY KEY,\n        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,\n        role_id INTEGER REFERENCES roles(id) ON DELETE CASCADE,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        UNIQUE(user_id, role_id)\n      );\n    `);\n\n    // Create folders table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS folders (\n        id SERIAL PRIMARY KEY,\n        name TEXT NOT NULL,\n        description TEXT,\n        department TEXT NOT NULL,\n        created_by INTEGER REFERENCES users(id),\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        is_active BOOLEAN DEFAULT TRUE\n      );\n    `);\n\n    // Create files table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS files (\n        id SERIAL PRIMARY KEY,\n        filename TEXT NOT NULL,\n        original_name TEXT NOT NULL,\n        mime_type TEXT NOT NULL,\n        size INTEGER NOT NULL,\n        path TEXT NOT NULL,\n        uploaded_by INTEGER REFERENCES users(id),\n        uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        is_active BOOLEAN DEFAULT TRUE,\n        metadata JSONB,\n        folder_id INTEGER REFERENCES folders(id)\n      );\n    `);\n\n    // Create letters table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS letters (\n        id SERIAL PRIMARY KEY,\n        title TEXT NOT NULL,\n        reference TEXT NOT NULL UNIQUE,\n        folder_id INTEGER REFERENCES folders(id),\n        file_id INTEGER REFERENCES files(id),\n        content TEXT,\n        status TEXT NOT NULL DEFAULT 'pending',\n        letter_type TEXT NOT NULL DEFAULT 'formal',\n        requires_passcode BOOLEAN DEFAULT FALSE,\n        passcode TEXT,\n        verification_code TEXT UNIQUE,\n        uploaded_by INTEGER REFERENCES users(id) NOT NULL,\n        assigned_to INTEGER REFERENCES users(id),\n        assigned_by INTEGER REFERENCES users(id),\n        verified_by INTEGER REFERENCES users(id),\n        uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        opened_at TIMESTAMP,\n        assigned_at TIMESTAMP,\n        verified_at TIMESTAMP,\n        completed_at TIMESTAMP,\n        color_code TEXT DEFAULT 'gray',\n        metadata JSONB\n      );\n    `);\n\n    // Create audit_logs table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS audit_logs (\n        id SERIAL PRIMARY KEY,\n        action TEXT NOT NULL,\n        entity_type TEXT NOT NULL,\n        entity_id TEXT NOT NULL,\n        user_id TEXT NOT NULL,\n        details JSONB,\n        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      );\n    `);\n\n    // Create routing_rules table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS routing_rules (\n        id SERIAL PRIMARY KEY,\n        name TEXT NOT NULL,\n        department TEXT NOT NULL,\n        conditions JSONB NOT NULL,\n        target_department TEXT NOT NULL,\n        priority INTEGER DEFAULT 0,\n        is_active BOOLEAN DEFAULT TRUE,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        created_by TEXT NOT NULL,\n        description TEXT\n      );\n    `);\n\n    // Create document_routing table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS document_routing (\n        id SERIAL PRIMARY KEY,\n        letter_id INTEGER REFERENCES letters(id),\n        from_department TEXT NOT NULL,\n        to_department TEXT NOT NULL,\n        routing_rule_id INTEGER REFERENCES routing_rules(id),\n        status TEXT NOT NULL DEFAULT 'pending',\n        routed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        delivered_at TIMESTAMP,\n        notes TEXT,\n        routed_by TEXT NOT NULL\n      );\n    `);\n\n    // Create letter_archives table\n    await pool.query(`\n      CREATE TABLE IF NOT EXISTS letter_archives (\n        id SERIAL PRIMARY KEY,\n        letter_id INTEGER REFERENCES letters(id) NOT NULL,\n        user_id TEXT NOT NULL,\n        user_role TEXT NOT NULL,\n        user_department TEXT NOT NULL,\n        action_taken TEXT,\n        notes TEXT,\n        archived_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        original_status TEXT,\n        final_status TEXT\n      );\n    `);\n\n    console.log('✅ All database tables created successfully');\n\n    // Insert default roles\n    const defaultRoles = [\n      'admin', 'ict_admin', 'registry_admin', 'principal_secretary', 'secretary',\n      'department_head', 'registry', 'fin', 'acc', 'hrm', 'ict', 'comm',\n      'legal', 'intern_audit', 'procurement', 'planning', 'ad', 'dfs',\n      'chem_min', 'mip', 'eng', 'kin', 'letter_recipient'\n    ];\n\n    for (const roleName of defaultRoles) {\n      await pool.query(`\n        INSERT INTO roles (name, description) \n        VALUES ($1, $2) \n        ON CONFLICT (name) DO NOTHING\n      `, [roleName, `${roleName} role`]);\n    }\n\n    console.log('✅ Default roles created successfully');\n\n    // Check if admin user exists\n    const existingAdmin = await pool.query(\n      'SELECT id FROM users WHERE email = $1',\n      ['admin@rmu.gov.ke']\n    );\n\n    if (existingAdmin.rows.length === 0) {\n      const hashedPassword = await hashPassword('admin123');\n      \n      // Create admin user\n      const adminResult = await pool.query(`\n        INSERT INTO users (email, name, password, department, position, level, can_assign_letters, email_verified)\n        VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n        RETURNING id\n      `, [\n        'admin@rmu.gov.ke',\n        'System Administrator',\n        hashedPassword,\n        'ICT',\n        'Administrator',\n        3,\n        true,\n        true\n      ]);\n\n      const adminUserId = adminResult.rows[0].id;\n\n      // Get admin role\n      const adminRoleResult = await pool.query('SELECT id FROM roles WHERE name = $1', ['admin']);\n      const adminRoleId = adminRoleResult.rows[0].id;\n\n      // Assign admin role\n      await pool.query(`\n        INSERT INTO user_roles (user_id, role_id)\n        VALUES ($1, $2)\n      `, [adminUserId, adminRoleId]);\n\n      console.log('✅ Default admin user created: admin@rmu.gov.ke / admin123');\n    } else {\n      console.log('✅ Admin user already exists');\n    }\n\n    // Create some sample data if tables are empty\n    const folderCount = await pool.query('SELECT COUNT(*) FROM folders');\n    if (parseInt(folderCount.rows[0].count) === 0) {\n      // Create default folders\n      await pool.query(`\n        INSERT INTO folders (name, description, department, created_by)\n        VALUES \n        ('General Correspondence', 'General letters and correspondence', 'General', 1),\n        ('HR Documents', 'Human Resources related documents', 'HRM', 1),\n        ('Finance Documents', 'Financial documents and reports', 'Finance', 1),\n        ('Legal Documents', 'Legal correspondence and contracts', 'Legal', 1),\n        ('ICT Documentation', 'ICT related documents and reports', 'ICT', 1)\n      `);\n      console.log('✅ Sample folders created');\n    }\n\n    console.log('✅ Database initialization complete');\n  } catch (error) {\n    console.error('❌ Database initialization failed:', error);\n    throw error;\n  }\n}","size_bytes":8330},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { authenticateToken, requireAdmin, AuthenticatedRequest } from \"./auth\";\nimport { insertUserSchema, insertFolderSchema, insertLetterSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport { files } from \"@shared/schema\";\nimport fs from \"fs\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\n\n// Enhanced error handling helper\nconst handleAsyncError = (fn: Function) => {\n  return (req: Request | AuthenticatedRequest, res: Response, next: any) => {\n    Promise.resolve(fn(req, res, next)).catch(next);\n  };\n};\n\n// Enhanced error response helper\nconst sendErrorResponse = (res: Response, error: any, defaultMessage = \"Internal server error\") => {\n  console.error('Route error:', error);\n  \n  // Handle Zod validation errors\n  if (error instanceof z.ZodError) {\n    const formattedErrors = error.errors.map(err => ({\n      field: err.path.join('.'),\n      message: err.message,\n    }));\n    return res.status(400).json({ \n      message: \"Validation failed\", \n      errors: formattedErrors \n    });\n  }\n  \n  // Handle specific database errors\n  if (error.message?.includes('duplicate key')) {\n    return res.status(409).json({ message: \"Resource already exists\" });\n  }\n  \n  if (error.message?.includes('not found')) {\n    return res.status(404).json({ message: \"Resource not found\" });\n  }\n  \n  // Default error response\n  const statusCode = error.statusCode || error.status || 500;\n  const message = process.env.NODE_ENV === 'production' ? defaultMessage : error.message;\n  res.status(statusCode).json({ message });\n};\n\n// Configure multer for file uploads\nconst upload = multer({\n  storage: multer.diskStorage({\n    destination: function (req, file, cb) {\n      cb(null, \"uploads/\");\n    },\n    filename: function (req, file, cb) {\n      const uniqueSuffix = Date.now() + \"_\" + Math.round(Math.random() * 1e9);\n      cb(null, uniqueSuffix + path.extname(file.originalname));\n    },\n  }),\n  limits: {\n    fileSize: 50 * 1024 * 1024, // 50MB limit for documents\n  },\n  fileFilter: (req, file, cb) => {\n    // Accept PDF and Word documents\n    const allowedTypes = /pdf|doc|docx/;\n    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());\n    const allowedMimeTypes = [\n      \"application/pdf\",\n      \"application/msword\",\n      \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n    ];\n    const mimetype = allowedMimeTypes.includes(file.mimetype);\n    if (mimetype && extname) {\n      return cb(null, true);\n    } else {\n      cb(new Error(\"Only PDF and Word documents are allowed\"));\n    }\n  },\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Add performance headers\n  app.use((req, res, next) => {\n    res.set({\n      'Cache-Control': 'no-cache',\n      'Pragma': 'no-cache',\n      'Expires': '0'\n    });\n    next();\n  });\n\n  // Auth routes\n  app.post(\"/api/auth/register\", handleAsyncError(async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      // Debug: log headers and req.user\n      console.log('REGISTER HEADERS:', req.headers);\n      console.log('REGISTER REQ.USER:', req.user);\n      const userData = insertUserSchema.parse(req.body);\n\n      // Store user in our database\n      // Allow unauthenticated creation: createdBy and userId are optional\n      const createdBy = req.user?.id || null;\n      const user = await storage.createUser({\n        ...userData,\n        createdBy,\n      });\n\n      // Log the action if possible\n      if (createdBy) {\n        await storage.createAuditLog({\n          action: \"create_user\",\n          entityType: \"user\",\n          entityId: user.id.toString(),\n          userId: createdBy.toString(),\n          details: { userEmail: user.email, userDepartment: user.department },\n        });\n      }\n\n      res.json({ success: true, user: { ...user, password: undefined } });\n    } catch (error) {\n      sendErrorResponse(res, error, \"Failed to create user\");\n    }\n  }));\n\n  // Admin-protected user creation endpoint\n  app.post(\"/api/users\", authenticateToken, requireAdmin, handleAsyncError(async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n\n      // Admin creates user with proper tracking\n      const user = await storage.createUser({\n        ...userData,\n        createdBy: req.user!.id,\n      });\n\n      // Log the admin action\n      await storage.createAuditLog({\n        action: \"create_user\",\n        entityType: \"user\",\n        entityId: user.id.toString(),\n        userId: req.user!.id.toString(),\n        details: { \n          userEmail: user.email, \n          userDepartment: user.department,\n          createdByAdmin: req.user!.email \n        },\n      });\n\n      res.json({ success: true, user: { ...user, password: undefined } });\n    } catch (error) {\n      sendErrorResponse(res, error, \"Failed to create user\");\n    }\n  }));\n\n  // User routes\n  app.get(\"/api/users\", authenticateToken, requireAdmin, handleAsyncError(async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users.map(user => ({ ...user, password: undefined })));\n    } catch (error) {\n      sendErrorResponse(res, error, \"Failed to fetch users\");\n    }\n  }));\n\n  // User statistics endpoint\n  app.get(\"/api/users/stats\", authenticateToken, requireAdmin, handleAsyncError(async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const stats = await storage.getUserStats();\n      res.json(stats);\n    } catch (error) {\n      sendErrorResponse(res, error, \"Failed to fetch user statistics\");\n    }\n  }));\n\n  app.get(\"/api/users/:id\", authenticateToken, handleAsyncError(async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid user ID\" });\n      }\n      \n      const user = await storage.getUser(id);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Users can only see their own profile unless they're admin\n      if (!req.user?.roles?.includes('admin') && user.createdBy !== req.user?.id) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      res.json({ ...user, password: undefined });\n    } catch (error) {\n      sendErrorResponse(res, error, \"Failed to fetch user\");\n    }\n  }));\n\n  // Delete user endpoint\n  app.delete(\"/api/users/:id\", authenticateToken, requireAdmin, handleAsyncError(async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid user ID\" });\n      }\n\n      // Check if user is trying to delete themselves\n      if (req.user!.id === id) {\n        return res.status(400).json({ message: \"You cannot delete your own account\" });\n      }\n\n      const user = await storage.deleteUser(id);\n\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      await storage.createAuditLog({\n        action: \"delete_user\",\n        entityType: \"user\",\n        entityId: user.id.toString(),\n        userId: req.user!.id.toString(),\n        details: { \n          userEmail: user.email, \n          userDepartment: user.department,\n          deletedByAdmin: req.user!.email \n        },\n      });\n\n      res.json({ success: true, message: \"User deleted successfully\" });\n    } catch (error) {\n      sendErrorResponse(res, error, \"Failed to delete user\");\n    }\n  }));\n\n  // Folder routes\n  app.get(\"/api/folders\", authenticateToken, handleAsyncError(async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      console.log('📁 FOLDERS API: Starting request...');\n      \n      // Add cache headers for better performance\n      res.set({\n        'Cache-Control': 'public, max-age=300', // Cache for 5 minutes\n        'Pragma': 'cache',\n        'Expires': new Date(Date.now() + 300000).toUTCString()\n      });\n      \n      const folders = await storage.getAllFolders();\n      console.log(`📁 Found ${folders.length} folders`);\n      \n      // Add letter count for each folder\n      const foldersWithCounts = await Promise.all(\n        folders.map(async (folder) => {\n          try {\n            const letters = await storage.getLettersByFolder(folder.id);\n            const letterCount = Array.isArray(letters) ? letters.length : 0;\n            return { ...folder, letterCount };\n          } catch (letterError) {\n            console.warn(`Error getting letters for folder ${folder.id}:`, letterError);\n            return { ...folder, letterCount: 0 };\n          }\n        })\n      );\n      \n      // Debug: Get all letters to see what folder IDs they reference\n      const allLetters = await storage.getAllLetters();\n      console.log(`📧 Found ${allLetters ? allLetters.length : 0} total letters`);\n      \n      if (allLetters && allLetters.length > 0) {\n        const folderIds = [...new Set(allLetters.map(l => l.folderId).filter(Boolean))];\n        console.log(`📁 Unique folder IDs referenced:`, folderIds);\n      }\n\n      res.json(foldersWithCounts);\n    } catch (error) {\n      sendErrorResponse(res, error, \"Failed to fetch folders\");\n    }\n  }));\n\n  app.post(\"/api/folders\", authenticateToken, handleAsyncError(async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const folderData = insertFolderSchema.parse(req.body);\n\n      const folder = await storage.createFolder({\n        ...folderData,\n        createdBy: req.user!.id,\n      });\n\n      await storage.createAuditLog({\n        action: \"create_folder\",\n        entityType: \"folder\",\n        entityId: folder.id.toString(),\n        userId: req.user!.id.toString(),\n        details: { folderName: folder.name },\n      });\n\n      res.json({ success: true, folder });\n    } catch (error) {\n      sendErrorResponse(res, error, \"Failed to create folder\");\n    }\n  }));\n\n  app.get(\"/api/folders/:id\", authenticateToken, handleAsyncError(async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid folder ID\" });\n      }\n\n      const folder = await storage.getFolder(id);\n\n      if (!folder) {\n        return res.status(404).json({ message: \"Folder not found\" });\n      }\n\n      res.json(folder);\n    } catch (error) {\n      sendErrorResponse(res, error, \"Failed to fetch folder\");\n    }\n  }));\n\n  app.put(\"/api/folders/:id\", authenticateToken, handleAsyncError(async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid folder ID\" });\n      }\n\n      const folderData = insertFolderSchema.parse(req.body);\n\n      const folder = await storage.updateFolder(id, folderData);\n\n      if (!folder) {\n        return res.status(404).json({ message: \"Folder not found\" });\n      }\n\n      await storage.createAuditLog({\n        action: \"update_folder\",\n        entityType: \"folder\",\n        entityId: folder.id.toString(),\n        userId: req.user!.id.toString(),\n        details: { folderName: folder.name },\n      });\n\n      res.json({ success: true, folder });\n    } catch (error) {\n      sendErrorResponse(res, error, \"Failed to update folder\");\n    }\n  }));\n\n  app.delete(\"/api/folders/:id\", authenticateToken, handleAsyncError(async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid folder ID\" });\n      }\n\n      const folder = await storage.deleteFolder(id);\n\n      if (!folder) {\n        return res.status(404).json({ message: \"Folder not found\" });\n      }\n\n      await storage.createAuditLog({\n        action: \"delete_folder\",\n        entityType: \"folder\",\n        entityId: folder.id.toString(),\n        userId: req.user!.id.toString(),\n        details: { folderName: folder.name },\n      });\n\n      res.json({ success: true });\n    } catch (error) {\n      sendErrorResponse(res, error, \"Failed to delete folder\");\n    }\n  }));\n\n  // Letter routes\n  app.get(\"/api/letters\", authenticateToken, handleAsyncError(async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      // Remove cache headers to ensure fresh data\n      res.set({\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n      \n      // Get query parameters\n      const { folderId, date } = req.query;\n      \n      console.log('API /api/letters called with params:', { folderId, date });\n      console.log('Type of folderId:', typeof folderId);\n      console.log('Value of folderId:', folderId);\n      \n      // Fetch letters based on filters\n      let letters: any[] = [];\n      if (folderId) {\n        // If folderId is provided, fetch only letters in that folder\n        const folderIdNum = parseInt(folderId as string);\n        console.log('Parsed folderIdNum:', folderIdNum);\n        console.log('IsNaN check:', isNaN(folderIdNum));\n        if (!isNaN(folderIdNum)) {\n          letters = await storage.getLettersByFolder(folderIdNum);\n          console.log(`Found ${letters.length} letters for folder ${folderIdNum}`);\n        } else {\n          console.log('Invalid folderId, returning empty array');\n          letters = []; // Invalid folderId, return empty array\n        }\n      } else {\n        console.log('No folderId provided, fetching all letters');\n        // If no folderId provided, fetch all letters\n        letters = await storage.getAllLetters();\n        console.log(`Found ${letters.length} total letters`);\n      }\n      \n      // Apply date filter if provided\n      if (date && Array.isArray(letters)) {\n        const targetDate = new Date(date as string);\n        targetDate.setHours(0, 0, 0, 0); // Set to start of day\n        \n        letters = letters.filter(letter => {\n          const letterDate = new Date(letter.uploadedAt);\n          letterDate.setHours(0, 0, 0, 0); // Set to start of day\n          return letterDate.getTime() === targetDate.getTime();\n        });\n      }\n\n      // Add folder and file info to each letter\n      const lettersWithFoldersAndFiles = await Promise.all(\n        letters.map(async (letter) => {\n          try {\n            const folder = letter.folderId ? await storage.getFolder(letter.folderId) : null;\n            let file = null;\n            if (letter.fileId) {\n              file = await db.query.files.findFirst({ where: eq(files.id, letter.fileId) });\n            }\n            return {\n              ...letter,\n              folder,\n              fileName: file?.filename || null,\n              originalFileName: file?.originalName || null,\n              fileUrl: file?.filename ? `/uploads/${file.filename}` : null, // Revert to simple format\n            };\n          } catch (letterError) {\n            console.warn('Error processing letter:', letter.id, letterError);\n            return {\n              ...letter,\n              folder: null,\n              fileName: null,\n              originalFileName: null,\n              fileUrl: null,\n            };\n          }\n        })\n      );\n\n      res.json(lettersWithFoldersAndFiles);\n    } catch (error) {\n      sendErrorResponse(res, error, \"Failed to fetch letters\");\n    }\n  }));\n\n  app.post(\"/api/letters\", authenticateToken, upload.single(\"file\"), handleAsyncError(async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const letterData = insertLetterSchema.parse(req.body);\n\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      // Create file entry in the files table\n      const [fileRecord] = await db.insert(files).values({\n        filename: req.file.filename,\n        originalName: req.file.originalname,\n        mimeType: req.file.mimetype,\n        size: req.file.size,\n        path: req.file.path,\n        uploadedBy: req.user!.id,\n      }).returning();\n\n      const letter = await storage.createLetter({\n        ...letterData,\n        createdBy: req.user!.id,\n        fileId: fileRecord.id, // Link the letter to the file\n      });\n\n      await storage.createAuditLog({\n        action: \"create_letter\",\n        entityType: \"letter\",\n        entityId: letter.id.toString(),\n        userId: req.user!.id.toString(),\n        details: { letterTitle: letter.title },\n      });\n\n      res.json({ success: true, letter });\n    } catch (error) {\n      sendErrorResponse(res, error, \"Failed to create letter\");\n    }\n  }));\n\n  app.get(\"/api/letters/:id\", authenticateToken, handleAsyncError(async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid letter ID\" });\n      }\n\n      const letter = await storage.getLetter(id);\n\n      if (!letter) {\n        return res.status(404).json({ message: \"Letter not found\" });\n      }\n\n      res.json(letter);\n    } catch (error) {\n      sendErrorResponse(res, error, \"Failed to fetch letter\");\n    }\n  }));\n\n  app.put(\"/api/letters/:id\", authenticateToken, upload.single(\"file\"), handleAsyncError(async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid letter ID\" });\n      }\n\n      const letterData = insertLetterSchema.parse(req.body);\n\n      // If a new file is uploaded, create a new file entry\n      let fileId = undefined;\n      if (req.file) {\n        const [fileRecord] = await db.insert(files).values({\n          filename: req.file.filename,\n          originalName: req.file.originalname,\n          mimeType: req.file.mimetype,\n          size: req.file.size,\n          path: req.file.path,\n          uploadedBy: req.user!.id,\n        }).returning();\n        fileId = fileRecord.id;\n      }\n\n      const letter = await storage.updateLetter(id, {\n        ...letterData,\n        ...(fileId !== undefined && { fileId }), // Only update fileId if a new file was uploaded\n      });\n\n      if (!letter) {\n        return res.status(404).json({ message: \"Letter not found\" });\n      }\n\n      await storage.createAuditLog({\n        action: \"update_letter\",\n        entityType: \"letter\",\n        entityId: letter.id.toString(),\n        userId: req.user!.id.toString(),\n        details: { letterTitle: letter.title },\n      });\n\n      res.json({ success: true, letter });\n    } catch (error) {\n      sendErrorResponse(res, error, \"Failed to update letter\");\n    }\n  }));\n\n  app.delete(\"/api/letters/:id\", authenticateToken, handleAsyncError(async (req: AuthenticatedRequest, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      if (isNaN(id)) {\n        return res.status(400).json({ message: \"Invalid letter ID\" });\n      }\n\n      const letter = await storage.deleteLetter(id);\n\n      if (!letter) {\n        return res.status(404).json({ message: \"Letter not found\" });\n      }\n\n      await storage.createAuditLog({\n        action: \"delete_letter\",\n        entityType: \"letter\",\n        entityId: letter.id.toString(),\n        userId: req.user!.id.toString(),\n        details: { letterTitle: letter.title },\n      });\n\n      res.json({ success: true });\n    } catch (error) {\n      sendErrorResponse(res, error, \"Failed to delete letter\");\n    }\n  }));\n\n  return createServer(app);\n}","size_bytes":19697},"server/storage.ts":{"content":"import { db } from \"./db\";\nimport { users, folders, letters, auditLogs, roles, userRoles } from \"../shared/schema\";\nimport { eq, desc, count, and } from \"drizzle-orm\";\nimport type { User, InsertUser, Folder, InsertFolder, Letter, InsertLetter, AuditLog, InsertAuditLog, RoutingRule, InsertRoutingRule, DocumentRouting, InsertDocumentRouting } from \"../shared/schema\";\n\n// Extended user type with roles\nexport interface UserWithRoles extends Omit<User, 'password'> {\n  roles: string[];\n}\n\n// Custom error classes for better error handling\nexport class StorageError extends Error {\n  constructor(message: string, public code: string, public originalError?: Error) {\n    super(message);\n    this.name = 'StorageError';\n  }\n}\n\nexport class NotFoundError extends StorageError {\n  constructor(resource: string, id: string | number) {\n    super(`${resource} with ID ${id} not found`, 'NOT_FOUND');\n  }\n}\n\nexport class DuplicateError extends StorageError {\n  constructor(resource: string, field: string, value: string) {\n    super(`${resource} with ${field} '${value}' already exists`, 'DUPLICATE');\n  }\n}\n\n// Helper function to handle database errors\nconst handleDbError = (error: any, operation: string) => {\n  console.error(`Database error in ${operation}:`, error);\n  \n  if (error.code === '23505') { // PostgreSQL unique violation\n    throw new DuplicateError('Resource', 'field', 'value');\n  }\n  \n  if (error.code === '23503') { // PostgreSQL foreign key violation\n    throw new StorageError('Referenced resource not found', 'FOREIGN_KEY_VIOLATION', error);\n  }\n  \n  throw new StorageError(`Database operation failed: ${operation}`, 'DB_ERROR', error);\n};\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByFirebaseUid(firebaseUid: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: number, user: Partial<User>): Promise<User | undefined>;\n  deleteUser(id: number): Promise<User | undefined>;\n  getAllUsers(): Promise<UserWithRoles[]>;\n  getFolder(id: number): Promise<Folder | undefined>;\n  getFoldersByDepartment(department: string): Promise<Folder[]>;\n  getAllFolders(): Promise<Folder[]>;\n  createFolder(folder: InsertFolder): Promise<Folder>;\n  updateFolder(id: number, folder: Partial<Folder>): Promise<Folder | undefined>;\n  deleteFolder(id: number): Promise<Folder | undefined>;\n  getLetter(id: number): Promise<Letter | undefined>;\n  getLetterByReference(reference: string): Promise<Letter | undefined>;\n  getLettersByFolder(folderId: number): Promise<Letter[]>;\n  getLettersByStatus(status: string): Promise<Letter[]>;\n  getAllLetters(): Promise<Letter[]>;\n  getRecentLetters(limit: number): Promise<Letter[]>;\n  createLetter(letter: InsertLetter): Promise<Letter>;\n  updateLetter(id: number, letter: Partial<Letter>): Promise<Letter | undefined>;\n  deleteLetter(id: number): Promise<Letter | undefined>;\n  createAuditLog(log: InsertAuditLog): Promise<AuditLog>;\n  getRecentAuditLogs(limit: number): Promise<AuditLog[]>;\n  getRoutingRule(id: number): Promise<RoutingRule | undefined>;\n  getRoutingRulesByDepartment(department: string): Promise<RoutingRule[]>;\n  getAllRoutingRules(): Promise<RoutingRule[]>;\n  createRoutingRule(rule: InsertRoutingRule): Promise<RoutingRule | undefined>;\n  updateRoutingRule(id: number, rule: Partial<RoutingRule>): Promise<RoutingRule | undefined>;\n  getDocumentRouting(id: number): Promise<DocumentRouting | undefined>;\n  getDocumentRoutingByLetter(letterId: number): Promise<DocumentRouting[]>;\n  getAllDocumentRoutings(): Promise<DocumentRouting[]>;\n  createDocumentRouting(routing: InsertDocumentRouting): Promise<DocumentRouting | undefined>;\n  updateDocumentRouting(id: number, routing: Partial<DocumentRouting>): Promise<DocumentRouting | undefined>;\n  evaluateRoutingRules(letter: Letter, userDepartment: string): Promise<RoutingRule[]>;\n  routeDocument(letterId: number, userId: string): Promise<DocumentRouting[]>;\n  getStats(): Promise<{ totalFolders: number; activeLetters: number; pendingVerification: number; activeUsers: number }>;\n  getUserStats(): Promise<{ totalUsers: number; adminUsers: number; registryUsers: number; officerUsers: number; }>;\n}\n\nexport const storage: IStorage = {\n  // Users\n  async getUser(id: number) {\n    try {\n      if (!id || id <= 0) {\n        throw new StorageError('Invalid user ID provided', 'INVALID_ID');\n      }\n      return await db.query.users.findFirst({ where: eq(users.id, id) });\n    } catch (error) {\n      if (error instanceof StorageError) throw error;\n      handleDbError(error, 'getUser');\n    }\n  },\n  \n  async getUserByFirebaseUid(firebaseUid: string) {\n    try {\n      if (!firebaseUid?.trim()) {\n        throw new StorageError('Invalid Firebase UID provided', 'INVALID_FIREBASE_UID');\n      }\n      return await db.query.users.findFirst({ where: eq(users.createdBy, firebaseUid) });\n    } catch (error) {\n      if (error instanceof StorageError) throw error;\n      handleDbError(error, 'getUserByFirebaseUid');\n    }\n  },\n  \n  async getUserByEmail(email: string) {\n    try {\n      if (!email?.trim() || !email.includes('@')) {\n        throw new StorageError('Invalid email provided', 'INVALID_EMAIL');\n      }\n      return await db.query.users.findFirst({ where: eq(users.email, email.toLowerCase()) });\n    } catch (error) {\n      if (error instanceof StorageError) throw error;\n      handleDbError(error, 'getUserByEmail');\n    }\n  },\n  \n  async createUser(user: InsertUser) {\n    try {\n      if (!user.email || !user.name) {\n        throw new StorageError('Email and name are required', 'MISSING_REQUIRED_FIELDS');\n      }\n      \n      // Check for existing user\n      const existing = await this.getUserByEmail(user.email);\n      if (existing) {\n        throw new DuplicateError('User', 'email', user.email);\n      }\n      \n      const [newUser] = await db.insert(users).values({\n        ...user,\n        email: user.email.toLowerCase(),\n      }).returning();\n      return newUser;\n    } catch (error) {\n      if (error instanceof StorageError) throw error;\n      handleDbError(error, 'createUser');\n      throw error; // This will never be reached due to handleDbError throwing\n    }\n  },\n  \n  async updateUser(id: number, user: Partial<User>) {\n    try {\n      if (!id || id <= 0) {\n        throw new StorageError('Invalid user ID provided', 'INVALID_ID');\n      }\n      \n      const [updated] = await db.update(users)\n        .set({ ...user, updatedAt: new Date() })\n        .where(eq(users.id, id))\n        .returning();\n        \n      if (!updated) {\n        throw new NotFoundError('User', id);\n      }\n      \n      return updated;\n    } catch (error) {\n      if (error instanceof StorageError) throw error;\n      handleDbError(error, 'updateUser');\n    }\n  },\n  \n  async deleteUser(id: number) {\n    try {\n      if (!id || id <= 0) {\n        throw new StorageError('Invalid user ID provided', 'INVALID_ID');\n      }\n\n      // First delete user roles\n      await db.delete(userRoles).where(eq(userRoles.userId, id));\n\n      // Then delete the user itself\n      const [deleted] = await db.update(users)\n        .set({ isActive: false })\n        .where(eq(users.id, id))\n        .returning();\n\n      if (!deleted) {\n        throw new NotFoundError('User', id);\n      }\n\n      return deleted;\n    } catch (error) {\n      if (error instanceof StorageError) throw error;\n      if (error instanceof NotFoundError) throw error;\n      handleDbError(error, 'deleteUser');\n    }\n  },\n\n  async getAllUsers() {\n    try {\n      // Get all active users with their roles\n      const usersWithRoles = await db\n        .select({\n          id: users.id,\n          email: users.email,\n          name: users.name,\n          department: users.department,\n          position: users.position,\n          level: users.level,\n          canAssignLetters: users.canAssignLetters,\n          isActive: users.isActive,\n          emailVerified: users.emailVerified,\n          emailVerificationToken: users.emailVerificationToken,\n          emailVerificationExpires: users.emailVerificationExpires,\n          resetPasswordToken: users.resetPasswordToken,\n          resetPasswordExpires: users.resetPasswordExpires,\n          lastLoginAt: users.lastLoginAt,\n          createdAt: users.createdAt,\n          createdBy: users.createdBy,\n          roleName: roles.name,\n        })\n        .from(users)\n        .leftJoin(userRoles, eq(users.id, userRoles.userId))\n        .leftJoin(roles, eq(userRoles.roleId, roles.id))\n        .where(eq(users.isActive, true))\n        .orderBy(users.createdAt);\n\n      // Group users by ID and collect their roles\n      const userMap = new Map();\n      \n      usersWithRoles.forEach(row => {\n        const userId = row.id;\n        if (!userMap.has(userId)) {\n          userMap.set(userId, {\n            id: row.id,\n            email: row.email,\n            name: row.name,\n            department: row.department,\n            position: row.position,\n            level: row.level,\n            canAssignLetters: row.canAssignLetters,\n            isActive: row.isActive,\n            emailVerified: row.emailVerified,\n            emailVerificationToken: row.emailVerificationToken,\n            emailVerificationExpires: row.emailVerificationExpires,\n            resetPasswordToken: row.resetPasswordToken,\n            resetPasswordExpires: row.resetPasswordExpires,\n            lastLoginAt: row.lastLoginAt,\n            createdAt: row.createdAt,\n            createdBy: row.createdBy,\n            roles: [],\n          });\n        }\n        \n        if (row.roleName) {\n          userMap.get(userId).roles.push(row.roleName);\n        }\n      });\n\n      return Array.from(userMap.values());\n    } catch (error) {\n      console.error('Error in getAllUsers:', error);\n      handleDbError(error, 'getAllUsers');\n      return [];\n    }\n  },\n\n  // Folders\n  async getFolder(id: number) {\n    try {\n      if (!id || id <= 0) {\n        throw new StorageError('Invalid folder ID provided', 'INVALID_ID');\n      }\n      return await db.query.folders.findFirst({ where: eq(folders.id, id) });\n    } catch (error) {\n      if (error instanceof StorageError) throw error;\n      handleDbError(error, 'getFolder');\n    }\n  },\n  \n  async getFoldersByDepartment(department: string) {\n    try {\n      if (!department?.trim()) {\n        throw new StorageError('Department is required', 'MISSING_DEPARTMENT');\n      }\n      return await db.query.folders.findMany({ \n        where: and(eq(folders.department, department), eq(folders.isActive, true)) \n      }) || [];\n    } catch (error) {\n      if (error instanceof StorageError) throw error;\n      handleDbError(error, 'getFoldersByDepartment');\n      return [];\n    }\n  },\n  \n  async getAllFolders() {\n    try {\n      return await db.select().from(folders).where(eq(folders.isActive, true)) || [];\n    } catch (error) {\n      handleDbError(error, 'getAllFolders');\n      return [];\n    }\n  },\n  \n  async createFolder(folder: InsertFolder) {\n    try {\n      if (!folder.name?.trim() || !folder.department?.trim()) {\n        throw new StorageError('Name and department are required', 'MISSING_REQUIRED_FIELDS');\n      }\n      \n      const [newFolder] = await db.insert(folders).values(folder).returning();\n      return newFolder;\n    } catch (error) {\n      if (error instanceof StorageError) throw error;\n      handleDbError(error, 'createFolder');\n      throw error;\n    }\n  },\n  \n  async updateFolder(id: number, folder: Partial<Folder>) {\n    try {\n      if (!id || id <= 0) {\n        throw new StorageError('Invalid folder ID provided', 'INVALID_ID');\n      }\n      \n      const [updated] = await db.update(folders)\n        .set(folder)\n        .where(eq(folders.id, id))\n        .returning();\n        \n      if (!updated) {\n        throw new NotFoundError('Folder', id);\n      }\n      \n      return updated;\n    } catch (error) {\n      if (error instanceof StorageError) throw error;\n      handleDbError(error, 'updateFolder');\n    }\n  },\n\n  async deleteFolder(id: number) {\n    try {\n      if (!id || id <= 0) {\n        throw new StorageError('Invalid folder ID provided', 'INVALID_ID');\n      }\n      \n      // First, we need to handle letters in this folder\n      // We'll set their folderId to null rather than deleting them\n      await db.update(letters)\n        .set({ folderId: null })\n        .where(eq(letters.folderId, id));\n      \n      // Then delete the folder itself\n      const [deleted] = await db.update(folders)\n        .set({ isActive: false })\n        .where(eq(folders.id, id))\n        .returning();\n        \n      if (!deleted) {\n        throw new NotFoundError('Folder', id);\n      }\n      \n      return deleted;\n    } catch (error) {\n      if (error instanceof StorageError) throw error;\n      handleDbError(error, 'deleteFolder');\n    }\n  },\n\n  // Letters\n  async getLetter(id: number) {\n    try {\n      if (!id || id <= 0) {\n        throw new StorageError('Invalid letter ID provided', 'INVALID_ID');\n      }\n      return await db.query.letters.findFirst({ where: eq(letters.id, id) });\n    } catch (error) {\n      if (error instanceof StorageError) throw error;\n      handleDbError(error, 'getLetter');\n    }\n  },\n  \n  async getLetterByReference(reference: string) {\n    try {\n      if (!reference?.trim()) {\n        throw new StorageError('Reference is required', 'MISSING_REFERENCE');\n      }\n      return await db.query.letters.findFirst({ where: eq(letters.reference, reference) });\n    } catch (error) {\n      if (error instanceof StorageError) throw error;\n      handleDbError(error, 'getLetterByReference');\n    }\n  },\n  \n  async getLettersByFolder(folderId: number) {\n    try {\n      if (!folderId || folderId <= 0) {\n        throw new StorageError('Invalid folder ID provided', 'INVALID_ID');\n      }\n      \n      console.log(`Getting letters for folder ID: ${folderId}`);\n      const result = await db.query.letters.findMany({ \n        where: eq(letters.folderId, folderId),\n        orderBy: [desc(letters.uploadedAt)]\n      });\n      \n      const letterArray = result || [];\n      console.log(`Found ${letterArray.length} letters for folder ${folderId}`);\n      return letterArray;\n    } catch (error) {\n      if (error instanceof StorageError) {\n        console.error('Storage error in getLettersByFolder:', error.message);\n        throw error;\n      }\n      console.error('Database error in getLettersByFolder:', error);\n      handleDbError(error, 'getLettersByFolder');\n      return [];\n    }\n  },\n  \n  async getLettersByStatus(status: string) {\n    try {\n      if (!status?.trim()) {\n        throw new StorageError('Status is required', 'MISSING_STATUS');\n      }\n      return await db.query.letters.findMany({ \n        where: eq(letters.status, status),\n        orderBy: [desc(letters.uploadedAt)]\n      });\n    } catch (error) {\n      if (error instanceof StorageError) throw error;\n      handleDbError(error, 'getLettersByStatus');\n    }\n  },\n  \n  async getAllLetters() {\n    try {\n      // Add limit to prevent performance issues with large datasets\n      return await db.select().from(letters).orderBy(desc(letters.uploadedAt)).limit(1000);\n    } catch (error) {\n      handleDbError(error, 'getAllLetters');\n    }\n  },\n  \n  async getRecentLetters(limit: number) {\n    try {\n      const validLimit = Math.min(Math.max(limit || 10, 1), 100); // Between 1 and 100\n      return await db.select().from(letters)\n        .orderBy(desc(letters.uploadedAt))\n        .limit(validLimit);\n    } catch (error) {\n      handleDbError(error, 'getRecentLetters');\n    }\n  },\n  \n  async createLetter(letter: InsertLetter) {\n    try {\n      if (!letter.title?.trim() || !letter.reference?.trim()) {\n        throw new StorageError('Title and reference are required', 'MISSING_REQUIRED_FIELDS');\n      }\n      \n      // Check for duplicate reference\n      const existing = await this.getLetterByReference(letter.reference);\n      if (existing) {\n        throw new DuplicateError('Letter', 'reference', letter.reference);\n      }\n      \n      const [newLetter] = await db.insert(letters).values(letter).returning();\n      return newLetter;\n    } catch (error) {\n      if (error instanceof StorageError) throw error;\n      handleDbError(error, 'createLetter');\n    }\n  },\n  \n  async updateLetter(id: number, letter: Partial<Letter>) {\n    try {\n      if (!id || id <= 0) {\n        throw new StorageError('Invalid letter ID provided', 'INVALID_ID');\n      }\n      \n      const [updated] = await db.update(letters)\n        .set(letter)\n        .where(eq(letters.id, id))\n        .returning();\n        \n      if (!updated) {\n        throw new NotFoundError('Letter', id);\n      }\n      \n      return updated;\n    } catch (error) {\n      if (error instanceof StorageError) throw error;\n      handleDbError(error, 'updateLetter');\n    }\n  },\n\n  async deleteLetter(id: number) {\n    try {\n      if (!id || id <= 0) {\n        throw new StorageError('Invalid letter ID provided', 'INVALID_ID');\n      }\n      \n      // First, we need to handle files associated with this letter\n      // We'll set their isActive to false rather than deleting them\n      const letter = await db.query.letters.findFirst({ where: eq(letters.id, id) });\n      if (letter && letter.fileId) {\n        try {\n          await db.update(files)\n            .set({ isActive: false })\n            .where(eq(files.id, letter.fileId));\n        } catch (fileError) {\n          console.warn('Warning: Failed to deactivate file associated with letter', fileError);\n          // Continue with letter deletion even if file deactivation fails\n        }\n      }\n      \n      // Then delete the letter itself (hard delete since there's no isActive column)\n      const [deleted] = await db.delete(letters)\n        .where(eq(letters.id, id))\n        .returning();\n        \n      if (!deleted) {\n        throw new NotFoundError('Letter', id);\n      }\n      \n      return deleted;\n    } catch (error) {\n      if (error instanceof StorageError) throw error;\n      if (error instanceof NotFoundError) throw error;\n      handleDbError(error, 'deleteLetter');\n    }\n  },\n\n  // Audit Logs\n  async createAuditLog(log: InsertAuditLog) {\n    try {\n      if (!log.action?.trim() || !log.entityType?.trim() || !log.entityId?.trim()) {\n        throw new StorageError('Action, entityType, and entityId are required', 'MISSING_REQUIRED_FIELDS');\n      }\n      \n      const [newLog] = await db.insert(auditLogs).values(log).returning();\n      return newLog;\n    } catch (error) {\n      if (error instanceof StorageError) throw error;\n      handleDbError(error, 'createAuditLog');\n    }\n  },\n  \n  async getRecentAuditLogs(limit: number) {\n    try {\n      const validLimit = Math.min(Math.max(limit || 10, 1), 100); // Between 1 and 100\n      return await db.select().from(auditLogs)\n        .orderBy(desc(auditLogs.timestamp))\n        .limit(validLimit);\n    } catch (error) {\n      handleDbError(error, 'getRecentAuditLogs');\n    }\n  },\n\n  // Routing Rules\n  async getRoutingRule(id: number) {\n    try {\n      if (!id || id <= 0) {\n        throw new StorageError('Invalid routing rule ID provided', 'INVALID_ID');\n      }\n      return await db.query.routingRules.findFirst({ where: eq(routingRules.id, id) });\n    } catch (error) {\n      if (error instanceof StorageError) throw error;\n      handleDbError(error, 'getRoutingRule');\n    }\n  },\n  \n  async getRoutingRulesByDepartment(department: string) {\n    try {\n      if (!department?.trim()) {\n        throw new StorageError('Department is required', 'MISSING_DEPARTMENT');\n      }\n      return await db.query.routingRules.findMany({ \n        where: and(eq(routingRules.department, department), eq(routingRules.isActive, true)) \n      }) || [];\n    } catch (error) {\n      if (error instanceof StorageError) throw error;\n      handleDbError(error, 'getRoutingRulesByDepartment');\n      return [];\n    }\n  },\n  \n  async getAllRoutingRules() {\n    try {\n      return await db.select().from(routingRules).where(eq(routingRules.isActive, true)) || [];\n    } catch (error) {\n      handleDbError(error, 'getAllRoutingRules');\n      return [];\n    }\n  },\n  \n  async createRoutingRule(rule: InsertRoutingRule) {\n    try {\n      if (!rule.department?.trim() || !rule.rule?.trim()) {\n        throw new StorageError('Department and rule are required', 'MISSING_REQUIRED_FIELDS');\n      }\n      \n      const [newRule] = await db.insert(routingRules).values(rule).returning();\n      return newRule;\n    } catch (error) {\n      if (error instanceof StorageError) throw error;\n      handleDbError(error, 'createRoutingRule');\n      throw error;\n    }\n  },\n  \n  async updateRoutingRule(id: number, rule: Partial<RoutingRule>) {\n    try {\n      if (!id || id <= 0) {\n        throw new StorageError('Invalid routing rule ID provided', 'INVALID_ID');\n      }\n      \n      const [updated] = await db.update(routingRules)\n        .set(rule)\n        .where(eq(routingRules.id, id))\n        .returning();\n        \n      if (!updated) {\n        throw new NotFoundError('RoutingRule', id);\n      }\n      \n      return updated;\n    } catch (error) {\n      if (error instanceof StorageError) throw error;\n      handleDbError(error, 'updateRoutingRule');\n    }\n  },\n\n  // Document Routing\n  async getDocumentRouting(id: number) {\n    try {\n      if (!id || id <= 0) {\n        throw new StorageError('Invalid document routing ID provided', 'INVALID_ID');\n      }\n      return await db.query.documentRoutings.findFirst({ where: eq(documentRoutings.id, id) });\n    } catch (error) {\n      if (error instanceof StorageError) throw error;\n      handleDbError(error, 'getDocumentRouting');\n    }\n  },\n  \n  async getDocumentRoutingByLetter(letterId: number) {\n    try {\n      if (!letterId || letterId <= 0) {\n        throw new StorageError('Invalid letter ID provided', 'INVALID_ID');\n      }\n      return await db.query.documentRoutings.findMany({ where: eq(documentRoutings.letterId, letterId) });\n    } catch (error) {\n      if (error instanceof StorageError) throw error;\n      handleDbError(error, 'getDocumentRoutingByLetter');\n    }\n  },\n  \n  async getAllDocumentRoutings() {\n    try {\n      return await db.select().from(documentRoutings) || [];\n    } catch (error) {\n      handleDbError(error, 'getAllDocumentRoutings');\n      return [];\n    }\n  },\n  \n  async createDocumentRouting(routing: InsertDocumentRouting) {\n    try {\n      if (!routing.letterId || !routing.userId) {\n        throw new StorageError('Letter ID and user ID are required', 'MISSING_REQUIRED_FIELDS');\n      }\n      \n      const [newRouting] = await db.insert(documentRoutings).values(routing).returning();\n      return newRouting;\n    } catch (error) {\n      if (error instanceof StorageError) throw error;\n      handleDbError(error, 'createDocumentRouting');\n      throw error;\n    }\n  },\n  \n  async updateDocumentRouting(id: number, routing: Partial<DocumentRouting>) {\n    try {\n      if (!id || id <= 0) {\n        throw new StorageError('Invalid document routing ID provided', 'INVALID_ID');\n      }\n      \n      const [updated] = await db.update(documentRoutings)\n        .set(routing)\n        .where(eq(documentRoutings.id, id))\n        .returning();\n        \n      if (!updated) {\n        throw new NotFoundError('DocumentRouting', id);\n      }\n      \n      return updated;\n    } catch (error) {\n      if (error instanceof StorageError) throw error;\n      handleDbError(error, 'updateDocumentRouting');\n    }\n  },\n\n  // Routing Logic\n  async evaluateRoutingRules(letter: Letter, userDepartment: string) {\n    try {\n      if (!letter || !userDepartment?.trim()) {\n        throw new StorageError('Letter and user department are required', 'MISSING_REQUIRED_FIELDS');\n      }\n      \n      const rules = await this.getAllRoutingRules();\n      const applicableRules = rules.filter(rule => rule.department === userDepartment && rule.isActive);\n      \n      return applicableRules;\n    } catch (error) {\n      if (error instanceof StorageError) throw error;\n      handleDbError(error, 'evaluateRoutingRules');\n    }\n  },\n  \n  async routeDocument(letterId: number, userId: string) {\n    try {\n      if (!letterId || letterId <= 0 || !userId?.trim()) {\n        throw new StorageError('Letter ID and user ID are required', 'MISSING_REQUIRED_FIELDS');\n      }\n      \n      const [newRouting] = await db.insert(documentRoutings).values({ letterId, userId }).returning();\n      return newRouting;\n    } catch (error) {\n      if (error instanceof StorageError) throw error;\n      handleDbError(error, 'routeDocument');\n    }\n  },\n\n  // Stats\n  async getStats() {\n    try {\n      const totalFolders = await db.select({ count: count() }).from(folders).where(eq(folders.isActive, true));\n      const activeLetters = await db.select({ count: count() }).from(letters).where(eq(letters.status, 'active'));\n      const pendingVerification = await db.select({ count: count() }).from(letters).where(eq(letters.status, 'pending_verification'));\n      const activeUsers = await db.select({ count: count() }).from(users).where(eq(users.isActive, true));\n      \n      return {\n        totalFolders: totalFolders[0]?.count || 0,\n        activeLetters: activeLetters[0]?.count || 0,\n        pendingVerification: pendingVerification[0]?.count || 0,\n        activeUsers: activeUsers[0]?.count || 0,\n      };\n    } catch (error) {\n      handleDbError(error, 'getStats');\n    }\n  },\n  \n  async getUserStats() {\n    try {\n      const totalUsers = await db.select({ count: count() }).from(users).where(eq(users.isActive, true));\n      const adminUsers = await db.select({ count: count() }).from(users).where(and(eq(users.isActive, true), eq(users.level, 'admin')));\n      const registryUsers = await db.select({ count: count() }).from(users).where(and(eq(users.isActive, true), eq(users.level, 'registry')));\n      const officerUsers = await db.select({ count: count() }).from(users).where(and(eq(users.isActive, true), eq(users.level, 'officer')));\n      \n      return {\n        totalUsers: totalUsers[0]?.count || 0,\n        adminUsers: adminUsers[0]?.count || 0,\n        registryUsers: registryUsers[0]?.count || 0,\n        officerUsers: officerUsers[0]?.count || 0,\n      };\n    } catch (error) {\n      handleDbError(error, 'getUserStats');\n    }\n  },\n}\n","size_bytes":26277},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  email: text(\"email\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  password: text(\"password\").notNull(),\n  department: text(\"department\"),\n  position: text(\"position\"),\n  level: integer(\"level\").default(0),\n  canAssignLetters: boolean(\"can_assign_letters\").default(false),\n  isActive: boolean(\"is_active\").default(true),\n  emailVerified: boolean(\"email_verified\").default(false),\n  emailVerificationToken: text(\"email_verification_token\"),\n  emailVerificationExpires: timestamp(\"email_verification_expires\"),\n  resetPasswordToken: text(\"reset_password_token\"),\n  resetPasswordExpires: timestamp(\"reset_password_expires\"),\n  lastLoginAt: timestamp(\"last_login_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  createdBy: integer(\"created_by\").references(() => users.id),\n});\n\nexport const roles = pgTable(\"roles\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull().unique(),\n  description: text(\"description\"),\n  parentRoleId: integer(\"parent_role_id\").references(() => roles.id),\n});\n\nexport const userRoles = pgTable(\"user_roles\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  roleId: integer(\"role_id\").references(() => roles.id, { onDelete: 'cascade' }).notNull(),\n});\n\n// Relations\nexport const usersRelations = {\n  userRoles: {\n    relationName: \"userRoles\",\n    referencedTable: userRoles,\n    type: \"many\" as const,\n    config: {\n      fields: [users.id],\n      references: [userRoles.userId],\n    },\n  },\n};\n\nexport const rolesRelations = {\n  userRoles: {\n    relationName: \"userRoles\", \n    referencedTable: userRoles,\n    type: \"many\" as const,\n    config: {\n      fields: [roles.id],\n      references: [userRoles.roleId],\n    },\n  },\n};\n\nexport const userRolesRelations = {\n  user: {\n    relationName: \"user\",\n    referencedTable: users,\n    type: \"one\" as const,\n    config: {\n      fields: [userRoles.userId],\n      references: [users.id],\n    },\n  },\n  role: {\n    relationName: \"role\",\n    referencedTable: roles,\n    type: \"one\" as const,\n    config: {\n      fields: [userRoles.roleId],\n      references: [roles.id],\n    },\n  },\n};\n\nexport const folders = pgTable(\"folders\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  department: text(\"department\").notNull(),\n  createdBy: integer(\"created_by\").references(() => users.id), // integer, not string\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  isActive: boolean(\"is_active\").default(true),\n});\n\nexport const files = pgTable(\"files\", {\n  id: serial(\"id\").primaryKey(),\n  filename: text(\"filename\").notNull(),\n  originalName: text(\"original_name\").notNull(),\n  mimeType: text(\"mime_type\").notNull(),\n  size: integer(\"size\").notNull(),\n  path: text(\"path\").notNull(),\n  uploadedBy: integer(\"uploaded_by\").references(() => users.id),\n  uploadedAt: timestamp(\"uploaded_at\").defaultNow(),\n  isActive: boolean(\"is_active\").default(true),\n  metadata: jsonb(\"metadata\"),\n  folderId: integer(\"folder_id\").references(() => folders.id), // RESTORED: files table has folderId column\n});\n\nexport const letters = pgTable(\"letters\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  reference: text(\"reference\").notNull().unique(),\n  folderId: integer(\"folder_id\").references(() => folders.id),\n  fileId: integer(\"file_id\").references(() => files.id),\n  content: text(\"content\"),\n  status: text(\"status\").notNull().default(\"pending\"),\n  letterType: text(\"letter_type\").notNull().default(\"formal\"),\n  requiresPasscode: boolean(\"requires_passcode\").default(false),\n  passcode: text(\"passcode\"),\n  verificationCode: text(\"verification_code\").unique(),\n  uploadedBy: integer(\"uploaded_by\").references(() => users.id).notNull(),\n  assignedTo: integer(\"assigned_to\").references(() => users.id),\n  assignedBy: integer(\"assigned_by\").references(() => users.id),\n  verifiedBy: integer(\"verified_by\").references(() => users.id),\n  uploadedAt: timestamp(\"uploaded_at\").defaultNow(),\n  openedAt: timestamp(\"opened_at\"),\n  assignedAt: timestamp(\"assigned_at\"),\n  verifiedAt: timestamp(\"verified_at\"),\n  completedAt: timestamp(\"completed_at\"),\n  colorCode: text(\"color_code\").default(\"gray\"),\n  metadata: jsonb(\"metadata\"),\n});\n\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: serial(\"id\").primaryKey(),\n  action: text(\"action\").notNull(),\n  entityType: text(\"entity_type\").notNull(), // 'user', 'folder', 'letter'\n  entityId: text(\"entity_id\").notNull(),\n  userId: text(\"user_id\").notNull(), // Firebase UID\n  details: jsonb(\"details\"),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\nexport const routingRules = pgTable(\"routing_rules\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  department: text(\"department\").notNull(),\n  conditions: jsonb(\"conditions\").notNull(), // JSON object defining routing conditions\n  targetDepartment: text(\"target_department\").notNull(),\n  priority: integer(\"priority\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  createdBy: text(\"created_by\").notNull(),\n  description: text(\"description\"),\n});\n\nexport const documentRouting = pgTable(\"document_routing\", {\n  id: serial(\"id\").primaryKey(),\n  letterId: integer(\"letter_id\").references(() => letters.id),\n  fromDepartment: text(\"from_department\").notNull(),\n  toDepartment: text(\"to_department\").notNull(),\n  routingRuleId: integer(\"routing_rule_id\").references(() => routingRules.id),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, in_transit, delivered, rejected\n  routedAt: timestamp(\"routed_at\").defaultNow(),\n  deliveredAt: timestamp(\"delivered_at\"),\n  notes: text(\"notes\"),\n  routedBy: text(\"routed_by\").notNull(),\n});\n\n// Archive table for completed letter copies\nexport const letterArchives = pgTable(\"letter_archives\", {\n  id: serial(\"id\").primaryKey(),\n  letterId: integer(\"letter_id\").references(() => letters.id).notNull(),\n  userId: text(\"user_id\").notNull(), // Firebase UID of user who completed work\n  userRole: text(\"user_role\").notNull(), // Role at time of archiving\n  userDepartment: text(\"user_department\").notNull(),\n  actionTaken: text(\"action_taken\"), // What action they took\n  notes: text(\"notes\"), // User's final notes\n  archivedAt: timestamp(\"archived_at\").defaultNow(),\n  originalStatus: text(\"original_status\"), // Letter status when archived\n  finalStatus: text(\"final_status\"), // Letter status after completion\n});\n\n// Zod schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertFolderSchema = createInsertSchema(folders).omit({\n  id: true,\n  createdAt: true,\n  createdBy: true, // Omit from frontend, backend will set\n});\n\nexport const insertLetterSchema = createInsertSchema(letters).omit({\n  id: true,\n  uploadedAt: true,\n  verifiedAt: true,\n  verificationCode: true,\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLogs).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertRoutingRuleSchema = createInsertSchema(routingRules).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDocumentRoutingSchema = createInsertSchema(documentRouting).omit({\n  id: true,\n  routedAt: true,\n  deliveredAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Folder = typeof folders.$inferSelect;\nexport type InsertFolder = z.infer<typeof insertFolderSchema>;\nexport type Letter = typeof letters.$inferSelect;\nexport type InsertLetter = z.infer<typeof insertLetterSchema>;\nexport type AuditLog = typeof auditLogs.$inferSelect;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\nexport type RoutingRule = typeof routingRules.$inferSelect;\nexport type InsertRoutingRule = z.infer<typeof insertRoutingRuleSchema>;\nexport type DocumentRouting = typeof documentRouting.$inferSelect;\nexport type InsertDocumentRouting = z.infer<typeof insertDocumentRoutingSchema>;\n\n// Extended schemas for forms\nexport const createUserFormSchema = insertUserSchema.extend({\n  confirmPassword: z.string().min(6),\n}).refine((data) => data.name.length > 0, {\n  message: \"Name is required\",\n  path: [\"name\"],\n});\n\nexport const createFolderFormSchema = insertFolderSchema.extend({\n  name: z.string().min(1, \"Folder name is required\"),\n  department: z.string().min(1, \"Department is required\"),\n});\n\nexport const uploadLetterFormSchema = insertLetterSchema.omit({ uploadedBy: true }).extend({\n  title: z.string().min(1, \"Letter title is required\"),\n  reference: z.string().min(1, \"Reference number is required\"),\n  folderId: z.number().min(1, \"Please select a folder\"),\n});\n","size_bytes":8972},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/contexts/ThemeContext\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport ProtectedRoute from \"@/components/ProtectedRoute\";\nimport Welcome from \"@/pages/Welcome\";\nimport UniversalLogin from \"@/pages/UniversalLogin\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/login\" component={UniversalLogin} />\n      <Route path=\"/dashboard/:rest*\">\n        <ProtectedRoute>\n          <Dashboard />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/dashboard\">\n        <ProtectedRoute>\n          <Dashboard />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/\" component={Welcome} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <ThemeProvider>\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </ThemeProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1390},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: 210 11% 98%; /* #F5F7FA */\n  --foreground: 215 25% 27%; /* #2D3748 */\n  --muted: 210 11% 96%; /* #F1F5F9 */\n  --muted-foreground: 215 16% 47%; /* #64748B */\n  --popover: 0 0% 100%; /* #FFFFFF */\n  --popover-foreground: 215 25% 27%; /* #2D3748 */\n  --card: 0 0% 100%; /* #FFFFFF */\n  --card-foreground: 215 25% 27%; /* #2D3748 */\n  --border: 214 13% 91%; /* #E2E8F0 */\n  --input: 214 13% 91%; /* #E2E8F0 */\n  --primary: 213 94% 68%; /* #3B82F6 - Kenya Blue */\n  --primary-foreground: 210 40% 98%; /* #F8FAFC */\n  --secondary: 210 40% 96%; /* #F1F5F9 */\n  --secondary-foreground: 215 25% 27%; /* #2D3748 */\n  --accent: 213 94% 68%; /* #3B82F6 */\n  --accent-foreground: 210 40% 98%; /* #F8FAFC */\n  --destructive: 0 84% 60%; /* #EF4444 */\n  --destructive-foreground: 210 40% 98%; /* #F8FAFC */\n  --ring: 213 94% 68%; /* #3B82F6 */\n  --radius: 0.75rem;\n  \n  /* Custom government theme colors */\n  --kenya-blue: 213 94% 68%; /* #3B82F6 */\n  --kenya-red: 0 84% 60%; /* #EF4444 */\n  --kenya-green: 142 76% 36%; /* #16A34A */\n  --kenya-black: 215 25% 27%; /* #2D3748 */\n  \n  /* Sidebar specific */\n  --sidebar-background: 0 0% 100%; /* #FFFFFF */\n  --sidebar-foreground: 215 25% 27%; /* #2D3748 */\n  --sidebar-primary: 213 94% 68%; /* #3B82F6 */\n  --sidebar-primary-foreground: 210 40% 98%; /* #F8FAFC */\n  --sidebar-accent: 210 40% 96%; /* #F1F5F9 */\n  --sidebar-accent-foreground: 215 25% 27%; /* #2D3748 */\n  --sidebar-border: 214 13% 91%; /* #E2E8F0 */\n  --sidebar-ring: 213 94% 68%; /* #3B82F6 */\n  \n  /* Chart colors */\n  --chart-1: 213 94% 68%; /* #3B82F6 */\n  --chart-2: 142 76% 36%; /* #16A34A */\n  --chart-3: 38 92% 50%; /* #F59E0B */\n  --chart-4: 280 100% 70%; /* #A855F7 */\n  --chart-5: 0 84% 60%; /* #EF4444 */\n}\n\n.dark {\n  --background: 222 84% 5%; /* #0F172A */\n  --foreground: 210 40% 98%; /* #F8FAFC */\n  --muted: 217 33% 17%; /* #1E293B */\n  --muted-foreground: 215 20% 65%; /* #94A3B8 */\n  --popover: 222 84% 5%; /* #0F172A */\n  --popover-foreground: 210 40% 98%; /* #F8FAFC */\n  --card: 222 84% 5%; /* #0F172A */\n  --card-foreground: 210 40% 98%; /* #F8FAFC */\n  --border: 217 33% 17%; /* #1E293B */\n  --input: 217 33% 17%; /* #1E293B */\n  --primary: 213 94% 68%; /* #3B82F6 */\n  --primary-foreground: 222 84% 5%; /* #0F172A */\n  --secondary: 217 33% 17%; /* #1E293B */\n  --secondary-foreground: 210 40% 98%; /* #F8FAFC */\n  --accent: 213 94% 68%; /* #3B82F6 */\n  --accent-foreground: 222 84% 5%; /* #0F172A */\n  --destructive: 0 84% 60%; /* #EF4444 */\n  --destructive-foreground: 210 40% 98%; /* #F8FAFC */\n  --ring: 213 94% 68%; /* #3B82F6 */\n  \n  /* Dark theme sidebar */\n  --sidebar-background: 222 84% 5%; /* #0F172A */\n  --sidebar-foreground: 210 40% 98%; /* #F8FAFC */\n  --sidebar-primary: 213 94% 68%; /* #3B82F6 */\n  --sidebar-primary-foreground: 222 84% 5%; /* #0F172A */\n  --sidebar-accent: 217 33% 17%; /* #1E293B */\n  --sidebar-accent-foreground: 210 40% 98%; /* #F8FAFC */\n  --sidebar-border: 217 33% 17%; /* #1E293B */\n  --sidebar-ring: 213 94% 68%; /* #3B82F6 */\n  \n  /* Dark theme charts */\n  --chart-1: 213 94% 68%; /* #3B82F6 */\n  --chart-2: 142 76% 36%; /* #16A34A */\n  --chart-3: 38 92% 50%; /* #F59E0B */\n  --chart-4: 280 100% 70%; /* #A855F7 */\n  --chart-5: 0 84% 60%; /* #EF4444 */\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n  }\n\n  /* Government specific colors */\n  .gov-blue {\n    color: hsl(207 90% 54%);\n  }\n\n  .bg-gov-blue {\n    background-color: hsl(207 90% 54%);\n  }\n\n  .border-gov-blue {\n    border-color: hsl(207 90% 54%);\n  }\n\n  .text-gov-success {\n    color: hsl(142 76% 36%);\n  }\n\n  .text-gov-warning {\n    color: hsl(45 93% 47%);\n  }\n\n  .text-gov-error {\n    color: hsl(0 84% 60%);\n  }\n\n  /* Font Awesome icons */\n  .fas {\n    font-family: \"Font Awesome 6 Free\";\n    font-weight: 900;\n  }\n\n  /* Custom scrollbar */\n  ::-webkit-scrollbar {\n    width: 6px;\n    height: 6px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: hsl(var(--muted));\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: hsl(var(--border));\n    border-radius: 3px;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    background: hsl(var(--muted-foreground));\n  }\n\n  /* Smooth transitions */\n  * {\n    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n    transition-duration: 150ms;\n  }\n}\n\n/* Loading animations */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.fade-in {\n  animation: fadeIn 0.3s ease-out;\n}\n\n/* Focus styles for accessibility */\n.focus-visible:focus {\n  outline: 2px solid hsl(var(--primary));\n  outline-offset: 2px;\n}\n\n/* Government form styling */\n.gov-form-input {\n  @apply block w-full rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 px-3 py-2 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:border-blue-600 focus:ring-blue-600 focus:outline-none focus:ring-2 focus:ring-offset-2;\n}\n\n.gov-form-label {\n  @apply block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1;\n}\n\n/* Government button variants */\n.gov-btn-primary {\n  @apply bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-blue-600 focus:ring-offset-2;\n}\n\n.gov-btn-secondary {\n  @apply bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 font-medium py-2 px-4 rounded-lg transition-colors;\n}\n\n/* Status indicators */\n.status-verified {\n  @apply bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400;\n}\n\n.status-pending {\n  @apply bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400;\n}\n\n.status-rejected {\n  @apply bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400;\n}\n\n/* Chatbot pulse animation */\n.pulse-animation {\n  animation: pulse 2s infinite;\n}\n\n@keyframes pulse {\n  0%, 100% {\n    box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.7);\n  }\n  50% {\n    box-shadow: 0 0 0 10px rgba(59, 130, 246, 0);\n  }\n}\n","size_bytes":6547},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ChatBot.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { MessageCircle, X, Send, Bot } from \"lucide-react\";\n\ninterface Message {\n  id: number;\n  text: string;\n  sender: \"user\" | \"bot\";\n  timestamp: Date;\n}\n\nexport default function ChatBot() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: 1,\n      text: \"🇰🇪 Hello! I'm MIRA, your RMU Government System assistant. I can help you with document management, user registration, routing rules, and system navigation. How can I assist you today?\",\n      sender: \"bot\",\n      timestamp: new Date(),\n    },\n  ]);\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const [position, setPosition] = useState(() => ({\n    x: window.innerWidth - 88, // 64px button width + 24px margin from right\n    y: window.innerHeight - 88  // 64px button height + 24px margin from bottom\n  }));\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\n  const [wasUserDragged, setWasUserDragged] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, isTyping]);\n\n  const getBotResponse = (userMessage: string): string => {\n    const message = userMessage.toLowerCase();\n    \n    if (message.includes(\"hello\") || message.includes(\"hi\") || message.includes(\"hey\")) {\n      return \"Hello! 👋 I'm MIRA, your RMU Government System assistant. Welcome to the system! I'm here to help you navigate and use all the features effectively. What can I assist you with today?\";\n    }\n    \n    if (message.includes(\"help\") || message.includes(\"how\") || message.includes(\"guide\")) {\n      return \"I can help you with:\\n\\n📄 Document Management\\n• Upload and organize letters\\n• Create folders and manage files\\n• Track document status\\n\\n👥 User Administration\\n• Register new users (Admin only)\\n• Assign roles and permissions\\n• Manage departments\\n\\n🔄 Automated Routing\\n• Set up routing rules\\n• Monitor document flow\\n• Track delivery status\\n\\nWhat would you like to know more about?\";\n    }\n    \n    if (message.includes(\"document\") || message.includes(\"upload\") || message.includes(\"file\")) {\n      return \"📄 To upload a document:\\n\\n1. Go to 'Letters' section\\n2. Click 'Upload Letter' button\\n3. Select your PDF or Word file\\n4. Fill in title and reference\\n5. Choose a folder\\n6. Submit to upload\\n\\nYour document will get a verification code for security. Need help with anything specific?\";\n    }\n    \n    if (message.includes(\"user\") || message.includes(\"register\") || message.includes(\"account\")) {\n      return \"👥 To register a new user (Admin only):\\n\\n1. Go to 'User Management' section\\n2. Click 'Register New User'\\n3. Enter user details\\n4. Select role: Admin, Registry, or Officer\\n5. Assign to department\\n6. Set password\\n7. Submit to create account\\n\\nOnly administrators can create new users. What else would you like to know?\";\n    }\n    \n    if (message.includes(\"routing\") || message.includes(\"rule\") || message.includes(\"automat\")) {\n      return \"🔄 To create routing rules:\\n\\n1. Go to 'Routing' section\\n2. Click 'Create Rule'\\n3. Set source and target departments\\n4. Define conditions (title, keywords, status)\\n5. Set priority level\\n6. Activate the rule\\n\\nDocuments matching your conditions will automatically route to the right department. Need help with specific conditions?\";\n    }\n    \n    if (message.includes(\"logo\") || message.includes(\"kenya\")) {\n      return \"🇰🇪 The system displays the official Republic of Kenya logo and serves the Department of Industry with government-grade security and compliance standards.\";\n    }\n\n    if (message.includes(\"mira\") || message.includes(\"name\") || message.includes(\"who are you\")) {\n      return \"I'm MIRA! 🤖 I'm your dedicated assistant for the RMU Government System. I'm here to help you with all aspects of document management, user administration, and system navigation. How can I assist you today?\";\n    }\n    \n    return \"I'm MIRA, here to help with the RMU Government System! You can ask me about:\\n• Document upload and management\\n• User registration and roles\\n• Automated routing setup\\n• System navigation\\n\\nWhat specific topic interests you?\";\n  };\n\n  const handleSendMessage = () => {\n    if (!inputMessage.trim()) return;\n\n    const newMessage: Message = {\n      id: Date.now(),\n      text: inputMessage,\n      sender: \"user\",\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, newMessage]);\n    const currentInput = inputMessage;\n    setInputMessage(\"\");\n    setIsTyping(true);\n\n    setTimeout(() => {\n      const botResponse: Message = {\n        id: Date.now() + 1,\n        text: getBotResponse(currentInput),\n        sender: \"bot\",\n        timestamp: new Date(),\n      };\n      setMessages(prev => [...prev, botResponse]);\n      setIsTyping(false);\n    }, 1000);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const handleMouseDown = (e: React.MouseEvent) => {\n    setIsDragging(true);\n    setDragStart({\n      x: e.clientX - position.x,\n      y: e.clientY - position.y\n    });\n    e.preventDefault();\n  };\n\n  const handleMouseMove = (e: MouseEvent) => {\n    if (!isDragging) return;\n    \n    const newX = e.clientX - dragStart.x;\n    const newY = e.clientY - dragStart.y;\n    \n    // Keep button within screen bounds\n    const maxX = window.innerWidth - 80; // button width + some padding\n    const maxY = window.innerHeight - 80; // button height + some padding\n    \n    setPosition({\n      x: Math.max(20, Math.min(newX, maxX)),\n      y: Math.max(20, Math.min(newY, maxY))\n    });\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n    setWasUserDragged(true); // Mark that user has manually moved the button\n  };\n\n  useEffect(() => {\n    if (isDragging) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n      return () => {\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n      };\n    }\n  }, [isDragging, dragStart]);\n\n  // Handle window resize to keep button visible and return to default if not user-dragged\n  useEffect(() => {\n    const handleResize = () => {\n      const maxX = window.innerWidth - 80;\n      const maxY = window.innerHeight - 80;\n      const defaultX = window.innerWidth - 88;\n      const defaultY = window.innerHeight - 88;\n\n      setPosition(prevPosition => {\n        // If user never dragged the button, always return to default position\n        if (!wasUserDragged) {\n          return { x: defaultX, y: defaultY };\n        }\n        \n        // If user dragged it, keep it within bounds but don't auto-return to default\n        return {\n          x: Math.max(20, Math.min(prevPosition.x, maxX)),\n          y: Math.max(20, Math.min(prevPosition.y, maxY))\n        };\n      });\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [wasUserDragged]);\n\n  if (!isOpen) {\n    return (\n      <div \n        className=\"fixed z-50\"\n        style={{ \n          position: 'fixed', \n          left: `${position.x}px`, \n          top: `${position.y}px`, \n          zIndex: 50,\n          cursor: isDragging ? 'grabbing' : 'grab'\n        }}\n      >\n        <button\n          onMouseDown={handleMouseDown}\n          onClick={(e) => {\n            if (!isDragging) {\n              setIsOpen(true);\n            }\n          }}\n          className=\"w-16 h-16 bg-blue-600 hover:bg-blue-700 text-white rounded-full shadow-lg flex items-center justify-center transition-all duration-200 pulse-animation select-none\"\n          aria-label=\"Open RMU Assistant\"\n          style={{ cursor: isDragging ? 'grabbing' : 'grab' }}\n        >\n          <Bot className=\"w-8 h-8\" />\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div \n      className=\"fixed bottom-6 right-6 z-50\"\n      style={{ position: 'fixed', bottom: '24px', right: '24px', zIndex: 50 }}\n    >\n      <div className=\"w-96 h-[500px] bg-white dark:bg-gray-900 rounded-lg shadow-2xl border border-gray-200 dark:border-gray-700 flex flex-col\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700 bg-blue-50 dark:bg-blue-950 rounded-t-lg\">\n          <div className=\"flex items-center space-x-2\">\n            <Bot className=\"w-5 h-5 text-blue-600 dark:text-blue-400\" />\n            <h3 className=\"font-semibold text-gray-900 dark:text-gray-100\">MIRA Assistant</h3>\n          </div>\n          <button\n            onClick={() => setIsOpen(false)}\n            className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\"\n          >\n            <X className=\"w-5 h-5\" />\n          </button>\n        </div>\n\n        {/* Messages */}\n        <div className=\"flex-1 overflow-y-auto p-4 space-y-3\">\n          {messages.map((message) => (\n            <div\n              key={message.id}\n              className={`flex ${message.sender === \"user\" ? \"justify-end\" : \"justify-start\"}`}\n            >\n              <div\n                className={`max-w-[80%] rounded-lg px-3 py-2 text-sm ${\n                  message.sender === \"user\"\n                    ? \"bg-blue-600 text-white\"\n                    : \"bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-gray-100\"\n                }`}\n              >\n                <div className=\"whitespace-pre-line\">{message.text}</div>\n                <div className={`text-xs mt-1 opacity-70 ${\n                  message.sender === \"user\" ? \"text-blue-100\" : \"text-gray-500\"\n                }`}>\n                  {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                </div>\n              </div>\n            </div>\n          ))}\n          \n          {isTyping && (\n            <div className=\"flex justify-start\">\n              <div className=\"bg-gray-100 dark:bg-gray-800 rounded-lg px-3 py-2\">\n                <div className=\"flex items-center space-x-1\">\n                  <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n                  <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                  <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                </div>\n              </div>\n            </div>\n          )}\n          <div ref={messagesEndRef} />\n        </div>\n\n        {/* Input */}\n        <div className=\"p-4 border-t border-gray-200 dark:border-gray-700\">\n          <div className=\"flex space-x-2\">\n            <input\n              type=\"text\"\n              value={inputMessage}\n              onChange={(e) => setInputMessage(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder=\"Ask me anything about the RMU system...\"\n              className=\"flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100\"\n              disabled={isTyping}\n            />\n            <button\n              onClick={handleSendMessage}\n              disabled={!inputMessage.trim() || isTyping}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n            >\n              <Send className=\"w-4 h-4\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11999},"client/src/components/ConnectionStatusBanner.tsx":{"content":"","size_bytes":0},"client/src/components/DocumentPreview.tsx":{"content":"import { useState, useMemo, useCallback } from \"react\";\nimport { FileText, Download, Eye, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface DocumentPreviewProps {\n  fileName: string;\n  fileUrl: string;\n  fileSize?: number;\n  uploadedAt?: Date;\n  children?: React.ReactNode;\n}\n\nexport default function DocumentPreview({ \n  fileName, \n  fileUrl, \n  fileSize, \n  uploadedAt,\n  children \n}: DocumentPreviewProps) {\n  const [isPreviewOpen, setIsPreviewOpen] = useState(false);\n  const [previewContent, setPreviewContent] = useState<string | null>(null);\n  const [isLoadingPreview, setIsLoadingPreview] = useState(false);\n\n  // Memoize file extension calculation\n  const fileExtension = useMemo(() => {\n    return fileName.split('.').pop()?.toLowerCase();\n  }, [fileName]);\n\n  // Memoize file icon\n  const fileIcon = useMemo(() => {\n    switch (fileExtension) {\n      case 'pdf':\n        return '📄';\n      case 'doc':\n      case 'docx':\n        return '📝';\n      default:\n        return '📎';\n    }\n  }, [fileExtension]);\n\n  // Memoize file type\n  const fileType = useMemo(() => {\n    switch (fileExtension) {\n      case 'pdf':\n        return 'PDF Document';\n      case 'doc':\n        return 'Word Document (Legacy)';\n      case 'docx':\n        return 'Word Document';\n      default:\n        return 'Document';\n    }\n  }, [fileExtension]);\n\n  // Memoize file size formatting\n  const formattedFileSize = useMemo(() => {\n    if (!fileSize) return 'Unknown size';\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(fileSize) / Math.log(1024));\n    return Math.round(fileSize / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n  }, [fileSize]);\n\n  const isPDF = fileExtension === 'pdf';\n\n  const handleDownload = useCallback(() => {\n    const token = localStorage.getItem('auth_token');\n    \n    // Use our dedicated download endpoint with token in header\n    if (fileUrl.startsWith('/api/files/') && fileUrl.endsWith('/download') && token) {\n      // Create a temporary link that opens in a new window\n      const downloadUrl = `${window.location.origin}${fileUrl}`;\n      \n      // Create a hidden iframe to trigger the download with authentication\n      const iframe = document.createElement('iframe');\n      iframe.style.display = 'none';\n      document.body.appendChild(iframe);\n      \n      // Create a form in the iframe to submit with the token\n      const form = iframe.contentDocument.createElement('form');\n      form.method = 'GET';\n      form.action = downloadUrl;\n      \n      // Add token as a header via a meta tag approach won't work,\n      // so we'll open in a new window with proper authentication\n      document.body.removeChild(iframe);\n      \n      // Use fetch API to download with authentication\n      fetch(downloadUrl, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      })\n      .then(response => response.blob())\n      .then(blob => {\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = fileName;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        window.URL.revokeObjectURL(url);\n      })\n      .catch(error => {\n        console.error('Download failed:', error);\n        // Fallback to opening in new window\n        const newWindow = window.open(downloadUrl, '_blank');\n        if (!newWindow) {\n          // If popup blocked, show error\n          alert('Please allow popups to download the file');\n        }\n      });\n      return;\n    }\n    \n    // Fallback for other URLs\n    const link = document.createElement('a');\n    link.href = fileUrl;\n    link.download = fileName;\n    link.target = '_blank';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }, [fileUrl, fileName]);\n\n  // Load preview content when dialog opens\n  const loadPreview = useCallback(async () => {\n    if (!isPDF || !fileUrl) return;\n    \n    setIsLoadingPreview(true);\n    try {\n      const token = localStorage.getItem('auth_token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      \n      // Use our dedicated preview endpoint\n      let previewUrl = fileUrl;\n      if (fileUrl.endsWith('/download')) {\n        // Replace /download with /preview\n        previewUrl = fileUrl.replace(/\\/download$/, '/preview');\n      }\n      \n      // Fetch the PDF with authentication\n      const response = await fetch(previewUrl, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Failed to load preview: ${response.status} ${response.statusText}`);\n      }\n      \n      // Convert to blob URL for iframe\n      const blob = await response.blob();\n      const blobUrl = URL.createObjectURL(blob);\n      setPreviewContent(blobUrl);\n    } catch (error) {\n      console.error('Error loading preview:', error);\n      setPreviewContent(null);\n    } finally {\n      setIsLoadingPreview(false);\n    }\n  }, [fileUrl, isPDF]);\n\n  // Clean up blob URL when dialog closes\n  const handleDialogChange = useCallback((open: boolean) => {\n    setIsPreviewOpen(open);\n    if (!open && previewContent) {\n      URL.revokeObjectURL(previewContent);\n      setPreviewContent(null);\n    }\n    if (open && isPDF) {\n      loadPreview();\n    }\n  }, [isPDF, loadPreview, previewContent]);\n\n  // Memoize preview content to prevent unnecessary re-renders\n  const PreviewContent = useMemo(() => {\n    if (isPDF) {\n      if (isLoadingPreview) {\n        return (\n          <div className=\"flex items-center justify-center h-full\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n          </div>\n        );\n      }\n      \n      if (previewContent) {\n        return (\n          <div className=\"w-full h-full bg-gray-100 dark:bg-gray-800 rounded-lg overflow-hidden\">\n            <iframe\n              src={previewContent}\n              className=\"w-full h-full border-0\"\n              title={`Preview of ${fileName}`}\n              loading=\"lazy\"\n            />\n          </div>\n        );\n      }\n      \n      return (\n        <div className=\"flex flex-col items-center justify-center h-full bg-gray-50 dark:bg-gray-800 rounded-lg p-8 text-center\">\n          <div className=\"text-6xl mb-4\">❌</div>\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n            Preview Unavailable\n          </h3>\n          <p className=\"text-gray-600 dark:text-gray-300 mb-6 max-w-md\">\n            Unable to load preview. Please try downloading the file instead.\n          </p>\n          <Button onClick={handleDownload} className=\"bg-blue-600 hover:bg-blue-700\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            Download File\n          </Button>\n        </div>\n      );\n    } else {\n      // For Word documents, show a preview placeholder since direct preview isn't supported\n      return (\n        <div className=\"flex flex-col items-center justify-center h-full bg-gray-50 dark:bg-gray-800 rounded-lg p-8 text-center\">\n          <div className=\"text-6xl mb-4\">📝</div>\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n            Word Document Preview\n          </h3>\n          <p className=\"text-gray-600 dark:text-gray-300 mb-6 max-w-md\">\n            Word documents cannot be previewed directly in the browser. Click the download button to open the document.\n          </p>\n          <Button onClick={handleDownload} className=\"bg-blue-600 hover:bg-blue-700\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            Download to View\n          </Button>\n        </div>\n      );\n    }\n  }, [isPDF, isLoadingPreview, previewContent, fileName, handleDownload]);\n\n  return (\n    <>\n      {children ? (\n        <Dialog open={isPreviewOpen} onOpenChange={handleDialogChange}>\n          <DialogTrigger asChild>\n            {children}\n          </DialogTrigger>\n          <DialogContent className=\"max-w-4xl w-full h-[80vh] flex flex-col\">\n            <DialogHeader className=\"flex-shrink-0\">\n              <DialogTitle className=\"flex items-center gap-3\">\n                <span className=\"text-2xl\">{fileIcon}</span>\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"truncate font-semibold\">{fileName}</div>\n                  <div className=\"flex items-center gap-3 text-sm text-gray-600 dark:text-gray-300\">\n                    <Badge variant=\"outline\">{fileType}</Badge>\n                    {fileSize && <span>{formattedFileSize}</span>}\n                    {uploadedAt && (\n                      <span>Uploaded {uploadedAt.toLocaleDateString()}</span>\n                    )}\n                  </div>\n                </div>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={handleDownload}\n                  className=\"flex-shrink-0\"\n                >\n                  <Download className=\"w-4 h-4\" />\n                </Button>\n              </DialogTitle>\n            </DialogHeader>\n            <div className=\"flex-1 overflow-hidden\">\n              {PreviewContent}\n            </div>\n          </DialogContent>\n        </Dialog>\n      ) : (\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4 hover:shadow-md transition-shadow\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3 min-w-0 flex-1\">\n              <div className=\"text-2xl flex-shrink-0\">{fileIcon}</div>\n              <div className=\"min-w-0 flex-1\">\n                <div className=\"font-medium text-gray-900 dark:text-white truncate\">\n                  {fileName}\n                </div>\n                <div className=\"flex items-center gap-3 text-sm text-gray-600 dark:text-gray-300\">\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {fileType}\n                  </Badge>\n                  {fileSize && <span>{formattedFileSize}</span>}\n                  {uploadedAt && (\n                    <span>Uploaded {uploadedAt.toLocaleDateString()}</span>\n                  )}\n                </div>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2 flex-shrink-0\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleDialogChange(true)}\n                className=\"gap-2\"\n              >\n                <Eye className=\"w-4 h-4\" />\n                Preview\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleDownload}\n              >\n                <Download className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}","size_bytes":11144},"client/src/components/Header.tsx":{"content":"import { useTheme } from \"@/contexts/ThemeContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  Menu, \n  Search, \n  Sun, \n  Moon\n} from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport logoPath from \"@assets/Republic_of_kenya_logo.jpeg\";\nimport { useEffect, useState } from \"react\";\n\ninterface HeaderProps {\n  title: string;\n  onSidebarToggle: () => void;\n}\n\nexport default function Header({ title, onSidebarToggle }: HeaderProps) {\n  const { isDark, toggleTheme } = useTheme();\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n\n  useEffect(() => {\n    const updateStatus = () => {\n      // Try to fetch a lightweight resource to confirm actual connectivity\n      fetch(\"/favicon.ico\", { method: \"HEAD\", cache: \"no-store\" })\n        .then(() => setIsOnline(true))\n        .catch(() => setIsOnline(false));\n    };\n    updateStatus();\n    const interval = setInterval(updateStatus, 2000); // check every 2 seconds\n    window.addEventListener('online', updateStatus);\n    window.addEventListener('offline', updateStatus);\n    return () => {\n      clearInterval(interval);\n      window.removeEventListener('online', updateStatus);\n      window.removeEventListener('offline', updateStatus);\n    };\n  }, []);\n\n  return (\n    <header className=\"sticky top-0 z-30 bg-white/80 dark:bg-gray-900/80 backdrop-blur-xl border-b border-gray-200 dark:border-gray-700 shadow-sm\">\n      <div className=\"px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Left Section */}\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onSidebarToggle}\n              className=\"lg:hidden p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors\"\n            >\n              <Menu className=\"h-6 w-6 text-gray-600 dark:text-gray-300\" />\n            </Button>\n            \n            <div className=\"hidden lg:flex items-center space-x-3\">\n              <img \n                src={logoPath} \n                alt=\"Kenya Logo\" \n                className=\"h-8 w-8 rounded-full shadow-sm\"\n              />\n              <div>\n                <h1 className=\"text-xl font-bold text-gray-900 dark:text-white\">\n                  {title}\n                </h1>\n                <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                  State Department of Industry\n                </p>\n              </div>\n            </div>\n\n            <h1 className=\"lg:hidden text-lg font-semibold text-gray-900 dark:text-white truncate\">\n              {title}\n            </h1>\n          </div>\n          \n          {/* Center Section - Search */}\n          <div className=\"hidden md:flex flex-1 max-w-md mx-8\">\n            <div className=\"relative w-full\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search documents, letters, or users...\"\n                className=\"pl-10 pr-4 bg-gray-50 dark:bg-gray-800 border-gray-200 dark:border-gray-700 focus:bg-white dark:focus:bg-gray-700 transition-colors\"\n              />\n            </div>\n          </div>\n          \n          {/* Right Section */}\n          <div className=\"flex items-center space-x-3\">\n            {/* Mobile Search Button */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"md:hidden p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg\"\n            >\n              <Search className=\"h-5 w-5 text-gray-600 dark:text-gray-300\" />\n            </Button>\n\n            {/* Connection Status Indicator */}\n            <div\n              className={`w-4 h-4 rounded-full border-2 ${isOnline ? 'bg-green-500 border-green-600' : 'bg-red-500 border-red-600'} flex items-center justify-center transition-colors`}\n              title={isOnline ? 'Online' : 'Offline'}\n              aria-label={isOnline ? 'Online' : 'Offline'}\n              style={{ marginRight: '0.5rem' }}\n            />\n            \n            {/* Theme Toggle */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={toggleTheme}\n              className={`p-2.5 rounded-full border transition-all duration-200 shadow-sm hover:shadow-md \n                ${isDark ? 'bg-white hover:bg-slate-100 border-slate-200 dark:border-slate-700' : 'bg-slate-900 hover:bg-slate-800 border-transparent'}`}\n              aria-label={isDark ? \"Switch to light mode\" : \"Switch to dark mode\"}\n              title={isDark ? \"Switch to light mode\" : \"Switch to dark mode\"}\n            >\n              {isDark ? (\n                <Sun className=\"h-5 w-5 text-yellow-400\" />\n              ) : (\n                <Moon className=\"h-5 w-5 text-white\" />\n              )}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":5211},"client/src/components/ProtectedRoute.tsx":{"content":"import { ReactNode, useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\n\ninterface ProtectedRouteProps {\n  children: ReactNode;\n  requiredRoles?: string[];\n  adminOnly?: boolean;\n}\n\ninterface User {\n  id: number;\n  email: string;\n  name: string;\n  roles: string[];\n  department?: string;\n  position?: string;\n}\n\nexport default function ProtectedRoute({ children, requiredRoles, adminOnly }: ProtectedRouteProps) {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      const token = localStorage.getItem('auth_token');\n      if (!token) {\n        window.location.replace(\"/login\");\n        return;\n      }\n      try {\n        const response = await fetch('/api/me', {\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json',\n          },\n        });\n        if (response.ok) {\n          const userData = await response.json();\n          setUser(userData);\n          // Prevent access to /login if already authenticated\n          if (window.location.pathname === '/login') {\n            window.location.replace('/dashboard');\n          }\n        } else {\n          localStorage.removeItem('auth_token');\n          localStorage.removeItem('user_data');\n          window.location.replace(\"/login\");\n        }\n      } catch (error) {\n        console.error('Auth check failed:', error);\n        localStorage.removeItem('auth_token');\n        localStorage.removeItem('user_data');\n        window.location.replace(\"/login\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAuth();\n  }, [setLocation]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-slate-900\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  if (adminOnly && !user.roles.includes('admin')) {\n    setLocation(\"/dashboard\");\n    return null;\n  }\n\n  if (requiredRoles && !requiredRoles.some(role => user.roles.includes(role))) {\n    setLocation(\"/dashboard\");\n    return null;\n  }\n\n  return <>{children}</>;\n}\n","size_bytes":2305},"client/src/components/Sidebar.tsx":{"content":"import { useAuth } from \"@/contexts/AuthContext\";\nimport { logout } from \"@/lib/auth\";\nimport { useLocation } from \"wouter\";\nimport { \n  LayoutDashboard, \n  FolderOpen, \n  Mail, \n  Users, \n  ShieldCheck, \n  BarChart3, \n  LogOut, \n  X,\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport logoPath from \"@assets/Republic_of_kenya_logo.jpeg\";\n\ninterface SidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function Sidebar({ isOpen, onClose }: SidebarProps) {\n  const { user, userRole, isAdmin, loading } = useAuth();\n  // Debug: Log user object to help diagnose 'Unknown User' issue\n  console.debug('Sidebar user:', user);\n  if (!loading && !user) {\n    console.error('Sidebar: No user loaded. User is not authenticated or failed to load.');\n  }\n  const [location, navigate] = useLocation();\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      navigate(\"/login\");\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n    }\n  };\n\n  const navigationItems = [\n    { id: \"overview\", label: \"Dashboard\", icon: LayoutDashboard, path: \"/dashboard\", color: \"text-blue-600\" },\n    { id: \"folders\", label: \"Document Folders\", icon: FolderOpen, path: \"/dashboard/folders\", color: \"text-amber-600\" },\n    { id: \"letters\", label: \"Letters Management\", icon: Mail, path: \"/dashboard/letters\", color: \"text-green-600\" },\n    ...(isAdmin ? [{ id: \"users\", label: \"User Management\", icon: Users, path: \"/dashboard/users\", color: \"text-purple-600\" }] : []),\n    { id: \"verification\", label: \"Verification\", icon: ShieldCheck, path: \"/dashboard/verification\", color: \"text-red-600\" },\n    { id: \"reports\", label: \"Reports\", icon: BarChart3, path: \"/dashboard/reports\", color: \"text-indigo-600\" },\n  ];\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase();\n  };\n\n  const getRoleBadgeColor = (role: string) => {\n    const colors = {\n      admin: \"bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400\",\n      ps: \"bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400\",\n      secretary: \"bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400\",\n      registry: \"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\",\n      officer: \"bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400\",\n    };\n    return colors[role as keyof typeof colors] || colors.officer;\n  };\n\n  return (\n    <>\n      {/* Mobile overlay */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-40 lg:hidden transition-opacity duration-300\"\n          onClick={onClose}\n        />\n      )}\n      \n      {/* Sidebar */}\n      <div className={`fixed inset-y-0 left-0 z-50 w-80 bg-white/95 dark:bg-gray-900/95 backdrop-blur-xl shadow-2xl border-r border-gray-200 dark:border-gray-700 transform transition-all duration-300 ease-in-out lg:translate-x-0 ${\n        isOpen ? 'translate-x-0' : '-translate-x-full'\n      }`}>\n        {/* Header */}\n        <div className=\"flex items-center justify-between h-20 px-6 bg-gradient-to-r from-blue-600 to-blue-700 shadow-lg\">\n          <div className=\"flex items-center space-x-3\">\n            <img \n              src={logoPath} \n              alt=\"Kenya Logo\" \n              className=\"h-10 w-10 rounded-full shadow-lg ring-2 ring-white/20\"\n            />\n            <div>\n              <h2 className=\"text-white font-bold text-lg\">RMU System</h2>\n              <p className=\"text-blue-100 text-xs\">Records Management</p>\n            </div>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onClose}\n            className=\"lg:hidden text-white hover:bg-white/20 rounded-full p-2\"\n          >\n            <X className=\"h-5 w-5\" />\n          </Button>\n        </div>\n\n        {/* User Profile */}\n        <div className=\"p-6 bg-gradient-to-b from-blue-50 to-white dark:from-gray-800 dark:to-gray-900\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full flex items-center justify-center text-white font-bold text-lg shadow-lg\">\n              {getInitials(user?.name || 'User')}\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-semibold text-gray-900 dark:text-white truncate\">\n                {loading ? 'Loading...' : user?.name ? user.name : 'Not logged in'}\n              </p>\n              <p className=\"text-xs text-gray-600 dark:text-gray-300 truncate\">\n                {loading ? 'Loading...' : user?.email ? user.email : 'Not logged in'}\n              </p>\n              <div className=\"flex items-center space-x-2 mt-2\">\n                <Badge className={`text-xs px-2 py-1 ${getRoleBadgeColor(userRole || 'user')}`}>\n                  {userRole?.toUpperCase()}\n                </Badge>\n                {user?.department && (\n                  <Badge variant=\"outline\" className=\"text-xs px-2 py-1\">\n                    {user.department}\n                  </Badge>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <Separator className=\"mx-6\" />\n\n        {/* Navigation */}\n        <nav className=\"flex-1 px-4 py-6 space-y-2 overflow-y-auto\">\n          {navigationItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = location === item.path;\n            \n            return (\n              <Button\n                key={item.id}\n                variant={isActive ? \"secondary\" : \"ghost\"}\n                className={`w-full justify-start h-12 px-4 transition-all duration-200 ${\n                  isActive\n                    ? 'bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 shadow-sm border-r-4 border-blue-600'\n                    : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 hover:text-gray-900 dark:hover:text-white'\n                }`}\n                onClick={() => {\n                  navigate(item.path);\n                  onClose();\n                }}\n              >\n                <Icon className={`mr-3 h-5 w-5 ${isActive ? item.color : 'text-gray-500'}`} />\n                <span className=\"font-medium\">{item.label}</span>\n              </Button>\n            );\n          })}\n        </nav>\n\n        <Separator className=\"mx-6\" />\n\n        {/* Footer Actions */}\n        <div className=\"p-4 space-y-2\">\n          <Button\n            variant=\"ghost\"\n            className=\"w-full justify-start h-12 px-4 text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20\"\n            onClick={handleLogout}\n          >\n            <LogOut className=\"mr-3 h-5 w-5\" />\n            <span className=\"font-medium\">Sign Out</span>\n          </Button>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":6998},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from \"react\";\nimport { User as DatabaseUser } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface AuthContextType {\n  user: DatabaseUser | null;\n  userRole: string | null;\n  loading: boolean;\n  isAdmin: boolean;\n  isRegistry: boolean;\n  isOfficer: boolean;\n  canAddUsers: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType>({\n  user: null,\n  userRole: null,\n  loading: true,\n  isAdmin: false,\n  isRegistry: false,\n  isOfficer: false,\n  canAddUsers: false,\n});\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider = ({ children }: AuthProviderProps) => {\n  const [user, setUser] = useState<DatabaseUser | null>(null);\n  const [userRole, setUserRole] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for existing JWT token and fetch user data\n    const checkAuth = async () => {\n      const token = localStorage.getItem('token');\n      console.debug('AuthContext token:', token);\n      if (token) {\n        try {\n          const response = await apiRequest('GET', '/api/me');\n          const data = await response.json();\n          console.debug('AuthContext /api/me response:', data);\n          if (data.success && data.user) {\n            setUser(data.user);\n            setUserRole(data.user.position || 'user');\n          } else {\n            setUser(null);\n            setUserRole(null);\n          }\n        } catch (error) {\n          // Token is invalid, remove it\n          localStorage.removeItem('token');\n          setUser(null);\n          setUserRole(null);\n        }\n      } else {\n        setUser(null);\n        setUserRole(null);\n      }\n      setLoading(false);\n    };\n\n    checkAuth();\n  }, []);\n\n  // Derive role-based permissions\n  const isAdmin = userRole === 'admin' || userRole === 'ict_admin';\n  const isRegistry = userRole === 'registry' || userRole === 'registry_admin';\n  const isOfficer = userRole === 'officer' || userRole === 'secretary';\n  const canAddUsers = isAdmin || isRegistry;\n\n  useEffect(() => {\n    let timeout: NodeJS.Timeout | null = null;\n    let lastActivity = Date.now();\n\n    const resetTimer = () => {\n      lastActivity = Date.now();\n      if (timeout) clearTimeout(timeout);\n      timeout = setTimeout(() => {\n        if (Date.now() - lastActivity >= 10 * 60 * 1000) { // 10 minutes\n          import(\"@/lib/auth\").then(mod => mod.logout());\n          window.location.href = \"/login\";\n        }\n      }, 10 * 60 * 1000);\n    };\n\n    // Debounce the resetTimer function to prevent excessive calls\n    const debouncedResetTimer = () => {\n      if (timeout) {\n        clearTimeout(timeout);\n      }\n      timeout = setTimeout(resetTimer, 300); // Debounce for 300ms\n    };\n\n    const activityEvents = [\"mousemove\", \"keydown\", \"mousedown\", \"touchstart\", \"scroll\"];\n    activityEvents.forEach(event => window.addEventListener(event, debouncedResetTimer, { passive: true }));\n    resetTimer();\n\n    return () => {\n      if (timeout) clearTimeout(timeout);\n      activityEvents.forEach(event => window.removeEventListener(event, debouncedResetTimer, { passive: true }));\n    };\n  }, []);\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        userRole,\n        loading,\n        isAdmin,\n        isRegistry,\n        isOfficer,\n        canAddUsers,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};","size_bytes":3664},"client/src/contexts/ThemeContext.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from \"react\";\n\ninterface ThemeContextType {\n  isDark: boolean;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType>({\n  isDark: false,\n  toggleTheme: () => {},\n});\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n};\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nexport const ThemeProvider = ({ children }: ThemeProviderProps) => {\n  const [isDark, setIsDark] = useState(() => {\n    if (typeof window !== \"undefined\") {\n      return localStorage.getItem(\"darkMode\") === \"true\";\n    }\n    return false;\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    if (isDark) {\n      root.classList.add(\"dark\");\n    } else {\n      root.classList.remove(\"dark\");\n    }\n    localStorage.setItem(\"darkMode\", isDark.toString());\n  }, [isDark]);\n\n  const toggleTheme = () => {\n    setIsDark(prev => !prev);\n  };\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n","size_bytes":1192},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"// All Firebase-related imports and logic removed. Implement Aiven/JWT-based auth here.\n\nexport const loginWithEmail = async (email: string, password: string) => {\n  // Implement login logic using /api/login endpoint\n};\n\nexport const createUserWithEmail = async (email: string, password: string) => {\n  // Implement user creation logic using /api/register endpoint\n};\n\nexport const logout = async () => {\n  localStorage.removeItem('authToken');\n  localStorage.removeItem('auth_token');\n  localStorage.removeItem('token');\n  localStorage.removeItem('user_data');\n};\n\nexport const getCurrentUserRole = async () => {\n  // Implement logic to get the current user's role, possibly from a JWT token\n};\n\nexport const getCurrentUserClaims = async () => {\n  // Implement logic to get the current user's claims, possibly from a JWT token\n};\n","size_bytes":831},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\n// Enhanced error handling for API responses\nexport class ApiError extends Error {\n  constructor(\n    public status: number,\n    public statusText: string,\n    public body: any = null,\n    public code?: string\n  ) {\n    super(`${status}: ${statusText}`);\n    this.name = 'ApiError';\n  }\n}\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    try {\n      const errorData = await res.json();\n      throw new ApiError(\n        res.status,\n        errorData.message || res.statusText,\n        errorData,\n        errorData.code\n      );\n    } catch (parseError) {\n      // If JSON parsing fails, use text\n      const text = await res.text().catch(() => res.statusText);\n      throw new ApiError(res.status, text);\n    }\n  }\n}\n\n// Enhanced API request function with better error handling\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  // Use consistent token key\n  const token = localStorage.getItem('auth_token');\n\n  const headers: Record<string, string> = {\n    'Content-Type': 'application/json',\n  };\n  \n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n\n  try {\n    const res = await fetch(url, {\n      method,\n      headers,\n      body: data ? JSON.stringify(data) : undefined,\n      credentials: \"include\",\n      // Add performance optimizations\n      keepalive: method === 'GET' ? true : undefined,\n    });\n\n    await throwIfResNotOk(res);\n    return res;\n  } catch (error) {\n    // Handle network errors\n    if (error instanceof TypeError && error.message.includes('fetch')) {\n      throw new ApiError(0, 'Network error - please check your connection', null, 'NETWORK_ERROR');\n    }\n    throw error;\n  }\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\n\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey, signal }) => {\n    const token = localStorage.getItem('auth_token');\n    \n    try {\n      const res = await fetch(queryKey[0] as string, {\n        credentials: \"include\",\n        headers: {\n          'Content-Type': 'application/json',\n          ...(token && { Authorization: `Bearer ${token}` }),\n        },\n        signal, // Support for cancellation\n        // Add performance optimizations\n        keepalive: true,\n      });\n\n      if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n        return null;\n      }\n\n      await throwIfResNotOk(res);\n      return await res.json();\n    } catch (error) {\n      // Handle abort errors gracefully\n      if (error instanceof Error && error.name === 'AbortError') {\n        throw error;\n      }\n      \n      // Handle network errors\n      if (error instanceof TypeError && error.message.includes('fetch')) {\n        throw new ApiError(0, 'Network error - please check your connection', null, 'NETWORK_ERROR');\n      }\n      \n      throw error;\n    }\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: 5 * 60 * 1000, // 5 minutes\n      gcTime: 10 * 60 * 1000,   // 10 minutes (was cacheTime)\n      retry: (failureCount, error) => {\n        // Don't retry on 4xx errors (client errors)\n        if (error instanceof ApiError && error.status >= 400 && error.status < 500) {\n          return false;\n        }\n        // Retry up to 2 times for network errors or 5xx errors\n        return failureCount < 2;\n      },\n      retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),\n      // Add performance optimizations\n      refetchOnMount: true,\n      refetchOnReconnect: false,\n    },\n    mutations: {\n      retry: (failureCount, error) => {\n        // Don't retry mutations on client errors\n        if (error instanceof ApiError && error.status >= 400 && error.status < 500) {\n          return false;\n        }\n        // Only retry once for server errors\n        return failureCount < 1;\n      },\n      // Add performance optimizations\n      networkMode: 'always',\n    },\n  },\n});\n\n// Enhanced mutation helper\nexport const createMutation = (endpoint: string, method: 'POST' | 'PUT' | 'PATCH' | 'DELETE' = 'POST') => {\n  return async (data?: any) => {\n    const res = await apiRequest(method, endpoint, data);\n    return res.json();\n  };\n};\n\n// Helper for handling API errors in components\nexport const handleApiError = (error: unknown): string => {\n  if (error instanceof ApiError) {\n    switch (error.code) {\n      case 'NETWORK_ERROR':\n        return 'Network error. Please check your internet connection.';\n      case 'NOT_AUTHENTICATED':\n        return 'Please log in to continue.';\n      case 'INSUFFICIENT_PERMISSIONS':\n        return 'You do not have permission to perform this action.';\n      case 'VALIDATION_FAILED':\n        return error.body?.errors ? \n          error.body.errors.map((e: any) => `${e.field}: ${e.message}`).join(', ') :\n          'Invalid input data.';\n      default:\n        return error.statusText || 'An error occurred.';\n    }\n  }\n  \n  if (error instanceof Error) {\n    return error.message;\n  }\n  \n  return 'An unexpected error occurred.';\n};","size_bytes":5313},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport Sidebar from \"@/components/Sidebar\";\nimport Header from \"@/components/Header\";\nimport ChatBot from \"@/components/ChatBot\";\nimport Overview from \"./dashboard/Overview\";\nimport Folders from \"./dashboard/Folders\";\nimport Letters from \"./dashboard/Letters\";\nimport UserManagement from \"./dashboard/UserManagement\";\nimport Verification from \"./dashboard/Verification\";\nimport Reports from \"./dashboard/Reports\";\nimport Routing from \"./dashboard/Routing\";\n\nexport default function Dashboard() {\n  const [location] = useLocation();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  const getPageTitle = (path: string) => {\n    const titles: Record<string, string> = {\n      \"/dashboard\": \"Dashboard Overview\",\n      \"/dashboard/admin\": \"Admin Dashboard\",\n      \"/dashboard/ps\": \"Principal Secretary Dashboard\",\n      \"/dashboard/secretary\": \"Secretary Dashboard\",\n      \"/dashboard/registry\": \"Registry Dashboard\",\n      \"/dashboard/department\": \"Department Dashboard\",\n      \"/dashboard/officer\": \"Officer Dashboard\",\n      \"/dashboard/folders\": \"Document Folders\",\n      \"/dashboard/letters\": \"Letters Management\",\n      \"/dashboard/users\": \"User Management\",\n      \"/dashboard/verification\": \"Document Verification\",\n      \"/dashboard/reports\": \"Reports & Analytics\",\n    };\n    return titles[path] || \"Dashboard\";\n  };\n\n  const renderContent = () => {\n    switch (location) {\n      case \"/dashboard/admin\":\n      case \"/dashboard/ps\":\n      case \"/dashboard/secretary\":\n      case \"/dashboard/registry\":\n      case \"/dashboard/department\":\n      case \"/dashboard/officer\":\n        return <Overview />;\n      case \"/dashboard/folders\":\n        return <Folders />;\n      case \"/dashboard/letters\":\n        return <Letters />;\n      case \"/dashboard/users\":\n        return <UserManagement />;\n      case \"/dashboard/verification\":\n        return <Verification />;\n      case \"/dashboard/reports\":\n        return <Reports />;\n      default:\n        return <Overview />;\n    }\n  };\n\n  useEffect(() => {\n    // Only push dummy state for /dashboard root, don't forcibly redirect subpages\n    if (window.location.pathname === '/dashboard') {\n      window.history.pushState({ dashboard: true }, '', '/dashboard');\n      const hasToken = () =>\n        localStorage.getItem('authToken') ||\n        localStorage.getItem('auth_token') ||\n        localStorage.getItem('token');\n      const handlePopState = (event: PopStateEvent) => {\n        if (hasToken()) {\n          window.history.pushState({ dashboard: true }, '', '/dashboard');\n        }\n      };\n      window.addEventListener('popstate', handlePopState);\n      return () => window.removeEventListener('popstate', handlePopState);\n    }\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 via-white to-blue-50/30 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\">\n      <Sidebar \n        isOpen={sidebarOpen} \n        onClose={() => setSidebarOpen(false)} \n      />\n      \n      <div className=\"lg:pl-80 transition-all duration-300\">\n        <Header \n          title={getPageTitle(location)}\n          onSidebarToggle={() => setSidebarOpen(true)}\n        />\n        \n        <main className=\"p-4 sm:p-6 lg:p-8 min-h-[calc(100vh-4rem)]\">\n          <div className=\"max-w-7xl mx-auto\">\n            {renderContent()}\n          </div>\n        </main>\n      </div>\n      \n      <ChatBot />\n    </div>\n  );\n}\n","size_bytes":3482},"client/src/pages/Login.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useParams, useLocation } from \"wouter\";\nimport { loginWithEmail } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useTheme } from \"@/contexts/ThemeContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  rememberMe: z.boolean().default(false),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const { type } = useParams() as { type: string };\n  const { toast } = useToast();\n  const { isDark, toggleTheme } = useTheme();\n  const [, setLocation] = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n\n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      rememberMe: false,\n    },\n  });\n\n  const getLoginConfig = (type: string) => {\n    const configs = {\n      admin: { title: 'Administrator Login', icon: 'fa-shield-alt' },\n      registry: { title: 'Registry Officer Login', icon: 'fa-user-tie' },\n      officer: { title: 'Officer Login', icon: 'fa-user' },\n    };\n    return configs[type as keyof typeof configs] || configs.officer;\n  };\n\n  const config = getLoginConfig(type);\n\n  const onSubmit = async (data: LoginFormData) => {\n    setIsLoading(true);\n    try {\n      await loginWithEmail(data.email, data.password);\n      toast({\n        title: \"Success\",\n        description: \"Login successful! Welcome to RMU System.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Login failed\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8 bg-gray-50 dark:bg-slate-900 transition-colors duration-200\">\n      {/* Theme Toggle Button */}\n      <button\n        onClick={toggleTheme}\n        className=\"fixed top-4 right-4 p-3 rounded-full bg-white dark:bg-gray-800 shadow-lg border border-gray-200 dark:border-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-all duration-200 z-50\"\n        aria-label=\"Toggle theme\"\n      >\n        {isDark ? (\n          <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z\" clipRule=\"evenodd\" />\n          </svg>\n        ) : (\n          <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path d=\"M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z\" />\n          </svg>\n        )}\n      </button>\n      \n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center\">\n          <a \n            href=\"/login-selection\"\n            className=\"mb-4 inline-flex items-center text-blue-600 hover:text-blue-700 transition-colors\"\n          >\n            <i className=\"fas fa-arrow-left mr-2\"></i>Back to Login Selection\n          </a>\n          <div className=\"mx-auto h-16 w-16 bg-blue-600 rounded-full flex items-center justify-center mb-4\">\n            <i className={`fas ${config.icon} text-white text-xl`}></i>\n          </div>\n          <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">{config.title}</h2>\n          <p className=\"mt-2 text-sm text-gray-600 dark:text-gray-400\">Enter your credentials to access the system</p>\n        </div>\n\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"mt-8 space-y-6\">\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"email\">Email Address</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                {...form.register(\"email\")}\n                className=\"mt-1\"\n                placeholder=\"Enter your email\"\n              />\n              {form.formState.errors.email && (\n                <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.email.message}</p>\n              )}\n            </div>\n            \n            <div>\n              <Label htmlFor=\"password\">Password</Label>\n              <div className=\"mt-1 relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  {...form.register(\"password\")}\n                  className=\"pr-10\"\n                  placeholder=\"Enter your password\"\n                />\n                <button \n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute inset-y-0 right-0 pr-3 flex items-center\"\n                >\n                  <i className={`fas ${showPassword ? 'fa-eye-slash' : 'fa-eye'} text-gray-400 hover:text-gray-600 dark:hover:text-gray-300`}></i>\n                </button>\n              </div>\n              {form.formState.errors.password && (\n                <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.password.message}</p>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox \n                id=\"remember-me\"\n                checked={form.watch(\"rememberMe\")}\n                onCheckedChange={(checked) => form.setValue(\"rememberMe\", !!checked)}\n              />\n              <Label htmlFor=\"remember-me\" className=\"text-sm\">Remember me</Label>\n            </div>\n            <div className=\"text-sm\">\n              <a href=\"#\" className=\"font-medium text-blue-600 hover:text-blue-700\">Forgot password?</a>\n            </div>\n          </div>\n\n          <div>\n            <Button \n              type=\"submit\" \n              className=\"w-full\"\n              disabled={isLoading}\n            >\n              {isLoading ? (\n                <>\n                  <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                  Signing In...\n                </>\n              ) : (\n                <>\n                  <i className=\"fas fa-lock mr-2\"></i>\n                  Sign In\n                </>\n              )}\n            </Button>\n          </div>\n\n          <div className=\"text-center\">\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Need an account? Contact your administrator for registration.\n            </p>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7420},"client/src/pages/LoginSelection.tsx":{"content":"import { useTheme } from \"@/contexts/ThemeContext\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useLocation } from \"wouter\";\nimport ChatBot from \"@/components/ChatBot\";\n\nexport default function LoginSelection() {\n  const { isDark, toggleTheme } = useTheme();\n  const { user, loading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-slate-900\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  if (user) {\n    setLocation(\"/dashboard\");\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8 bg-gray-50 dark:bg-slate-900 transition-colors duration-200\">\n      {/* Theme Toggle Button */}\n      <button\n        onClick={toggleTheme}\n        className=\"fixed top-4 right-4 p-3 rounded-full bg-gray-800 dark:bg-white shadow-lg border border-gray-800 dark:border-white text-white dark:text-gray-800 hover:bg-gray-700 dark:hover:bg-gray-100 transition-all duration-200 z-50\"\n        aria-label=\"Toggle theme\"\n      >\n        {isDark ? (\n          <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z\" clipRule=\"evenodd\" />\n          </svg>\n        ) : (\n          <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path d=\"M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z\" />\n          </svg>\n        )}\n      </button>\n      \n      <div className=\"max-w-md w-full space-y-8\">\n        {/* Header */}\n        <div className=\"text-center\">\n          <div className=\"mx-auto h-24 w-24 mb-6 flex items-center justify-center\">\n            <img \n              src=\"/Republic_of_kenya_logo.jpeg\" \n              alt=\"Republic of Kenya Logo\" \n              className=\"h-24 w-24 object-cover rounded-full border-4 border-blue-600 shadow-lg\"\n            />\n          </div>\n          <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white\">RMU Government System</h2>\n          <p className=\"mt-2 text-sm text-gray-600 dark:text-gray-400\">Department of Industry</p>\n        </div>\n\n        {/* Login Options */}\n        <div className=\"space-y-4\">\n          <a \n            href=\"/login/admin\"\n            className=\"group relative w-full flex justify-center py-4 px-4 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-600 transition-colors\"\n          >\n            <i className=\"fas fa-shield-alt mr-3\"></i>\n            Administrator Login\n          </a>\n          \n          <a \n            href=\"/login/registry\"\n            className=\"group relative w-full flex justify-center py-4 px-4 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-lg text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-600 transition-colors\"\n          >\n            <i className=\"fas fa-user-tie mr-3\"></i>\n            Registry Officer Login\n          </a>\n          \n          <a \n            href=\"/login/officer\"\n            className=\"group relative w-full flex justify-center py-4 px-4 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-lg text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-600 transition-colors\"\n          >\n            <i className=\"fas fa-user mr-3\"></i>\n            Officer Login\n          </a>\n        </div>\n      </div>\n      \n      <ChatBot />\n    </div>\n  );\n}\n","size_bytes":4333},"client/src/pages/UniversalLogin.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useTheme } from \"@/contexts/ThemeContext\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Sun, Moon, Eye, EyeOff, AlertCircle, CheckCircle } from \"lucide-react\";\nimport logoPath from \"@assets/Republic_of_kenya_logo.jpeg\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n  rememberMe: z.boolean().optional(),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nexport default function UniversalLogin() {\n  const [, setLocation] = useLocation();\n  const { isDark, toggleTheme } = useTheme();\n  const { toast } = useToast();\n  const [showPassword, setShowPassword] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      rememberMe: false,\n    },\n  });\n\n  const onSubmit = async (data: LoginFormData) => {\n    setError(\"\");\n    setIsLoading(true);\n\n    try {\n      const response = await fetch('/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: data.email,\n          password: data.password,\n        }),\n      });\n\n      const result = await response.json();\n\n      if (response.ok && result.success) {\n        localStorage.setItem('auth_token', result.token);\n        localStorage.setItem('token', result.token); // Store under 'token' for app auth\n        toast({\n          title: \"Login Successful\",\n          description: \"Welcome to the RMU System\",\n          duration: 3000,\n        });\n        // Use replace so /login is not in the history stack\n        window.location.replace('/dashboard');\n        return;\n      } else {\n        setError(result.message || 'Invalid credentials. Please try again.');\n      }\n    } catch (err) {\n      setError('Login failed. Please check your connection and try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Always redirect to welcome page on back navigation from login\n  useEffect(() => {\n    const handlePopState = () => {\n      if (window.location.pathname === '/login') {\n        window.location.replace('/');\n      }\n    };\n    window.history.pushState(null, '', window.location.href);\n    window.addEventListener('popstate', handlePopState);\n    return () => window.removeEventListener('popstate', handlePopState);\n  }, []);\n\n  // Prevent navigation to /login if already authenticated (any token)\n  useEffect(() => {\n    const hasToken = () =>\n      localStorage.getItem('authToken') ||\n      localStorage.getItem('auth_token') ||\n      localStorage.getItem('token');\n    if (hasToken()) {\n      window.location.replace('/dashboard');\n    }\n  }, []);\n\n  // Client-side redirect guard: if user is authenticated, redirect to dashboard\n  useEffect(() => {\n    const token = localStorage.getItem('auth_token');\n    if (!token) return;\n    fetch('/check-auth', {\n      headers: { 'Authorization': `Bearer ${token}` }\n    })\n      .then(res => res.json())\n      .then(data => {\n        if (data.authenticated) {\n          window.location.replace('/dashboard');\n        }\n      });\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50/30 to-slate-100 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900 flex items-center justify-center p-4 relative overflow-hidden\">\n      {/* Animated Background Elements */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        <div className=\"absolute -top-40 -right-40 w-80 h-80 bg-blue-200/20 dark:bg-blue-500/10 rounded-full blur-3xl animate-pulse\"></div>\n        <div className=\"absolute -bottom-40 -left-40 w-80 h-80 bg-blue-300/20 dark:bg-blue-600/10 rounded-full blur-3xl animate-pulse\" style={{ animationDelay: '2s' }}></div>\n      </div>\n      \n      {/* Theme Toggle */}\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        onClick={toggleTheme}\n        className={`fixed top-6 right-6 z-20 p-3 rounded-full \n          ${isDark ? 'bg-white hover:bg-slate-100' : 'bg-slate-900 hover:bg-slate-800'}\n          backdrop-blur-lg shadow-xl border border-white/20 dark:border-slate-700/20`}\n        aria-label={isDark ? \"Switch to light mode\" : \"Switch to dark mode\"}\n        title={isDark ? \"Switch to light mode\" : \"Switch to dark mode\"}\n      >\n        {isDark ? (\n          <Sun className=\"h-5 w-5 text-yellow-500\" />\n        ) : (\n          <Moon className=\"h-5 w-5 text-white\" />\n        )}\n      </Button>\n\n      <div className=\"w-full max-w-md relative z-10\">\n        {/* Elevated Login Card with Professional Styling */}\n        <Card className=\"shadow-2xl shadow-blue-500/20 dark:shadow-blue-500/10 border-0 bg-white/95 dark:bg-slate-900/95 backdrop-blur-xl relative overflow-hidden\">\n          {/* Subtle gradient overlay */}\n          <div className=\"absolute inset-0 bg-gradient-to-br from-blue-50/50 via-transparent to-blue-100/30 dark:from-slate-800/30 dark:via-transparent dark:to-slate-700/20\"></div>\n          \n          <CardHeader className=\"text-center pb-6 pt-8 relative z-10\">\n            <CardTitle className=\"text-2xl font-bold text-slate-900 dark:text-white mb-2 tracking-tight\">\n              Republic of Kenya\n            </CardTitle>\n            <CardTitle className=\"text-xl font-semibold bg-gradient-to-r from-blue-600 to-blue-700 bg-clip-text text-transparent mb-4\">\n              RMU System Login\n            </CardTitle>\n            <div className=\"w-16 h-0.5 bg-gradient-to-r from-blue-500 to-blue-600 mx-auto mt-3 mb-4 rounded-full\"></div>\n            <p className=\"text-sm text-slate-500 dark:text-slate-400\">\n              Enter your credentials to access the system\n            </p>\n          </CardHeader>\n\n          <CardContent className=\"space-y-6 px-8 pb-8 relative z-10\">\n            {error && (\n              <Alert variant=\"destructive\" className=\"border-red-200 dark:border-red-800 bg-red-50 dark:bg-red-950/20 backdrop-blur-sm\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription className=\"text-red-700 dark:text-red-400\">{error}</AlertDescription>\n              </Alert>\n            )}\n\n            <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-5\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\" className=\"text-slate-700 dark:text-slate-300 font-semibold text-sm\">\n                  Email Address\n                </Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"your.email@government.go.ke\"\n                  {...register(\"email\")}\n                  className={`h-12 bg-slate-50/50 dark:bg-slate-800/50 border-slate-200 dark:border-slate-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 rounded-lg backdrop-blur-sm transition-all duration-200 ${\n                    errors.email ? \"border-red-500 focus:border-red-500 focus:ring-red-500/20\" : \"\"\n                  }`}\n                />\n                {errors.email && (\n                  <p className=\"text-sm text-red-600 dark:text-red-400 flex items-center gap-1\">\n                    <AlertCircle className=\"h-3 w-3\" />\n                    {errors.email.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" className=\"text-slate-700 dark:text-slate-300 font-semibold text-sm\">\n                  Password\n                </Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    placeholder=\"Enter your password\"\n                    {...register(\"password\")}\n                    className={`h-12 bg-slate-50/50 dark:bg-slate-800/50 border-slate-200 dark:border-slate-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 rounded-lg backdrop-blur-sm transition-all duration-200 pr-12 ${\n                      errors.password ? \"border-red-500 focus:border-red-500 focus:ring-red-500/20\" : \"\"\n                    }`}\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0 hover:bg-slate-100 dark:hover:bg-slate-700 rounded-md\"\n                    onClick={() => setShowPassword(!showPassword)}\n                  >\n                    {showPassword ? (\n                      <EyeOff className=\"h-4 w-4 text-slate-400\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4 text-slate-400\" />\n                    )}\n                  </Button>\n                </div>\n                {errors.password && (\n                  <p className=\"text-sm text-red-600 dark:text-red-400 flex items-center gap-1\">\n                    <AlertCircle className=\"h-3 w-3\" />\n                    {errors.password.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"flex items-center justify-between py-2\">\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox \n                    id=\"rememberMe\" \n                    {...register(\"rememberMe\")} \n                    className=\"border-slate-300 dark:border-slate-600 data-[state=checked]:bg-blue-600 data-[state=checked]:border-blue-600\"\n                  />\n                  <Label\n                    htmlFor=\"rememberMe\"\n                    className=\"text-sm text-slate-600 dark:text-slate-400 cursor-pointer font-medium\"\n                  >\n                    Remember me\n                  </Label>\n                </div>\n                <Button\n                  type=\"button\"\n                  variant=\"link\"\n                  className=\"text-sm text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 p-0 font-medium\"\n                >\n                  Forgot password?\n                </Button>\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full h-12 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-semibold rounded-lg shadow-lg shadow-blue-500/25 hover:shadow-xl hover:shadow-blue-500/30 transition-all duration-300 transform hover:scale-[1.02] active:scale-[0.98] disabled:opacity-50 disabled:cursor-not-allowed\"\n                disabled={isLoading}\n              >\n                {isLoading ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\"></div>\n                    Signing In...\n                  </div>\n                ) : (\n                  \"Sign In\"\n                )}\n              </Button>\n            </form>\n\n            <div className=\"text-center pt-4 border-t border-slate-200/50 dark:border-slate-700/50\">\n              <p className=\"text-sm text-slate-500 dark:text-slate-400 font-medium\">\n                Need an account? <span className=\"text-blue-600 dark:text-blue-400 font-semibold\">Contact your system administrator.</span>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":12161},"client/src/pages/Welcome.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FileText, Shield, Users, Archive, Search, Clock, ArrowRight, CheckCircle } from \"lucide-react\";\nimport logoPath from \"@assets/Republic_of_kenya_logo.jpeg\";\nimport { useTheme } from \"@/contexts/ThemeContext\";\n\nexport default function Welcome() {\n  const [, navigate] = useLocation();\n  const { isDark, toggleTheme } = useTheme();\n\n  const features = [\n    {\n      icon: FileText,\n      title: \"Document Management\",\n      description: \"Secure digital filing system for all government correspondence and official documents\"\n    },\n    {\n      icon: Shield,\n      title: \"Role-Based Security\",\n      description: \"Multi-level access control ensuring document confidentiality and proper authorization\"\n    },\n    {\n      icon: Users,\n      title: \"Workflow Automation\",\n      description: \"Streamlined routing from Registry through Principal Secretary to Department Officers\"\n    },\n    {\n      icon: Archive,\n      title: \"Digital Archive\",\n      description: \"Comprehensive records retention with automated archiving and retrieval systems\"\n    },\n    {\n      icon: Search,\n      title: \"Advanced Search\",\n      description: \"Powerful search capabilities to locate documents quickly using multiple criteria\"\n    },\n    {\n      icon: Clock,\n      title: \"Real-time Tracking\",\n      description: \"Monitor document status and processing times with complete audit trails\"\n    }\n  ];\n\n  const benefits = [\n    \"Eliminates paper-based inefficiencies\",\n    \"Ensures government compliance standards\",\n    \"Reduces processing time by 70%\",\n    \"Provides complete audit transparency\",\n    \"Secure cloud-based accessibility\",\n    \"24/7 system availability\"\n  ];\n\n  const workflow_steps = [\n    { step: 1, title: \"Document Submission\", desc: \"Registry receives and categorizes incoming documents\" },\n    { step: 2, title: \"PS Review\", desc: \"Principal Secretary reviews and approves routing decisions\" },\n    { step: 3, title: \"Department Processing\", desc: \"Relevant departments handle document processing\" },\n    { step: 4, title: \"Response & Archive\", desc: \"Completed documents are responded to and archived\" }\n  ];\n\n  useEffect(() => {\n    const handlePopState = () => {\n      if (window.location.pathname === '/') {\n        navigate('/login');\n      }\n    };\n    window.addEventListener('popstate', handlePopState);\n    return () => window.removeEventListener('popstate', handlePopState);\n  }, []);\n\n  // Prevent navigation to /login or / from Welcome if already authenticated (any token)\n  useEffect(() => {\n    const hasToken = () =>\n      localStorage.getItem('authToken') ||\n      localStorage.getItem('auth_token') ||\n      localStorage.getItem('token');\n    if (hasToken()) {\n      window.location.replace('/dashboard');\n    }\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-blue-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\">\n      {/* Theme Toggle Button */}\n      <button\n        onClick={toggleTheme}\n        className={`fixed top-4 right-4 p-3 rounded-full \n          ${isDark ? 'bg-white hover:bg-slate-100' : 'bg-slate-900 hover:bg-slate-800'}\n          shadow-lg border border-gray-200 dark:border-gray-700 transition-all duration-200 z-50`}\n        aria-label={isDark ? \"Switch to light mode\" : \"Switch to dark mode\"}\n        title={isDark ? \"Switch to light mode\" : \"Switch to dark mode\"}\n      >\n        {isDark ? (\n          <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" viewBox=\"0 0 24 24\">\n            <circle cx=\"12\" cy=\"12\" r=\"5\" fill=\"#facc15\" />\n            <g stroke=\"#facc15\">\n              <line x1=\"12\" y1=\"1\" x2=\"12\" y2=\"3\" />\n              <line x1=\"12\" y1=\"21\" x2=\"12\" y2=\"23\" />\n              <line x1=\"4.22\" y1=\"4.22\" x2=\"5.64\" y2=\"5.64\" />\n              <line x1=\"18.36\" y1=\"18.36\" x2=\"19.78\" y2=\"19.78\" />\n              <line x1=\"1\" y1=\"12\" x2=\"3\" y2=\"12\" />\n              <line x1=\"21\" y1=\"12\" x2=\"23\" y2=\"12\" />\n              <line x1=\"4.22\" y1=\"19.78\" x2=\"5.64\" y2=\"18.36\" />\n              <line x1=\"18.36\" y1=\"5.64\" x2=\"19.78\" y2=\"4.22\" />\n            </g>\n          </svg>\n        ) : (\n          <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" viewBox=\"0 0 24 24\">\n            <path d=\"M21 12.79A9 9 0 1111.21 3a7 7 0 109.79 9.79z\" fill=\"#fff\" stroke=\"#fff\" />\n          </svg>\n        )}\n      </button>\n      {/* Header */}\n      <header className=\"relative z-10 bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-20\">\n            <div className=\"flex items-center space-x-4\">\n              <img \n                src={logoPath} \n                alt=\"Republic of Kenya Logo\" \n                className=\"h-12 w-12 rounded-full shadow-lg ring-2 ring-blue-500/20\"\n              />\n              <div>\n                <h1 className=\"text-xl font-bold text-gray-900 dark:text-white\">\n                  Records Management Unit\n                </h1>\n                <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                  State Department of Industry\n                </p>\n              </div>\n            </div>\n            <Button \n              onClick={() => navigate(\"/login\")}\n              className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg shadow-lg transition-all duration-200 hover:scale-105\"\n            >\n              Access System\n              <ArrowRight className=\"ml-2 h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-blue-600/10 to-indigo-600/10 dark:from-blue-900/20 dark:to-indigo-900/20\"></div>\n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <Badge variant=\"secondary\" className=\"mb-4 px-4 py-2 text-sm font-medium\">\n              Government Digital Transformation Initiative\n            </Badge>\n            <h1 className=\"text-4xl md:text-6xl font-bold text-gray-900 dark:text-white mb-6 leading-tight\">\n              Modern Digital\n              <span className=\"block text-blue-600 dark:text-blue-400\">Records Management</span>\n            </h1>\n            <p className=\"text-xl text-gray-600 dark:text-gray-300 mb-8 max-w-3xl mx-auto leading-relaxed\">\n              Transforming government operations through secure, efficient, and transparent \n              document management for the State Department of Industry.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button \n                onClick={() => navigate(\"/login\")}\n                size=\"lg\"\n                className=\"bg-blue-600 hover:bg-blue-700 text-white px-8 py-4 text-lg shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105\"\n              >\n                Login to System\n                <ArrowRight className=\"ml-2 h-5 w-5\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Grid */}\n      <section className=\"py-20 bg-white dark:bg-gray-800\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4\">\n              Comprehensive Digital Solutions\n            </h2>\n            <p className=\"text-lg text-gray-600 dark:text-gray-300 max-w-2xl mx-auto\">\n              Built specifically for government operations with enterprise-grade security and compliance.\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <Card key={index} className=\"group hover:shadow-xl transition-all duration-300 hover:-translate-y-2 border-0 shadow-lg\">\n                <CardHeader className=\"pb-4\">\n                  <div className=\"w-12 h-12 bg-blue-100 dark:bg-blue-900/30 rounded-lg flex items-center justify-center mb-4 group-hover:bg-blue-600 transition-colors duration-300\">\n                    <feature.icon className=\"h-6 w-6 text-blue-600 dark:text-blue-400 group-hover:text-white\" />\n                  </div>\n                  <CardTitle className=\"text-xl font-semibold text-gray-900 dark:text-white\">\n                    {feature.title}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <CardDescription className=\"text-gray-600 dark:text-gray-300 leading-relaxed\">\n                    {feature.description}\n                  </CardDescription>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Workflow Section */}\n      <section className=\"py-20 bg-gray-50 dark:bg-gray-900\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4\">\n              Streamlined Government Workflow\n            </h2>\n            <p className=\"text-lg text-gray-600 dark:text-gray-300 max-w-2xl mx-auto\">\n              From document receipt to final archiving, our system ensures efficient processing at every step.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {workflow_steps.map((item, index) => (\n              <div key={index} className=\"relative\">\n                <div className=\"flex flex-col items-center text-center\">\n                  <div className=\"w-16 h-16 bg-blue-600 text-white rounded-full flex items-center justify-center text-xl font-bold mb-4 shadow-lg\">\n                    {item.step}\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n                    {item.title}\n                  </h3>\n                  <p className=\"text-gray-600 dark:text-gray-300 text-sm leading-relaxed\">\n                    {item.desc}\n                  </p>\n                </div>\n                {index < workflow_steps.length - 1 && (\n                  <div className=\"hidden lg:block absolute top-8 left-full w-full h-0.5 bg-gray-300 dark:bg-gray-600 -translate-x-8\"></div>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Benefits Section */}\n      <section className=\"py-20 bg-white dark:bg-gray-800\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-6\">\n                Why Choose Our RMU System?\n              </h2>\n              <p className=\"text-lg text-gray-600 dark:text-gray-300 mb-8 leading-relaxed\">\n                Designed by government technology experts, our system addresses the unique challenges \n                of public sector document management while ensuring complete transparency and accountability.\n              </p>\n              <div className=\"space-y-4\">\n                {benefits.map((benefit, index) => (\n                  <div key={index} className=\"flex items-center space-x-3\">\n                    <CheckCircle className=\"h-5 w-5 text-green-500 flex-shrink-0\" />\n                    <span className=\"text-gray-700 dark:text-gray-300\">{benefit}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n            <div className=\"relative\">\n              <div className=\"bg-gradient-to-br from-blue-100 to-indigo-100 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-2xl p-8 shadow-2xl\">\n                <div className=\"text-center\">\n                  <div className=\"inline-flex items-center justify-center w-20 h-20 bg-blue-600 text-white rounded-full mb-6 shadow-lg\">\n                    <Shield className=\"h-10 w-10\" />\n                  </div>\n                  <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-4\">\n                    Secure & Compliant\n                  </h3>\n                  <p className=\"text-gray-600 dark:text-gray-300 leading-relaxed\">\n                    Built with government-grade security standards and full compliance \n                    with Kenya's digital governance requirements.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-gradient-to-r from-blue-600 to-indigo-700\">\n        <div className=\"max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-white mb-6\">\n            Ready to Transform Your Workflow?\n          </h2>\n          <p className=\"text-xl text-blue-100 mb-8 max-w-2xl mx-auto leading-relaxed\">\n            Join the digital transformation of government operations. \n            Access your secure dashboard and start managing documents efficiently.\n          </p>\n          <Button \n            onClick={() => navigate(\"/login\")}\n            size=\"lg\"\n            variant=\"secondary\"\n            className=\"bg-white text-blue-600 hover:bg-gray-100 px-8 py-4 text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105\"\n          >\n            Access RMU System\n            <ArrowRight className=\"ml-2 h-5 w-5\" />\n          </Button>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 dark:bg-black py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <div className=\"flex items-center space-x-4 mb-4 md:mb-0\">\n              <img \n                src={logoPath} \n                alt=\"Republic of Kenya Logo\" \n                className=\"h-10 w-10 rounded-full\"\n              />\n              <div>\n                <p className=\"text-white font-semibold\">Records Management Unit</p>\n                <p className=\"text-gray-400 text-sm\">State Department of Industry</p>\n              </div>\n            </div>\n            <div className=\"text-center md:text-right\">\n              <p className=\"text-gray-400 text-sm\">\n                © 2025 Government of Kenya. All rights reserved.\n              </p>\n              <p className=\"text-gray-500 text-xs mt-1\">\n                Secure Digital Government Solutions\n              </p>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":15168},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/modals/CreateFolderModal.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { createFolderFormSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, handleApiError } from \"@/lib/queryClient\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport React, { useState } from \"react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { AlertCircle, Loader2 } from \"lucide-react\";\n\ninterface CreateFolderModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\ntype CreateFolderFormData = z.infer<typeof createFolderFormSchema>;\n\nexport default function CreateFolderModal({ open, onOpenChange }: CreateFolderModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [submitDebug, setSubmitDebug] = useState<string>(\"\");\n  const [error, setError] = useState<string>(\"\");\n\n  const form = useForm<CreateFolderFormData>({\n    resolver: zodResolver(createFolderFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      department: \"Industry Department\", // always default\n    },\n  });\n\n  const createFolderMutation = useMutation({\n    mutationFn: async (data: CreateFolderFormData) => {\n      setSubmitDebug(\"Submitting: \" + JSON.stringify(data));\n      setError(\"\"); // Clear previous errors\n      const response = await apiRequest(\"POST\", \"/api/folders\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Folder created successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/folders\"] });\n      onOpenChange(false);\n      form.reset();\n      setSubmitDebug(\"Success: Folder created\");\n      setError(\"\");\n    },\n    onError: (error: unknown) => {\n      const errorMessage = handleApiError(error);\n      setError(errorMessage);\n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n      setSubmitDebug(\"Error: \" + errorMessage);\n    },\n  });\n\n  const onSubmit = (data: CreateFolderFormData) => {\n    setSubmitDebug(\"onSubmit called: \" + JSON.stringify(data));\n    createFolderMutation.mutate({ ...data, department: \"Industry Department\" }); // always submit as Industry Department\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Create New Folder</DialogTitle>\n        </DialogHeader>\n        \n        {error && (\n          <Alert variant=\"destructive\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n        \n        {/* Debug info - only show in development */}\n        {process.env.NODE_ENV === 'development' && (\n          <div className=\"mb-2 p-2 bg-yellow-100 text-yellow-800 rounded text-xs\">\n            <div>Form State: {JSON.stringify(form.getValues())}</div>\n            <div>Errors: {JSON.stringify(form.formState.errors)}</div>\n            <div>{submitDebug}</div>\n          </div>\n        )}\n        \n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"name\">Folder Name *</Label>\n            <Input\n              id=\"name\"\n              {...form.register(\"name\")}\n              className=\"mt-1\"\n              placeholder=\"Enter folder name\"\n              disabled={createFolderMutation.isPending}\n            />\n            {form.formState.errors.name && (\n              <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.name.message}</p>\n            )}\n          </div>\n          \n          <div style={{ display: 'none' }}>\n            {/* Hide department field, but keep it in the form for backend compatibility */}\n            <Input id=\"department\" value=\"Industry Department\" readOnly {...form.register(\"department\")}/>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"description\">Description (Optional)</Label>\n            <Textarea\n              id=\"description\"\n              {...form.register(\"description\")}\n              className=\"mt-1\"\n              placeholder=\"Describe the purpose of this folder\"\n              rows={3}\n              disabled={createFolderMutation.isPending}\n            />\n            {form.formState.errors.description && (\n              <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.description.message}</p>\n            )}\n          </div>\n          \n          <Button \n            type=\"submit\" \n            className=\"w-full\" \n            disabled={createFolderMutation.isPending}\n          >\n            {createFolderMutation.isPending ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Creating...\n              </>\n            ) : (\n              \"Create Folder\"\n            )}\n          </Button>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5463},"client/src/components/modals/CreateRoutingRuleModal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { X, Plus, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface CreateRoutingRuleModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nconst createRoutingRuleFormSchema = z.object({\n  name: z.string().min(1, \"Rule name is required\"),\n  department: z.string().min(1, \"Department is required\"),\n  targetDepartment: z.string().min(1, \"Target department is required\"),\n  priority: z.number().min(0).max(10).default(5),\n  description: z.string().optional(),\n  conditions: z.object({\n    title: z.string().optional(),\n    reference: z.string().optional(),\n    keywords: z.array(z.string()).optional(),\n    status: z.string().optional(),\n  }),\n});\n\ntype CreateRoutingRuleFormData = z.infer<typeof createRoutingRuleFormSchema>;\n\nconst departments = [\n  \"Administration\",\n  \"Finance\",\n  \"Human Resources\",\n  \"Legal\",\n  \"Operations\",\n  \"Planning\",\n  \"ICT\",\n  \"Procurement\",\n  \"Audit\",\n  \"Registry\"\n];\n\nconst documentStatuses = [\n  \"draft\",\n  \"pending\",\n  \"verified\",\n  \"active\",\n  \"archived\"\n];\n\nexport default function CreateRoutingRuleModal({ open, onOpenChange }: CreateRoutingRuleModalProps) {\n  const [keywords, setKeywords] = useState<string[]>([]);\n  const [newKeyword, setNewKeyword] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<CreateRoutingRuleFormData>({\n    resolver: zodResolver(createRoutingRuleFormSchema),\n    defaultValues: {\n      name: \"\",\n      department: \"\",\n      targetDepartment: \"\",\n      priority: 5,\n      description: \"\",\n      conditions: {\n        title: \"\",\n        reference: \"\",\n        keywords: [],\n        status: \"\",\n      },\n    },\n  });\n\n  const createRuleMutation = useMutation({\n    mutationFn: async (data: CreateRoutingRuleFormData) => {\n      const payload = {\n        ...data,\n        conditions: {\n          ...data.conditions,\n          keywords,\n        },\n      };\n      return apiRequest(\"POST\", \"/api/routing-rules\", payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/routing-rules'] });\n      toast({\n        title: \"Success\",\n        description: \"Routing rule created successfully.\",\n      });\n      onOpenChange(false);\n      form.reset();\n      setKeywords([]);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CreateRoutingRuleFormData) => {\n    createRuleMutation.mutate(data);\n  };\n\n  const addKeyword = () => {\n    if (newKeyword.trim() && !keywords.includes(newKeyword.trim())) {\n      setKeywords([...keywords, newKeyword.trim()]);\n      setNewKeyword(\"\");\n    }\n  };\n\n  const removeKeyword = (index: number) => {\n    setKeywords(keywords.filter((_, i) => i !== index));\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Create Routing Rule</DialogTitle>\n          <DialogDescription>\n            Configure automatic document routing based on conditions and department rules.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Basic Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium\">Basic Information</h3>\n              \n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Rule Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"e.g., Contract Documents to Legal\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"department\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Source Department</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select department\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {departments.map((dept) => (\n                            <SelectItem key={dept} value={dept}>\n                              {dept}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"targetDepartment\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Target Department</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select target department\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {departments.map((dept) => (\n                            <SelectItem key={dept} value={dept}>\n                              {dept}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"priority\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Priority (0-10)</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        min=\"0\" \n                        max=\"10\" \n                        {...field} \n                        onChange={(e) => field.onChange(parseInt(e.target.value))}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description (Optional)</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Describe when this rule should be applied...\"\n                        className=\"min-h-[80px]\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Routing Conditions */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium\">Routing Conditions</h3>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Documents will be routed when they match these conditions. Leave empty to match all documents.\n              </p>\n\n              <FormField\n                control={form.control}\n                name=\"conditions.title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Title Contains</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"e.g., Contract, Agreement, Invoice\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"conditions.reference\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Reference Contains</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"e.g., LEG, FIN, ADM\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"conditions.status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Document Status</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select status (optional)\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"\">Any Status</SelectItem>\n                        {documentStatuses.map((status) => (\n                          <SelectItem key={status} value={status}>\n                            {status.charAt(0).toUpperCase() + status.slice(1)}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Keywords */}\n              <div className=\"space-y-2\">\n                <Label>Content Keywords</Label>\n                <div className=\"flex gap-2\">\n                  <Input\n                    placeholder=\"Add keyword\"\n                    value={newKeyword}\n                    onChange={(e) => setNewKeyword(e.target.value)}\n                    onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addKeyword())}\n                  />\n                  <Button type=\"button\" onClick={addKeyword} variant=\"outline\">\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                {keywords.length > 0 && (\n                  <div className=\"flex flex-wrap gap-2 mt-2\">\n                    {keywords.map((keyword, index) => (\n                      <div key={index} className=\"flex items-center gap-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded text-sm\">\n                        {keyword}\n                        <button\n                          type=\"button\"\n                          onClick={() => removeKeyword(index)}\n                          className=\"hover:text-red-600\"\n                        >\n                          <X className=\"h-3 w-3\" />\n                        </button>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Form Actions */}\n            <div className=\"flex justify-end space-x-3 pt-4 border-t\">\n              <Button type=\"button\" variant=\"outline\" onClick={() => onOpenChange(false)}>\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={createRuleMutation.isPending}>\n                {createRuleMutation.isPending ? \"Creating...\" : \"Create Rule\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":12644},"client/src/components/modals/CreateUserModal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { createUserFormSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\n\ninterface CreateUserModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\ntype CreateUserFormData = z.infer<typeof createUserFormSchema>;\n\nexport default function CreateUserModal({ open, onOpenChange }: CreateUserModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const form = useForm<CreateUserFormData>({\n    resolver: zodResolver(createUserFormSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      role: \"officer\",\n      department: \"\",\n      position: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: async (data: CreateUserFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/users\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"✅ User Created Successfully!\",\n        description: `User has been registered and added to the system.`,\n        duration: 5000,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      onOpenChange(false);\n      form.reset();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"❌ User Creation Failed\",\n        description: error.message,\n        variant: \"destructive\",\n        duration: 5000,\n      });\n    },\n  });\n\n  const onSubmit = (data: CreateUserFormData) => {\n    createUserMutation.mutate(data);\n  };\n\n  const departments = [\n    \"Industry Department\",\n    \"Policy & Regulations\",\n    \"Budget & Finance\",\n    \"Administration\",\n    \"Legal Affairs\",\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Create New User</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"name\">Full Name</Label>\n            <Input\n              id=\"name\"\n              {...form.register(\"name\")}\n              className=\"mt-1\"\n            />\n            {form.formState.errors.name && (\n              <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.name.message}</p>\n            )}\n          </div>\n          \n          <div>\n            <Label htmlFor=\"email\">Email Address</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              {...form.register(\"email\")}\n              className=\"mt-1\"\n            />\n            {form.formState.errors.email && (\n              <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.email.message}</p>\n            )}\n          </div>\n          \n          <div>\n            <Label htmlFor=\"role\">Role</Label>\n            <Select \n              value={form.watch(\"role\")} \n              onValueChange={(value) => form.setValue(\"role\", value as \"admin\" | \"registry\" | \"officer\")}\n            >\n              <SelectTrigger className=\"mt-1\">\n                <SelectValue placeholder=\"Select role\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"registry\">Registry Officer</SelectItem>\n                <SelectItem value=\"officer\">Officer</SelectItem>\n                <SelectItem value=\"admin\">Administrator</SelectItem>\n              </SelectContent>\n            </Select>\n            {form.formState.errors.role && (\n              <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.role.message}</p>\n            )}\n          </div>\n          \n          <div>\n            <Label htmlFor=\"department\">Department</Label>\n            <Select \n              value={form.watch(\"department\")} \n              onValueChange={(value) => form.setValue(\"department\", value)}\n            >\n              <SelectTrigger className=\"mt-1\">\n                <SelectValue placeholder=\"Select department\" />\n              </SelectTrigger>\n              <SelectContent>\n                {departments.map((dept) => (\n                  <SelectItem key={dept} value={dept}>{dept}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {form.formState.errors.department && (\n              <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.department.message}</p>\n            )}\n          </div>\n          \n          <div>\n            <Label htmlFor=\"position\">Position (Optional)</Label>\n            <Input\n              id=\"position\"\n              {...form.register(\"position\")}\n              className=\"mt-1\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"confirmPassword\">Temporary Password</Label>\n            <Input\n              id=\"confirmPassword\"\n              type=\"password\"\n              {...form.register(\"confirmPassword\")}\n              className=\"mt-1\"\n            />\n            {form.formState.errors.confirmPassword && (\n              <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.confirmPassword.message}</p>\n            )}\n          </div>\n          \n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={() => onOpenChange(false)}\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={createUserMutation.isPending}\n            >\n              {createUserMutation.isPending ? \"Creating...\" : \"Create User\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6284},"client/src/components/modals/RegisterUserModal.tsx":{"content":"import React, { useState } from 'react';\nimport { useToast } from '@/hooks/use-toast';\nimport { useQueryClient } from '@tanstack/react-query';\n\nconst DEPARTMENTS = [\n  'ICT', 'Legal', 'Finance', 'Registry', 'Administration', 'Mining', 'Chemicals', 'Geology', 'Petroleum', 'Energy', 'Water', 'Environment', 'Lands', 'Human Resources', 'Procurement', 'Planning'\n];\n\nconst ROLES = [\n  { value: 'admin', label: 'Admin' },\n  { value: 'officer', label: 'Officer' },\n  { value: 'secretary', label: 'Secretary' }\n];\n\nconst getPosition = (department: string, role: string) => {\n  if (!department || !role) return '';\n  if (role === 'admin') return `${department} Admin`;\n  if (role === 'officer') return `${department} Officer`;\n  if (role === 'secretary') return `${department} Secretary`;\n  return '';\n};\n\nexport default function RegisterUserModal({ open, onClose }: { open: boolean, onClose: () => void }) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [form, setForm] = useState({\n    name: '',\n    email: '',\n    department: '',\n    role: '',\n    accessLevel: '',\n    password: '',\n    confirmPassword: ''\n  });\n  const [error, setError] = useState('');\n\n  // Set default access level based on role\n  React.useEffect(() => {\n    if (form.role === 'admin') {\n      setForm(f => ({ ...f, accessLevel: f.accessLevel === '0' ? '0' : '1' }));\n    } else if (form.role === 'officer' || form.role === 'secretary') {\n      setForm(f => ({ ...f, accessLevel: '2' }));\n    } else {\n      setForm(f => ({ ...f, accessLevel: '' }));\n    }\n  }, [form.role]);\n\n  const position = getPosition(form.department, form.role);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    setForm({ ...form, [e.target.name]: e.target.value });\n    setError('');\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!form.name || !form.email || !form.department || !form.role || !form.accessLevel || !form.password || !form.confirmPassword) {\n      setError('All fields are required.');\n      return;\n    }\n    if (form.password !== form.confirmPassword) {\n      setError('Passwords do not match.');\n      return;\n    }\n    try {\n      const token = localStorage.getItem('auth_token');\n      const res = await fetch('/api/users', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...(token ? { Authorization: `Bearer ${token}` } : {})\n        },\n        body: JSON.stringify({\n          name: form.name,\n          email: form.email,\n          department: form.department,\n          role: form.role,\n          position: getPosition(form.department, form.role),\n          level: Number(form.accessLevel),\n          password: form.password\n        })\n      });\n      const data = await res.json();\n      if (!res.ok) throw new Error(data.message || 'Failed to create user');\n      \n      // Show success notification\n      toast({\n        title: \"✅ User Created Successfully!\",\n        description: `${form.name} has been registered and added to the system.`,\n        duration: 5000,\n      });\n      \n      // Refresh the users list\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      \n      // Reset form and close modal\n      setForm({\n        name: '',\n        email: '',\n        department: '',\n        role: '',\n        accessLevel: '',\n        password: '',\n        confirmPassword: ''\n      });\n      onClose();\n    } catch (err: any) {\n      const errorMessage = err.message || 'Failed to create user';\n      setError(errorMessage);\n      \n      // Show error notification\n      toast({\n        title: \"❌ User Creation Failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n        duration: 5000,\n      });\n    }\n  };\n\n  if (!open) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n      <div className=\"absolute inset-0 bg-black/60 dark:bg-black/80 transition-colors duration-200\" />\n      <div className=\"relative bg-white dark:bg-gray-900 rounded-lg shadow-lg w-full max-w-md p-6 border border-gray-200 dark:border-gray-700\">\n        <button className=\"absolute top-2 right-2 text-gray-500 dark:text-gray-300 hover:text-gray-700 dark:hover:text-white text-2xl\" onClick={onClose}>&times;</button>\n        <h2 className=\"text-xl font-bold mb-4 text-gray-900 dark:text-white\">Register New User</h2>\n        <form onSubmit={handleSubmit} className=\"space-y-3\">\n          <input name=\"name\" value={form.name} onChange={handleChange} placeholder=\"Full Name\" className=\"w-full border rounded px-3 py-2 bg-white dark:bg-gray-800 text-gray-900 dark:text-white\" required />\n          <input name=\"email\" value={form.email} onChange={handleChange} placeholder=\"Email Address\" type=\"email\" className=\"w-full border rounded px-3 py-2 bg-white dark:bg-gray-800 text-gray-900 dark:text-white\" required />\n          <select name=\"department\" value={form.department} onChange={handleChange} className=\"w-full border rounded px-3 py-2 bg-white dark:bg-gray-800 text-gray-900 dark:text-white\" required>\n            <option value=\"\">Select Department</option>\n            {DEPARTMENTS.map(dep => <option key={dep} value={dep}>{dep}</option>)}\n          </select>\n          <select name=\"role\" value={form.role} onChange={handleChange} className=\"w-full border rounded px-3 py-2 bg-white dark:bg-gray-800 text-gray-900 dark:text-white\" required>\n            <option value=\"\">Select Role</option>\n            {ROLES.map(role => <option key={role.value} value={role.value}>{role.label}</option>)}\n          </select>\n          {/* Access Level Dropdown */}\n          {form.role === 'admin' && (\n            <select name=\"accessLevel\" value={form.accessLevel} onChange={handleChange} className=\"w-full border rounded px-3 py-2 bg-white dark:bg-gray-800 text-gray-900 dark:text-white\" required>\n              <option value=\"1\">Level 1 (Department Admin)</option>\n              <option value=\"0\">Level 0 (System Admin)</option>\n            </select>\n          )}\n          {(form.role === 'officer' || form.role === 'secretary') && (\n            <input name=\"accessLevel\" value=\"2\" readOnly className=\"w-full border rounded px-3 py-2 bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white\" placeholder=\"Access Level\" />\n          )}\n          <input name=\"position\" value={position} readOnly className=\"w-full border rounded px-3 py-2 bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white\" placeholder=\"Position\" />\n          <input name=\"password\" value={form.password} onChange={handleChange} placeholder=\"Password\" type=\"password\" className=\"w-full border rounded px-3 py-2 bg-white dark:bg-gray-800 text-gray-900 dark:text-white\" required />\n          <input name=\"confirmPassword\" value={form.confirmPassword} onChange={handleChange} placeholder=\"Confirm Password\" type=\"password\" className=\"w-full border rounded px-3 py-2 bg-white dark:bg-gray-800 text-gray-900 dark:text-white\" required />\n          {error && <div className=\"text-red-600 dark:text-red-400 text-sm\">{error}</div>}\n          <button type=\"submit\" className=\"w-full bg-blue-600 hover:bg-blue-700 dark:bg-blue-700 dark:hover:bg-blue-800 text-white py-2 rounded font-semibold transition\">Register</button>\n        </form>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7344},"client/src/components/modals/UploadLetterModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { uploadLetterFormSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\ninterface UploadLetterModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  folderId?: string;\n  onSuccess?: () => void; // Add onSuccess prop\n}\n\ntype UploadLetterFormData = z.infer<typeof uploadLetterFormSchema>;\n\nexport default function UploadLetterModal({ open, onOpenChange, folderId, onSuccess }: UploadLetterModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  \n  const form = useForm<UploadLetterFormData>({\n    resolver: zodResolver(uploadLetterFormSchema),\n    defaultValues: {\n      title: \"\",\n      reference: \"\",\n      content: \"\",\n      folderId: folderId ? parseInt(folderId) : 0,\n    },\n  });\n\n  // If folderId changes, update form value\n  useEffect(() => {\n    if (folderId) form.setValue(\"folderId\", parseInt(folderId));\n  }, [folderId]);\n\n  const { data: folders } = useQuery({\n    queryKey: [\"/api/folders\"],\n  });\n\n  const uploadLetterMutation = useMutation({\n    mutationFn: async (data: UploadLetterFormData) => {\n      const formData = new FormData();\n      Object.entries(data).forEach(([key, value]) => {\n        if (value !== null && value !== undefined) {\n          formData.append(key, value.toString());\n        }\n      });\n      if (selectedFile) {\n        formData.append(\"file\", selectedFile);\n      }\n      const token = localStorage.getItem('auth_token');\n      const response = await fetch(\"/api/letters/upload\", {\n        method: \"POST\",\n        body: formData,\n        credentials: \"include\",\n        headers: {\n          ...(token && { Authorization: `Bearer ${token}` }),\n        },\n      });\n      const result = await response.json();\n      if (!response.ok || !result.success) {\n        throw new Error(result.message || \"Failed to upload letter\");\n      }\n      return result.letter;\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Success\",\n        description: \"Letter uploaded successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/letters\"] });\n      form.reset();\n      setSelectedFile(null);\n      onOpenChange(false); // Close the modal\n      if (onSuccess) onSuccess(); // Call the onSuccess callback\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: UploadLetterFormData) => {\n    if (!selectedFile) {\n      toast({\n        title: \"File Required\",\n        description: \"Please attach a PDF or Word document before uploading.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    uploadLetterMutation.mutate(data);\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setSelectedFile(file);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[525px]\">\n        <DialogHeader>\n          <DialogTitle>Upload Letter</DialogTitle>\n          <DialogDescription>\n            Upload a PDF or Word document letter to the selected folder.\n          </DialogDescription>\n        </DialogHeader>\n        <form \n          onSubmit={form.handleSubmit(onSubmit, (errors) => { console.log('DEBUG: validation errors', errors); })} \n          className=\"space-y-4\"\n        >\n          <div>\n            <Label htmlFor=\"title\">Letter Title</Label>\n            <Input\n              id=\"title\"\n              {...form.register(\"title\")}\n              className=\"mt-1\"\n              placeholder=\"Enter letter title\"\n            />\n            {form.formState.errors.title && (\n              <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.title.message}</p>\n            )}\n          </div>\n          \n          <div>\n            <Label htmlFor=\"reference\">Reference Number</Label>\n            <Input\n              id=\"reference\"\n              {...form.register(\"reference\")}\n              className=\"mt-1\"\n              placeholder=\"e.g., IND-2024-001\"\n            />\n            {form.formState.errors.reference && (\n              <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.reference.message}</p>\n            )}\n          </div>\n          \n          <div>\n            <Label htmlFor=\"folderId\">Folder</Label>\n            {folderId ? (\n              <Input\n                id=\"folderId\"\n                value={folders?.find((f: any) => f.id === parseInt(folderId))?.name || ''}\n                disabled\n                className=\"mt-1\"\n              />\n            ) : (\n              <Select \n                value={form.watch(\"folderId\").toString()} \n                onValueChange={(value) => form.setValue(\"folderId\", parseInt(value))}\n              >\n                <SelectTrigger className=\"mt-1\">\n                  <SelectValue placeholder=\"Select folder\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {folders?.map((folder: any) => (\n                    <SelectItem key={folder.id} value={folder.id.toString()}>\n                      {folder.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            )}\n            {form.formState.errors.folderId && (\n              <p className=\"text-sm text-red-600 mt-1\">{form.formState.errors.folderId.message}</p>\n            )}\n          </div>\n          \n          <div>\n            <Label htmlFor=\"content\">Content/Description</Label>\n            <Textarea\n              id=\"content\"\n              {...form.register(\"content\")}\n              className=\"mt-1\"\n              placeholder=\"Brief description of the letter content\"\n              rows={3}\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"file\">Attach Document (PDF or Word)</Label>\n            <Input\n              id=\"file\"\n              type=\"file\"\n              onChange={handleFileChange}\n              className=\"mt-1\"\n              accept=\".pdf,.doc,.docx\"\n            />\n            <p className=\"text-xs text-gray-500 mt-1\">\n              Supported formats: PDF, Word Document (.doc, .docx). Max size: 50MB\n            </p>\n            {selectedFile && (\n              <div className=\"mt-2 p-2 bg-blue-50 dark:bg-blue-900/20 rounded border border-blue-200 dark:border-blue-800\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-lg\">\n                    {selectedFile.name.endsWith('.pdf') ? '📄' : '📝'}\n                  </span>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm font-medium text-blue-900 dark:text-blue-100 truncate\">\n                      {selectedFile.name}\n                    </p>\n                    <p className=\"text-xs text-blue-700 dark:text-blue-300\">\n                      {(selectedFile.size / (1024 * 1024)).toFixed(2)} MB\n                    </p>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n          \n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={() => onOpenChange(false)}\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={uploadLetterMutation.isPending || !selectedFile}\n            >\n              {uploadLetterMutation.isPending ? \"Uploading...\" : \"Upload Letter\"}\n            </Button>\n            {uploadLetterMutation.isError && (\n              <span className=\"ml-4 text-red-600 font-semibold\">Upload failed. Please try again.</span>\n            )}\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8693},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/dashboard/FolderLetters.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { FileText, Download, Eye, Upload } from \"lucide-react\";\nimport DocumentPreview from \"@/components/DocumentPreview\";\nimport UploadLetterModal from \"@/components/modals/UploadLetterModal\";\n\nexport default function FolderLetters({ folderId, onUpload }: { folderId: string, onUpload?: () => void }) {\n  const [searchDate, setSearchDate] = useState<string>(\"\");\n  const [uploadModalOpen, setUploadModalOpen] = useState(false);\n\n  // Fetch letters from API with filters\n  const { data: letters, isLoading, refetch } = useQuery({\n    queryKey: [\"/api/letters\", folderId, searchDate],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (folderId) params.append(\"folderId\", folderId);\n      if (searchDate) params.append(\"date\", searchDate);\n      const url = `/api/letters?${params.toString()}`;\n      console.log('Fetching letters with URL:', url); // Debug log\n      const token = localStorage.getItem('auth_token');\n      const res = await fetch(url, {\n        headers: {\n          ...(token && { Authorization: `Bearer ${token}` }),\n        },\n        credentials: \"include\",\n      });\n      if (!res.ok) throw new Error(\"Failed to fetch letters\");\n      const data = await res.json();\n      console.log('Received letters data:', data); // Debug log\n      return data;\n    },\n  });\n\n  // Utility function to determine file type\n  function getFileTypeIcon(fileName?: string) {\n    // Always show a document icon for all files\n    return <span className=\"text-white text-lg\" title=\"File\">📄</span>;\n  };\n\n  const handleUploadSuccess = () => {\n    setUploadModalOpen(false);\n    refetch(); // Refresh the letters list\n    if (onUpload) onUpload();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"animate-spin rounded-full h-16 w-16 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Header with Upload Button and Filter */}\n      <div className=\"flex flex-col sm:flex-row justify-between gap-4\">\n        <Button \n          onClick={() => setUploadModalOpen(true)}\n          className=\"bg-blue-600 hover:bg-blue-700 text-white font-semibold shadow w-full sm:w-auto\"\n        >\n          <Upload className=\"mr-2 h-4 w-4\" />\n          Upload Letter\n        </Button>\n        \n        <div className=\"flex gap-2\">\n          <Input\n            type=\"date\"\n            value={searchDate}\n            onChange={(e) => setSearchDate(e.target.value)}\n            className=\"w-full sm:w-auto\"\n            placeholder=\"Filter by date\"\n          />\n          {searchDate && (\n            <Button \n              variant=\"outline\" \n              onClick={() => setSearchDate(\"\")}\n              className=\"h-10 px-3\"\n            >\n              Clear\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {/* Letters Table */}\n      {letters?.length > 0 ? (\n        <div className=\"border rounded-lg overflow-hidden\">\n          <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n            <thead className=\"bg-gray-50 dark:bg-gray-800\">\n              <tr>\n                <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Letter</th>\n                <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Status</th>\n                <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Date</th>\n                <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Actions</th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\n              {letters.map((letter: any) => (\n                <tr key={letter.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\n                  <td className=\"px-4 py-3 whitespace-nowrap\">\n                    <div className=\"flex items-center\">\n                      <span className=\"flex items-center text-lg\">\n                        {getFileTypeIcon(letter.fileName) ||\n                          getFileTypeIcon(letter.originalFileName) ||\n                          getFileTypeIcon(letter.filename) ||\n                          getFileTypeIcon(letter.original_name) ||\n                          <FileText className=\"h-4 w-4 text-blue-600\" />}\n                      </span>\n                      <div className=\"ml-2\">\n                        <div className=\"text-sm font-medium text-gray-900 dark:text-white\">{letter.title}</div>\n                        <div className=\"text-xs text-gray-500 dark:text-gray-400\">{letter.reference}</div>\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-4 py-3 whitespace-nowrap\">\n                    <span className=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400\">\n                      {letter.status}\n                    </span>\n                  </td>\n                  <td className=\"px-4 py-3 whitespace-nowrap text-xs text-gray-500 dark:text-gray-400\">\n                    {new Date(letter.uploadedAt).toLocaleDateString()}\n                  </td>\n                  <td className=\"px-4 py-3 whitespace-nowrap text-sm font-medium\">\n                    <div className=\"flex items-center gap-1\">\n                      {letter.fileName && letter.fileUrl ? (\n                        <DocumentPreview\n                          fileName={letter.fileName}\n                          fileUrl={letter.fileUrl}\n                          uploadedAt={new Date(letter.uploadedAt)}\n                        >\n                          <Button variant=\"outline\" size=\"sm\" className=\"h-8 px-2 gap-1\">\n                            <Eye className=\"h-3 w-3\" />\n                            <span className=\"sr-only\">Preview</span>\n                          </Button>\n                        </DocumentPreview>\n                      ) : (\n                        <Button variant=\"outline\" size=\"sm\" disabled className=\"h-8 px-2 gap-1\">\n                          <FileText className=\"h-3 w-3\" />\n                        </Button>\n                      )}\n                      {letter.fileName && letter.fileUrl && (\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\" \n                          onClick={() => {\n                            // Create a temporary link element\n                            const link = document.createElement('a');\n                            // Use the full URL for the href\n                            link.href = letter.fileUrl.startsWith('http') ? letter.fileUrl : `${window.location.origin}${letter.fileUrl}`;\n                            link.download = letter.fileName || 'download';\n                            // Add to DOM, click, then remove\n                            document.body.appendChild(link);\n                            link.click();\n                            document.body.removeChild(link);\n                          }}\n                          className=\"h-8 px-2 gap-1\"\n                        >\n                          <Download className=\"h-3 w-3\" />\n                          <span className=\"sr-only\">Download</span>\n                        </Button>\n                      )}\n                      {/* Delete Button */}\n                      <Button\n                        variant=\"destructive\"\n                        size=\"sm\"\n                        onClick={async () => {\n                          if (confirm(`Are you sure you want to delete the letter \"${letter.title}\"?`)) {\n                            try {\n                              const token = localStorage.getItem('auth_token');\n                              const response = await fetch(`/api/letters/${letter.id}`, {\n                                method: 'DELETE',\n                                headers: {\n                                  ...(token && { Authorization: `Bearer ${token}` }),\n                                },\n                              });\n                              \n                              if (response.ok) {\n                                // Refresh the letters list\n                                refetch();\n                              } else {\n                                const error = await response.json();\n                                alert(`Failed to delete letter: ${error.message || 'Unknown error'}`);\n                              }\n                            } catch (error) {\n                              console.error('Error deleting letter:', error);\n                              alert('Failed to delete letter. Please try again.');\n                            }\n                          }\n                        }}\n                        className=\"h-8 px-2 gap-1\"\n                      >\n                        Delete\n                      </Button>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      ) : (\n        <div className=\"text-center py-8 border rounded-lg\">\n          <i className=\"fas fa-envelope-open text-gray-400 text-4xl mb-2\"></i>\n          <h3 className=\"text-md font-medium text-gray-900 dark:text-white mb-1\">No letters yet</h3>\n          <p className=\"text-gray-500 dark:text-gray-400 text-sm\">This folder is empty</p>\n        </div>\n      )}\n\n      {/* Upload Letter Modal */}\n      <UploadLetterModal \n        open={uploadModalOpen} \n        onOpenChange={setUploadModalOpen} \n        folderId={folderId}\n        onSuccess={handleUploadSuccess}\n      />\n    </div>\n  );\n}","size_bytes":10156},"client/src/pages/dashboard/Folders.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport CreateFolderModal from \"@/components/modals/CreateFolderModal\";\nimport { Dialog, DialogClose, DialogContent, DialogTitle } from \"@/components/ui/dialog\";\nimport FolderLetters from \"./FolderLetters\";\nimport { FaFolder } from \"react-icons/fa\";\nimport { X } from \"lucide-react\";\n\nexport default function Folders() {\n  const [createModalOpen, setCreateModalOpen] = useState(false);\n  const [openFolderId, setOpenFolderId] = useState<string | null>(null);\n\n  const { data: folders, isLoading } = useQuery({\n    queryKey: [\"/api/folders\"],\n    queryFn: async () => {\n      const token = localStorage.getItem(\"auth_token\");\n      const res = await fetch(\"/api/folders\", {\n        headers: {\n          ...(token && { Authorization: `Bearer ${token}` }),\n        },\n        credentials: \"include\",\n      });\n      if (!res.ok) throw new Error(\"Failed to fetch folders\");\n      return res.json();\n    },\n  });\n\n  const getFolderIcon = (department: string) => {\n    const icons: Record<string, string> = {\n      \"Industry Department\": \"text-blue-600\",\n      \"Policy & Regulations\": \"text-green-600\",\n      \"Budget & Finance\": \"text-yellow-600\",\n      \"Administration\": \"text-purple-600\",\n      \"Legal Affairs\": \"text-red-600\",\n    };\n    return icons[department] || \"text-gray-600\";\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n          Document Folders\n        </h2>\n        <Button onClick={() => setCreateModalOpen(true)} className=\"bg-blue-600 hover:bg-blue-700 text-white font-semibold shadow\">\n          <i className=\"fas fa-plus mr-2\"></i>Create Folder\n        </Button>\n      </div>\n\n      {Array.isArray(folders) && folders.length > 0 ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {folders.map((folder: any) => (\n            <Card\n              key={folder.id}\n              className=\"hover:shadow-md transition-shadow cursor-pointer\"\n            >\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className={`h-12 w-12 bg-gray-100 dark:bg-gray-700 rounded-lg flex items-center justify-center`}>\n                    <FaFolder className=\"text-yellow-700 text-2xl\" style={{ color: '#b8860b' }} />\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      className=\"bg-red-600 hover:bg-red-700 text-white\"\n                      onClick={async () => {\n                        if (\n                          confirm(\n                            `Are you sure you want to delete folder '${folder.name}'? This will not delete the letters inside.`\n                          )\n                        ) {\n                          try {\n                            const token = localStorage.getItem(\"auth_token\");\n                            const response = await fetch(`/api/folders/${folder.id}`, {\n                              method: \"DELETE\",\n                              headers: {\n                                ...(token && { Authorization: `Bearer ${token}` }),\n                              },\n                            });\n                            \n                            if (response.ok) {\n                              window.location.reload();\n                            } else {\n                              const errorData = await response.json().catch(() => ({}));\n                              const errorMessage = errorData.message || response.statusText || 'Unknown error';\n                              alert(`Failed to delete folder: ${errorMessage}`);\n                            }\n                          } catch (error) {\n                            console.error('Error deleting folder:', error);\n                            alert(`Failed to delete folder: ${error instanceof Error ? error.message : 'Unknown error'}`);\n                          }\n                        }\n                      }}\n                    >\n                      Delete\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"bg-green-600 hover:bg-green-700 text-white\"\n                      onClick={() => setOpenFolderId(folder.id.toString())}\n                    >\n                      Open\n                    </Button>\n                  </div>\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n                  {folder.name}\n                </h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-4\">\n                  {folder.description || \"No description provided\"}\n                </p>\n                <div className=\"flex items-center justify-between text-sm text-gray-500 dark:text-gray-400\">\n                  <span>{folder.letterCount || 0} letters</span>\n                  <span>\n                    Updated{\" \"}\n                    {new Date(folder.createdAt).toLocaleDateString()}\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <div className=\"text-center py-12\">\n          <i className=\"fas fa-folder-open text-gray-400 text-6xl mb-4\"></i>\n          <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\n            No folders yet\n          </h3>\n          <p className=\"text-gray-500 dark:text-gray-400 mb-4\">\n            Create your first folder to organize documents\n          </p>\n          <Button onClick={() => setCreateModalOpen(true)}>\n            <i className=\"fas fa-plus mr-2\"></i>Create Folder\n          </Button>\n        </div>\n      )}\n\n      <CreateFolderModal\n        open={createModalOpen}\n        onOpenChange={setCreateModalOpen}\n      />\n\n      {/* Letters Management Modal */}\n      <Dialog open={!!openFolderId} onOpenChange={() => setOpenFolderId(null)}>\n        <DialogContent className=\"max-w-4xl w-full max-h-[80vh] flex flex-col bg-white dark:bg-gray-900 rounded-lg shadow-xl p-0\">\n          <div className=\"flex justify-between items-center p-6 border-b border-gray-200 dark:border-gray-700\">\n            <DialogTitle className=\"text-xl font-bold text-gray-900 dark:text-white m-0\">\n              Letters in Folder\n            </DialogTitle>\n          </div>\n          <div className=\"flex-1 overflow-y-auto p-6\">\n            {openFolderId && <FolderLetters folderId={openFolderId} onUpload={() => setOpenFolderId(null)} />}\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":7222},"client/src/pages/dashboard/Letters.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FileText, Download, Eye } from \"lucide-react\";\nimport UploadLetterModal from \"@/components/modals/UploadLetterModal\";\nimport DocumentPreview from \"@/components/DocumentPreview\";\n\nexport default function Letters({ folderId }: { folderId?: string }) {\n  const [uploadModalOpen, setUploadModalOpen] = useState(false);\n  const [selectedFolder, setSelectedFolder] = useState<string>(folderId || \"all\");\n  const [selectedStatus, setSelectedStatus] = useState<string>(\"all\");\n  const [searchDate, setSearchDate] = useState<string>(\"\");\n\n  // If folderId changes, update selectedFolder\n  useEffect(() => {\n    if (folderId) setSelectedFolder(folderId);\n  }, [folderId]);\n\n  // Fetch letters from API with filters\n  const { data: letters, isLoading } = useQuery({\n    queryKey: [\"/api/letters\", selectedFolder, selectedStatus, searchDate],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (selectedFolder && selectedFolder !== \"all\") params.append(\"folderId\", selectedFolder);\n      if (selectedStatus && selectedStatus !== \"all\") params.append(\"status\", selectedStatus);\n      if (searchDate) params.append(\"date\", searchDate);\n      const url = `/api/letters?${params.toString()}`;\n      const token = localStorage.getItem('auth_token');\n      const res = await fetch(url, {\n        headers: {\n          ...(token && { Authorization: `Bearer ${token}` }),\n        },\n        credentials: \"include\",\n      });\n      if (!res.ok) throw new Error(\"Failed to fetch letters\");\n      return res.json();\n    },\n    // Optimize query settings for better performance\n    staleTime: 30 * 1000, // 30 seconds\n    gcTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const { data: folders } = useQuery({\n    queryKey: [\"/api/folders\"],\n    queryFn: async () => {\n      const token = localStorage.getItem('auth_token');\n      const res = await fetch('/api/folders', {\n        headers: {\n          ...(token && { Authorization: `Bearer ${token}` }),\n        },\n        credentials: \"include\",\n      });\n      if (!res.ok) throw new Error(\"Failed to fetch folders\");\n      return res.json();\n    },\n    // Optimize query settings for better performance\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    gcTime: 10 * 60 * 1000, // 10 minutes\n  });\n\n  useEffect(() => {\n    if (folderId) setSelectedFolder(folderId);\n    else {\n      // On mount, check for ?folder=... in URL and set selectedFolder\n      const params = new URLSearchParams(window.location.search);\n      const folderIdFromUrl = params.get('folder');\n      if (folderIdFromUrl) {\n        setSelectedFolder(folderIdFromUrl);\n      }\n    }\n  }, [folderId]);\n\n  const getStatusBadge = (status: string) => {\n    const badges = {\n      verified: \"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\",\n      pending: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400\",\n      rejected: \"bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400\",\n    };\n    return badges[status as keyof typeof badges] || badges.pending;\n  };\n\n  // Memoize the file type icon function to prevent unnecessary re-renders\n  const getFileTypeIcon = useMemo(() => {\n    return (fileName?: string) => {\n      // Always show a document icon for all files\n      return <span className=\"text-white text-lg\" title=\"File\">📄</span>;\n    };\n  }, []);\n\n  // Memoize the filtered letters to prevent unnecessary re-renders\n  const filteredLetters = useMemo(() => {\n    if (!letters) return [];\n    return letters;\n  }, [letters]);\n\n  // Debug: log the letters data to verify fileName/originalFileName\n  useEffect(() => {\n    if (letters) {\n      console.log('DEBUG: Letters data', letters);\n    }\n  }, [letters]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n          {folderId ? (\n            <>\n              <span className=\"font-extrabold text-blue-700\">\n                {folders?.find((f: any) => f.id === parseInt(folderId))?.name || ''}\n              </span>\n              <span className=\"ml-2 font-normal text-gray-700 dark:text-gray-300\">Letters Management</span>\n            </>\n          ) : (\n            \"Letters Management\"\n          )}\n        </h2>\n        <Button \n          onClick={() => setUploadModalOpen(true)}\n          className=\"bg-blue-600 hover:bg-blue-700 text-white font-semibold shadow\"\n        >\n          <i className=\"fas fa-upload mr-2\"></i>Upload Letter\n        </Button>\n      </div>\n\n      {/* Upload Letter Modal, pass folderId if present */}\n      <UploadLetterModal open={uploadModalOpen} onOpenChange={setUploadModalOpen} folderId={folderId} />\n\n      {/* Filter Bar */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-wrap gap-4\">\n            {folderId ? (\n              <Input\n                value={folders?.find((f: any) => f.id === parseInt(folderId))?.name || ''}\n                disabled\n                className=\"w-48\"\n              />\n            ) : (\n              <Select value={selectedFolder} onValueChange={setSelectedFolder}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"All Folders\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Folders</SelectItem>\n                  {folders?.map((folder: any) => (\n                    <SelectItem key={folder.id} value={folder.id.toString()}>\n                      {folder.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            )}\n            <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n              <SelectTrigger className=\"w-32\">\n                <SelectValue placeholder=\"All Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"verified\">Verified</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"rejected\">Rejected</SelectItem>\n              </SelectContent>\n            </Select>\n            <Input\n              type=\"date\"\n              value={searchDate}\n              onChange={(e) => setSearchDate(e.target.value)}\n              className=\"w-48\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Letters Table */}\n      {filteredLetters?.length > 0 ? (\n        <Card>\n          <CardContent className=\"p-0\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n                <thead className=\"bg-gray-50 dark:bg-gray-900\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Letter</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Folder</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Status</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Date</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\n                  {filteredLetters.map((letter: any) => (\n                    <tr key={letter.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div className=\"flex items-center\">\n                          {/* Show file type icon and file name for debugging, no blue background */}\n                          <span className=\"flex items-center text-2xl\">\n                            {getFileTypeIcon(letter.fileName) ||\n                              getFileTypeIcon(letter.originalFileName) ||\n                              getFileTypeIcon(letter.filename) ||\n                              getFileTypeIcon(letter.original_name) ||\n                              <FileText className=\"h-5 w-5 text-blue-600\" />}\n                            <span className=\"ml-2 text-xs text-gray-400\">\n                              {letter.fileName || letter.originalFileName || letter.filename || letter.original_name || 'NO FILE NAME'}\n                            </span>\n                          </span>\n                          <div className=\"ml-4\">\n                            <div className=\"text-sm font-medium text-gray-900 dark:text-white\">{letter.title}</div>\n                            <div className=\"text-sm text-gray-500 dark:text-gray-400\">{letter.reference}</div>\n                            {letter.fileName && (\n                              <div className=\"text-xs text-blue-600 dark:text-blue-400 mt-1\">\n                                📎 {letter.fileName}\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\n                        {letter.folder?.name || \"Unknown\"}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusBadge(letter.status)}`}>\n                          {letter.status}\n                        </span>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">\n                        {new Date(letter.uploadedAt).toLocaleDateString()}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                        <div className=\"flex items-center gap-2\">\n                          {letter.fileName && letter.fileUrl ? (\n                            <DocumentPreview\n                              fileName={letter.fileName}\n                              fileUrl={letter.fileUrl}\n                              uploadedAt={new Date(letter.uploadedAt)}\n                            >\n                              <Button variant=\"outline\" size=\"sm\" className=\"gap-1\">\n                                <Eye className=\"h-3 w-3\" />\n                                Preview\n                              </Button>\n                            </DocumentPreview>\n                          ) : (\n                            <Button variant=\"outline\" size=\"sm\" disabled className=\"gap-1\">\n                              <FileText className=\"h-3 w-3\" />\n                              No File\n                            </Button>\n                          )}\n                          {letter.fileName && letter.fileUrl && (\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\" \n                              onClick={() => {\n                                // Create a temporary link element\n                                const link = document.createElement('a');\n                                // Use the full URL for the href\n                                link.href = letter.fileUrl.startsWith('http') ? letter.fileUrl : `${window.location.origin}${letter.fileUrl}`;\n                                link.download = letter.fileName || 'download';\n                                // Add to DOM, click, then remove\n                                document.body.appendChild(link);\n                                link.click();\n                                document.body.removeChild(link);\n                              }}\n                              className=\"gap-1\"\n                            >\n                              <Download className=\"h-3 w-3\" />\n                              Download\n                            </Button>\n                          )}\n                          {/* Delete Button */}\n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={async () => {\n                              if (confirm(`Are you sure you want to delete the letter \"${letter.title}\"?`)) {\n                                try {\n                                  const token = localStorage.getItem('auth_token');\n                                  const response = await fetch(`/api/letters/${letter.id}`, {\n                                    method: 'DELETE',\n                                    headers: {\n                                      ...(token && { Authorization: `Bearer ${token}` }),\n                                    },\n                                  });\n                                  \n                                  if (response.ok) {\n                                    // Refresh the letters list\n                                    window.location.reload();\n                                  } else if (response.status === 404) {\n                                    alert(`The letter \"${letter.title}\" was not found. It may have already been deleted.`);\n                                    // Refresh the letters list to show the current state\n                                    window.location.reload();\n                                  } else {\n                                    const errorData = await response.json().catch(() => ({}));\n                                    const errorMessage = errorData.message || response.statusText || 'Unknown error';\n                                    alert(`Failed to delete letter: ${errorMessage}`);\n                                  }\n                                } catch (error) {\n                                  console.error('Error deleting letter:', error);\n                                  alert(`Failed to delete letter: ${error instanceof Error ? error.message : 'Unknown error'}`);\n                                }\n                              }\n                            }}\n                          >\n                            Delete\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"text-center py-12\">\n          <i className=\"fas fa-envelope-open text-gray-400 text-6xl mb-4\"></i>\n          <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">No letters yet</h3>\n          <p className=\"text-gray-500 dark:text-gray-400 mb-4\">Upload your first letter to get started</p>\n          <Button onClick={() => setUploadModalOpen(true)}>\n            <i className=\"fas fa-upload mr-2\"></i>Upload Letter\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":15954},"client/src/pages/dashboard/Overview.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { FaFolderPlus, FaArrowUp, FaUserPlus, FaUserMinus, FaCheckCircle, FaEdit, FaInfoCircle } from \"react-icons/fa\";\n\nexport default function Overview() {\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/stats\"],\n  });\n\n  const { data: recentLetters } = useQuery({\n    queryKey: [\"/api/letters/recent\"],\n  });\n\n  const { data: activityLogs } = useQuery({\n    queryKey: [\"/api/audit-logs/recent\"],\n  });\n\n  const statsData = stats || {\n    totalFolders: 0,\n    activeLetters: 0,\n    pendingVerification: 0,\n    activeUsers: 0,\n  };\n\n  const getStatusBadge = (status: string) => {\n    const badges = {\n      verified: \"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\",\n      pending: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400\",\n      rejected: \"bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400\",\n    };\n    return badges[status as keyof typeof badges] || badges.pending;\n  };\n\n  // Creative icon mapping for log actions using react-icons\n  const getActivityIcon = (action: string) => {\n    switch (action) {\n      case 'create_folder':\n        return <FaFolderPlus className=\"text-blue-600 text-lg\" />;\n      case 'upload_letter':\n        return <FaArrowUp className=\"text-green-600 text-lg\" />;\n      case 'create_user':\n        return <FaUserPlus className=\"text-purple-600 text-lg\" />;\n      case 'delete_user':\n        return <FaUserMinus className=\"text-red-600 text-lg\" />;\n      case 'verify':\n        return <FaCheckCircle className=\"text-green-600 text-lg\" />;\n      case 'update':\n        return <FaEdit className=\"text-orange-600 text-lg\" />;\n      default:\n        return <FaInfoCircle className=\"text-gray-600 text-lg\" />;\n    }\n  };\n\n  // Utility function to determine file type icon\n  function getFileTypeIcon(fileName?: string) {\n    // Always show a document icon for all files\n    return <span title=\"File\">📄</span>;\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-3 bg-blue-700 dark:bg-blue-900 rounded-lg\">\n                <i className=\"fas fa-folder text-blue-100 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Folders</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">{statsData.totalFolders}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-3 bg-green-700 dark:bg-green-900 rounded-lg\">\n                <i className=\"fas fa-envelope text-green-100 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Active Letters</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">{statsData.activeLetters}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-3 bg-yellow-600 dark:bg-yellow-900 rounded-lg\">\n                <i className=\"fas fa-clock text-yellow-100 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Pending Verification</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">{statsData.pendingVerification}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-3 bg-purple-700 dark:bg-purple-900 rounded-lg\">\n                <i className=\"fas fa-users text-purple-100 text-xl\"></i>\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Active Users</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">{statsData.activeUsers}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Activity */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Letters</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {recentLetters?.length > 0 ? (\n                recentLetters.map((letter: any) => (\n                  <div key={letter.id} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                    <div className=\"flex items-center\">\n                      {/* File type icon logic, always show document icon */}\n                      <span className=\"flex items-center text-2xl\">\n                        {getFileTypeIcon(letter.fileName || letter.originalFileName || letter.filename || letter.original_name) || <span>📄</span>}\n                      </span>\n                      <div className=\"ml-3\">\n                        <p className=\"text-sm font-medium text-gray-900 dark:text-white\">{letter.title}</p>\n                        <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                          {new Date(letter.uploadedAt).toLocaleDateString()}\n                        </p>\n                      </div>\n                    </div>\n                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusBadge(letter.status)}`}>\n                      {letter.status}\n                    </span>\n                  </div>\n                ))\n              ) : (\n                <div className=\"text-center py-8\">\n                  <i className=\"fas fa-inbox text-gray-400 text-3xl mb-2\"></i>\n                  <p className=\"text-gray-500 dark:text-gray-400\">No recent letters</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>System Activity</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {activityLogs?.length > 0 ? (\n                activityLogs.map((log: any) => (\n                  <div key={log.id} className=\"flex items-start\">\n                    <div className=\"h-8 w-8 bg-gray-200 dark:bg-gray-800 rounded-full flex items-center justify-center\">\n                      {getActivityIcon(log.action)}\n                    </div>\n                    <div className=\"ml-3\">\n                      <p className=\"text-sm text-gray-900 dark:text-white\">{log.details?.description || log.action}</p>\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                        {new Date(log.timestamp).toLocaleString()}\n                      </p>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <div className=\"text-center py-8\">\n                  <i className=\"fas fa-clock text-gray-400 text-3xl mb-2\"></i>\n                  <p className=\"text-gray-500 dark:text-gray-400\">No recent activity</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7850},"client/src/pages/dashboard/Reports.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function Reports() {\n  return (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">Reports & Analytics</h2>\n      \n      <Card>\n        <CardContent className=\"p-8\">\n          <div className=\"text-center\">\n            <i className=\"fas fa-chart-bar text-blue-600 text-6xl mb-4\"></i>\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">Analytics Dashboard</h3>\n            <p className=\"text-gray-600 dark:text-gray-400\">Comprehensive reporting features in development</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":703},"client/src/pages/dashboard/Routing.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Plus, Settings, ArrowRight, Eye, Edit, Trash2, AlertCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { CreateRoutingRuleModal } from \"@/components/modals/CreateRoutingRuleModal\";\n\ninterface RoutingRule {\n  id: number;\n  name: string;\n  department: string;\n  targetDepartment: string;\n  priority: number;\n  isActive: boolean;\n  description?: string;\n  conditions: {\n    title?: string;\n    reference?: string;\n    keywords?: string[];\n    status?: string;\n  };\n  createdAt: Date;\n  createdBy: string;\n}\n\ninterface DocumentRouting {\n  id: number;\n  letterId: number;\n  fromDepartment: string;\n  toDepartment: string;\n  status: string;\n  routedAt: Date;\n  deliveredAt?: Date;\n  notes?: string;\n  routingRuleId?: number;\n}\n\nexport default function Routing() {\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [selectedTab, setSelectedTab] = useState<'rules' | 'activity'>('rules');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch routing rules\n  const { data: routingRules = [], isLoading: rulesLoading } = useQuery({\n    queryKey: ['/api/routing-rules'],\n    queryFn: () => fetch('/api/routing-rules').then(res => res.json()),\n  });\n\n  // Fetch routing activity\n  const { data: routingActivity = [], isLoading: activityLoading } = useQuery({\n    queryKey: ['/api/document-routing'],\n    queryFn: () => fetch('/api/document-routing').then(res => res.json()),\n  });\n\n  // Delete routing rule mutation\n  const deleteRuleMutation = useMutation({\n    mutationFn: async (ruleId: number) => {\n      return apiRequest(\"DELETE\", `/api/routing-rules/${ruleId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/routing-rules'] });\n      toast({\n        title: \"Rule Deleted\",\n        description: \"Routing rule has been successfully deleted.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Toggle rule status\n  const toggleRuleMutation = useMutation({\n    mutationFn: async ({ ruleId, isActive }: { ruleId: number; isActive: boolean }) => {\n      return apiRequest(\"PATCH\", `/api/routing-rules/${ruleId}`, { isActive });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/routing-rules'] });\n      toast({\n        title: \"Rule Updated\",\n        description: \"Routing rule status has been updated.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';\n      case 'in_transit': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';\n      case 'delivered': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\n      case 'rejected': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n    }\n  };\n\n  const getPriorityColor = (priority: number) => {\n    if (priority >= 8) return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\n    if (priority >= 5) return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300';\n    if (priority >= 3) return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';\n    return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n            Document Routing\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Manage automated document routing rules and monitor activity\n          </p>\n        </div>\n        <Button onClick={() => setIsCreateModalOpen(true)}>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Rule\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Rules</CardTitle>\n            <Settings className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{routingRules.filter((rule: RoutingRule) => rule.isActive).length}</div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Documents Routed Today</CardTitle>\n            <ArrowRight className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {routingActivity.filter((activity: DocumentRouting) => \n                new Date(activity.routedAt).toDateString() === new Date().toDateString()\n              ).length}\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending Deliveries</CardTitle>\n            <AlertCircle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {routingActivity.filter((activity: DocumentRouting) => activity.status === 'pending').length}\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Delivered</CardTitle>\n            <Eye className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {routingActivity.filter((activity: DocumentRouting) => activity.status === 'delivered').length}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"border-b border-gray-200 dark:border-gray-700\">\n        <nav className=\"-mb-px flex space-x-8\">\n          <button\n            onClick={() => setSelectedTab('rules')}\n            className={`py-2 px-1 border-b-2 font-medium text-sm ${\n              selectedTab === 'rules'\n                ? 'border-blue-500 text-blue-600 dark:text-blue-400'\n                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300'\n            }`}\n          >\n            Routing Rules\n          </button>\n          <button\n            onClick={() => setSelectedTab('activity')}\n            className={`py-2 px-1 border-b-2 font-medium text-sm ${\n              selectedTab === 'activity'\n                ? 'border-blue-500 text-blue-600 dark:text-blue-400'\n                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300'\n            }`}\n          >\n            Routing Activity\n          </button>\n        </nav>\n      </div>\n\n      {/* Tab Content */}\n      {selectedTab === 'rules' && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Routing Rules</CardTitle>\n            <CardDescription>\n              Configure automatic document routing based on department rules\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {rulesLoading ? (\n              <div className=\"text-center py-8\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n                <p className=\"text-gray-500 dark:text-gray-400 mt-2\">Loading routing rules...</p>\n              </div>\n            ) : routingRules.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Settings className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">No routing rules</h3>\n                <p className=\"text-gray-500 dark:text-gray-400 mb-4\">\n                  Create your first routing rule to automate document distribution\n                </p>\n                <Button onClick={() => setIsCreateModalOpen(true)}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create First Rule\n                </Button>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {routingRules.map((rule: RoutingRule) => (\n                  <div key={rule.id} className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex items-center space-x-3\">\n                        <h3 className=\"font-medium text-gray-900 dark:text-white\">{rule.name}</h3>\n                        <Badge className={getPriorityColor(rule.priority)}>\n                          Priority {rule.priority}\n                        </Badge>\n                        <Badge variant={rule.isActive ? \"default\" : \"secondary\"}>\n                          {rule.isActive ? \"Active\" : \"Inactive\"}\n                        </Badge>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => toggleRuleMutation.mutate({ ruleId: rule.id, isActive: !rule.isActive })}\n                        >\n                          {rule.isActive ? \"Disable\" : \"Enable\"}\n                        </Button>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => deleteRuleMutation.mutate(rule.id)}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">\n                      <span className=\"font-medium\">Route from:</span> {rule.department} \n                      <ArrowRight className=\"h-4 w-4 mx-2 inline\" />\n                      <span className=\"font-medium\">To:</span> {rule.targetDepartment}\n                    </div>\n                    \n                    {rule.description && (\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">{rule.description}</p>\n                    )}\n                    \n                    <div className=\"text-xs text-gray-500 dark:text-gray-500\">\n                      <span className=\"font-medium\">Conditions:</span> \n                      {rule.conditions.title && ` Title contains \"${rule.conditions.title}\"`}\n                      {rule.conditions.keywords && ` Keywords: ${rule.conditions.keywords.join(', ')}`}\n                      {rule.conditions.status && ` Status: ${rule.conditions.status}`}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {selectedTab === 'activity' && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Routing Activity</CardTitle>\n            <CardDescription>\n              Track document routing and delivery status\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {activityLoading ? (\n              <div className=\"text-center py-8\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n                <p className=\"text-gray-500 dark:text-gray-400 mt-2\">Loading routing activity...</p>\n              </div>\n            ) : routingActivity.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <ArrowRight className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">No routing activity</h3>\n                <p className=\"text-gray-500 dark:text-gray-400\">\n                  Document routing activity will appear here once rules are triggered\n                </p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {routingActivity.map((activity: DocumentRouting) => (\n                  <div key={activity.id} className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex items-center space-x-3\">\n                        <span className=\"font-medium text-gray-900 dark:text-white\">\n                          Document #{activity.letterId}\n                        </span>\n                        <Badge className={getStatusColor(activity.status)}>\n                          {activity.status.replace('_', ' ').toUpperCase()}\n                        </Badge>\n                      </div>\n                      <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                        {new Date(activity.routedAt).toLocaleDateString()}\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">\n                      <span className=\"font-medium\">From:</span> {activity.fromDepartment} \n                      <ArrowRight className=\"h-4 w-4 mx-2 inline\" />\n                      <span className=\"font-medium\">To:</span> {activity.toDepartment}\n                    </div>\n                    \n                    {activity.notes && (\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">{activity.notes}</p>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Create Routing Rule Modal */}\n      <CreateRoutingRuleModal \n        open={isCreateModalOpen} \n        onOpenChange={setIsCreateModalOpen} \n      />\n    </div>\n  );\n}","size_bytes":15158},"client/src/pages/dashboard/UserManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Plus, UserPlus, Shield, Eye, Users, AlertCircle, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport RegisterUserModal from \"@/components/modals/RegisterUserModal\";\nimport { User } from \"@shared/schema\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\n// Extended user type with roles array\ninterface UserWithRoles extends Omit<User, 'password'> {\n  roles: string[];\n}\n\nexport default function UserManagement() {\n  const [createUserModalOpen, setCreateUserModalOpen] = useState(false);\n  const { user, userRole } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: users = [], isLoading, refetch } = useQuery<UserWithRoles[]>({\n    queryKey: ['/api/users'],\n  });\n\n  // Helper function to get user's primary role\n  const getUserPrimaryRole = (user: UserWithRoles): string => {\n    if (user.roles && user.roles.length > 0) {\n      // Prioritize admin role\n      if (user.roles.includes('admin')) return 'admin';\n      if (user.roles.includes('registry')) return 'registry';\n      if (user.roles.includes('officer')) return 'officer';\n      return user.roles[0]; // Return first role if none of the above\n    }\n    return 'unknown';\n  };\n\n  // Use canAddUsers from auth context\n  const { canAddUsers } = useAuth();\n\n  // Check existing role constraints for single-position roles\n  const getExistingRoleCounts = () => {\n    const counts = {\n      secretary: users.filter(u => u.position === 'Secretary').length,\n      ps: users.filter(u => u.position === 'PS').length,\n      industrial_secretary: users.filter(u => u.position === 'Secretary' && u.department === 'Industrialization').length,\n    };\n    return counts;\n  };\n\n  const getRoleBadgeVariant = (role: string) => {\n    switch (role) {\n      case 'admin':\n        return 'destructive';\n      case 'registry':\n        return 'default';\n      case 'officer':\n        return 'secondary';\n      default:\n        return 'outline';\n    }\n  };\n\n  const getRoleIcon = (role: string) => {\n    switch (role) {\n      case 'admin':\n        return <Shield className=\"w-4 h-4\" />;\n      case 'registry':\n        return <Eye className=\"w-4 h-4\" />;\n      case 'officer':\n        return <Users className=\"w-4 h-4\" />;\n      default:\n        return <Users className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getStatusBadge = (isActive: boolean | null) => {\n    return isActive ? (\n      <Badge variant=\"default\" className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\">\n        Active\n      </Badge>\n    ) : (\n      <Badge variant=\"secondary\" className=\"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\">\n        Inactive\n      </Badge>\n    );\n  };\n\n  // Delete user function\n  const deleteUser = async (userId: number, userName: string) => {\n    if (!window.confirm(`Are you sure you want to delete user ${userName}? This action cannot be undone.`)) {\n      return;\n    }\n\n    try {\n      const token = localStorage.getItem('token'); // Get the auth token\n      \n      const response = await fetch(`/api/users/${userId}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`, // Include the auth token\n        },\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to delete user');\n      }\n\n      // Refetch users to update the list\n      refetch();\n\n      toast({\n        title: \"Success\",\n        description: `User ${userName} has been deleted successfully.`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to delete user\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">User Management</h1>\n            <p className=\"text-gray-600 dark:text-gray-300 mt-2\">Manage system users and their access levels</p>\n          </div>\n        </div>\n        <div className=\"grid gap-4 md:grid-cols-3\">\n          {[...Array(3)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardHeader>\n                <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/2\"></div>\n                <div className=\"h-3 bg-gray-200 dark:bg-gray-700 rounded w-3/4\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/3\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n        <Card className=\"animate-pulse\">\n          <CardHeader>\n            <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded w-1/4\"></div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const adminUsers = users.filter(user => user.roles && user.roles.includes('admin'));\n  const registryUsers = users.filter(user => user.roles && user.roles.includes('registry'));\n  const officerUsers = users.filter(user => user.roles && user.roles.includes('officer'));\n\n  const roleCounts = getExistingRoleCounts();\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Access Control Warning */}\n      {!canAddUsers && (\n        <Alert className=\"border-amber-200 bg-amber-50 dark:border-amber-800 dark:bg-amber-900/20\">\n          <AlertCircle className=\"h-4 w-4 text-amber-600 dark:text-amber-400\" />\n          <AlertDescription className=\"text-amber-800 dark:text-amber-200\">\n            <strong>Access Restricted:</strong> Only ICT Administrators and Registry Management Head can register new users.\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Role Constraints Warning */}\n      {canAddUsers && (roleCounts.secretary > 0 || roleCounts.ps > 0) && (\n        <Alert className=\"border-blue-200 bg-blue-50 dark:border-blue-800 dark:bg-blue-900/20\">\n          <AlertCircle className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n          <AlertDescription className=\"text-blue-800 dark:text-blue-200\">\n            <strong>Role Limits:</strong> \n            {roleCounts.secretary > 0 && \" Secretary position filled.\"}\n            {roleCounts.ps > 0 && \" Principal Secretary position filled.\"}\n            {\" Only one person can hold these positions.\"}\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">User Management</h1>\n          <p className=\"text-gray-600 dark:text-gray-300 mt-2\">Manage government hierarchy and user access levels</p>\n        </div>\n        {canAddUsers && (\n          <Button \n            onClick={() => setCreateUserModalOpen(true)}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n          >\n            <UserPlus className=\"w-4 h-4 mr-2\" />\n            Register New User\n          </Button>\n        )}\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <Card className=\"border-red-200 dark:border-red-800\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-red-700 dark:text-red-300\">\n              Administrators\n            </CardTitle>\n            <Shield className=\"h-4 w-4 text-red-600 dark:text-red-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-800 dark:text-red-200\">{adminUsers.length}</div>\n            <p className=\"text-xs text-red-600 dark:text-red-400\">\n              Full system access\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-green-200 dark:border-green-800\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-green-700 dark:text-green-300\">\n              Total Users\n            </CardTitle>\n            <Users className=\"h-4 w-4 text-green-600 dark:text-green-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-800 dark:text-green-200\">{users.length}</div>\n            <p className=\"text-xs text-green-600 dark:text-green-400\">\n              Number of users in the system\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Users Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users className=\"w-5 h-5\" />\n            All System Users\n          </CardTitle>\n          <CardDescription>\n            Complete list of registered users with their roles and access levels\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Name</TableHead>\n                <TableHead>Email</TableHead>\n                <TableHead>Role</TableHead>\n                <TableHead>Department</TableHead>\n                <TableHead>Position</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Created</TableHead>\n                {canAddUsers && <TableHead>Actions</TableHead>}\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {users.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={canAddUsers ? 8 : 7} className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n                    No users found. Create your first user to get started.\n                  </TableCell>\n                </TableRow>\n              ) : (\n                users.map((user) => (\n                  <TableRow key={user.id}>\n                    <TableCell className=\"font-medium\">{user.name}</TableCell>\n                    <TableCell className=\"text-gray-600 dark:text-gray-300\">{user.email}</TableCell>\n                    <TableCell>\n                      <Badge variant={getRoleBadgeVariant(getUserPrimaryRole(user))} className=\"flex items-center gap-1 w-fit\">\n                        {getRoleIcon(getUserPrimaryRole(user))}\n                        {getUserPrimaryRole(user).charAt(0).toUpperCase() + getUserPrimaryRole(user).slice(1)}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-gray-600 dark:text-gray-300\">{user.department}</TableCell>\n                    <TableCell className=\"text-gray-600 dark:text-gray-300\">\n                      {user.position || 'Not specified'}\n                    </TableCell>\n                    <TableCell>{getStatusBadge(user.isActive)}</TableCell>\n                    <TableCell className=\"text-gray-600 dark:text-gray-300\">\n                      {user.createdAt ? new Date(user.createdAt).toLocaleDateString() : 'Unknown'}\n                    </TableCell>\n                    {canAddUsers && (\n                      <TableCell>\n                        <Button\n                          variant=\"destructive\"\n                          size=\"sm\"\n                          onClick={() => deleteUser(user.id, user.name)}\n                          disabled={user.id === Number(localStorage.getItem('userId'))}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </TableCell>\n                    )}\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* Register User Modal */}\n      <RegisterUserModal \n        open={createUserModalOpen} \n        onClose={() => setCreateUserModalOpen(false)} \n      />\n    </div>\n  );\n}","size_bytes":12660},"client/src/pages/dashboard/Users.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport CreateUserModal from \"@/components/modals/CreateUserModal\";\n\nexport default function Users() {\n  const { isAdmin } = useAuth();\n  const [createModalOpen, setCreateModalOpen] = useState(false);\n\n  const { data: users, isLoading } = useQuery({\n    queryKey: [\"/api/users\"],\n    enabled: isAdmin,\n  });\n\n  const getStatusBadge = (isActive: boolean) => {\n    return isActive \n      ? \"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\"\n      : \"bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400\";\n  };\n\n  const getRoleColor = (role: string) => {\n    const colors = {\n      admin: \"text-purple-600\",\n      registry: \"text-blue-600\",\n      officer: \"text-green-600\",\n    };\n    return colors[role as keyof typeof colors] || \"text-gray-600\";\n  };\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase();\n  };\n\n  if (!isAdmin) {\n    return (\n      <div className=\"text-center py-12\">\n        <i className=\"fas fa-lock text-gray-400 text-6xl mb-4\"></i>\n        <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">Access Denied</h3>\n        <p className=\"text-gray-500 dark:text-gray-400\">Only administrators can access user management</p>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">User Management</h2>\n        <Button onClick={() => setCreateModalOpen(true)}>\n          <i className=\"fas fa-user-plus mr-2\"></i>Create User\n        </Button>\n      </div>\n\n      {/* Users Table */}\n      {users?.length > 0 ? (\n        <Card>\n          <CardContent className=\"p-0\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n                <thead className=\"bg-gray-50 dark:bg-gray-900\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">User</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Role</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Department</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Status</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\n                  {users.map((user: any) => (\n                    <tr key={user.id}>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div className=\"flex items-center\">\n                          <div className=\"h-10 w-10 bg-blue-600 rounded-full flex items-center justify-center\">\n                            <span className=\"text-white font-medium text-sm\">{getInitials(user.name)}</span>\n                          </div>\n                          <div className=\"ml-4\">\n                            <div className=\"text-sm font-medium text-gray-900 dark:text-white\">{user.name}</div>\n                            <div className=\"text-sm text-gray-500 dark:text-gray-400\">{user.email}</div>\n                          </div>\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <span className={`text-sm font-medium capitalize ${getRoleColor(user.role)}`}>\n                          {user.role}\n                        </span>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\n                        {user.department}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusBadge(user.isActive)}`}>\n                          {user.isActive ? 'Active' : 'Inactive'}\n                        </span>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                        <button className=\"text-blue-600 hover:text-blue-700 mr-3\">Edit</button>\n                        <button className={`${user.isActive ? 'text-red-600 hover:text-red-900' : 'text-green-600 hover:text-green-900'}`}>\n                          {user.isActive ? 'Deactivate' : 'Activate'}\n                        </button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"text-center py-12\">\n          <i className=\"fas fa-users text-gray-400 text-6xl mb-4\"></i>\n          <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">No users yet</h3>\n          <p className=\"text-gray-500 dark:text-gray-400 mb-4\">Create your first user account</p>\n          <Button onClick={() => setCreateModalOpen(true)}>\n            <i className=\"fas fa-user-plus mr-2\"></i>Create User\n          </Button>\n        </div>\n      )}\n\n      <CreateUserModal \n        open={createModalOpen}\n        onOpenChange={setCreateModalOpen}\n      />\n    </div>\n  );\n}\n","size_bytes":6130},"client/src/pages/dashboard/Verification.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function Verification() {\n  return (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">Document Verification</h2>\n      \n      <Card>\n        <CardContent className=\"p-8\">\n          <div className=\"text-center\">\n            <i className=\"fas fa-shield-check text-blue-600 text-6xl mb-4\"></i>\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">Verification System</h3>\n            <p className=\"text-gray-600 dark:text-gray-400\">Advanced document verification features coming soon</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":717}},"version":1}